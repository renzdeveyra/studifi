(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_a193ae16._.js", {

"[project]/node_modules/base64-js/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
    }
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
}
}}),
"[project]/node_modules/ieee754/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8){}
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8){}
    if (e === 0) {
        e = 1 - eBias;
    } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) {
            value += rt / c;
        } else {
            value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8){}
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8){}
    buffer[offset + i - d] |= s * 128;
};
}}),
"[project]/node_modules/buffer/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
const base64 = __turbopack_context__.r("[project]/node_modules/base64-js/index.js [app-client] (ecmascript)");
const ieee754 = __turbopack_context__.r("[project]/node_modules/ieee754/index.js [app-client] (ecmascript)");
const customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
}
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
            throw new TypeError('The "string" argument must be of type string. Received type number');
        }
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') {
        return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
    }
    if (value == null) {
        throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
    }
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === 'number') {
        throw new TypeError('The "value" argument must not be of type number. Received type number');
    }
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length);
    }
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
        return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    }
    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
        return createBuffer(size);
    }
    if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpreted as a start offset.
        return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
    }
    if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
    }
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual);
    }
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1){
        buf[i] = array[i] & 255;
    }
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
    }
    let buf;
    if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array);
    } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset);
    } else {
        buf = new Uint8Array(array, byteOffset, length);
    }
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
            return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
            return createBuffer(0);
        }
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
    }
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
    }
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) {
        length = 0;
    }
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i){
        if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
        }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
        return Buffer.alloc(0);
    }
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i){
            length += list[i].length;
        }
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else {
                Uint8Array.prototype.set.call(buffer, buf, pos);
            }
        } else if (!Buffer.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
            buf.copy(buffer, pos);
        }
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) {
        return string.length;
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
    }
    if (typeof string !== 'string') {
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
    }
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;){
        switch(encoding){
            case 'ascii':
            case 'latin1':
            case 'binary':
                return len;
            case 'utf8':
            case 'utf-8':
                return utf8ToBytes(string).length;
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return len * 2;
            case 'hex':
                return len >>> 1;
            case 'base64':
                return base64ToBytes(string).length;
            default:
                if (loweredCase) {
                    return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
                    ;
                }
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
        }
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
        start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
        return '';
    }
    if (end === undefined || end > this.length) {
        end = this.length;
    }
    if (end <= 0) {
        return '';
    }
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
        return '';
    }
    if (!encoding) encoding = 'utf8';
    while(true){
        switch(encoding){
            case 'hex':
                return hexSlice(this, start, end);
            case 'utf8':
            case 'utf-8':
                return utf8Slice(this, start, end);
            case 'ascii':
                return asciiSlice(this, start, end);
            case 'latin1':
            case 'binary':
                return latin1Slice(this, start, end);
            case 'base64':
                return base64Slice(this, start, end);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return utf16leSlice(this, start, end);
            default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = (encoding + '').toLowerCase();
                loweredCase = true;
        }
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits');
    }
    for(let i = 0; i < len; i += 2){
        swap(this, i, i + 1);
    }
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits');
    }
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits');
    }
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = '';
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) {
    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
}
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength);
    }
    if (!Buffer.isBuffer(target)) {
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
    }
    if (start === undefined) {
        start = 0;
    }
    if (end === undefined) {
        end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
        thisStart = 0;
    }
    if (thisEnd === undefined) {
        thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index');
    }
    if (thisStart >= thisEnd && start >= end) {
        return 0;
    }
    if (thisStart >= thisEnd) {
        return -1;
    }
    if (start >= end) {
        return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i){
        if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
        }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : buffer.length - 1;
    }
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
    }
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
            return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) {
                return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) {
            return buf[i];
        } else {
            return buf.readUInt16BE(i * indexSize);
        }
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++){
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
            }
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++){
                if (read(arr, i + j) !== read(val, j)) {
                    found = false;
                    break;
                }
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) {
        length = remaining;
    } else {
        length = Number(length);
        if (length > remaining) {
            length = remaining;
        }
    }
    const strLen = string.length;
    if (length > strLen / 2) {
        length = strLen / 2;
    }
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else {
        throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds');
    }
    if (!encoding) encoding = 'utf8';
    let loweredCase = false;
    for(;;){
        switch(encoding){
            case 'hex':
                return hexWrite(this, string, offset, length);
            case 'utf8':
            case 'utf-8':
                return utf8Write(this, string, offset, length);
            case 'ascii':
            case 'latin1':
            case 'binary':
                return asciiWrite(this, string, offset, length);
            case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return ucs2Write(this, string, offset, length);
            default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
        }
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
    } else {
        return base64.fromByteArray(buf.slice(start, end));
    }
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) {
                        codePoint = firstByte;
                    }
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                            codePoint = tempCodePoint;
                        }
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
        ;
    }
    // Decode in chunks to avoid "call stack size exceeded".
    let res = '';
    let i = 0;
    while(i < len){
        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i){
        ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i){
        ret += String.fromCharCode(buf[i]);
    }
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = '';
    for(let i = start; i < end; ++i){
        out += hexSliceLookupTable[buf[i]];
    }
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2){
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) {
        start = len;
    }
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) {
        end = len;
    }
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100)){
        val += this[offset + i] * mul;
    }
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
    }
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100)){
        val += this[offset + --byteLength] * mul;
    }
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
    }
    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
    }
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100)){
        val += this[offset + i] * mul;
    }
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100)){
        val += this[offset + --i] * mul;
    }
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
    }
    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24) // Overflow
    ;
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
    }
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        this[offset + i] = value / mul & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        this[offset + i] = value / mul & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds');
    }
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
    }
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end);
    } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
            throw new TypeError('encoding must be a string');
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding);
        }
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
                // Fast path: If `val` fits into a single byte, use that numeric value.
                val = code;
            }
        }
    } else if (typeof val === 'number') {
        val = val & 255;
    } else if (typeof val === 'boolean') {
        val = Number(val);
    }
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index');
    }
    if (end <= start) {
        return this;
    }
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === 'number') {
        for(i = start; i < end; ++i){
            this[i] = val;
        }
    } else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for(i = 0; i < end - start; ++i){
            this[i + start] = bytes[i % len];
        }
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, 'message', {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, 'code', {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E('ERR_BUFFER_OUT_OF_BOUNDS', function(name) {
    if (name) {
        return `${name} is outside of buffer bounds`;
    }
    return 'Attempt to access memory outside buffer bounds';
}, RangeError);
E('ERR_INVALID_ARG_TYPE', function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E('ERR_OUT_OF_RANGE', function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
        received = addNumericalSeparator(String(input));
    } else if (typeof input === 'bigint') {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
        }
        received += 'n';
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = '';
    let i = val.length;
    const start = val[0] === '-' ? 1 : 0;
    for(; i >= start + 4; i -= 3){
        res = `_${val.slice(i - 3, i)}${res}`;
    }
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, 'offset');
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
        boundsError(offset, buf.length - (byteLength + 1));
    }
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === 'bigint' ? 'n' : '';
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) {
                range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            } else {
                range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
            }
        } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE('value', range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== 'number') {
        throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
    }
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
    }
    if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    }
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0){
        str = str + '=';
    }
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
            // valid bmp char, but last char was a lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else {
            throw new Error('Invalid code point');
        }
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = '0123456789abcdef';
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j){
            table[i16 + j] = alphabet[i] + alphabet[j];
        }
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error('BigInt not supported');
}
}}),
"[project]/node_modules/borc/node_modules/buffer/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
var base64 = __turbopack_context__.r("[project]/node_modules/base64-js/index.js [app-client] (ecmascript)");
var ieee754 = __turbopack_context__.r("[project]/node_modules/ieee754/index.js [app-client] (ecmascript)");
var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
}
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
            throw new TypeError('The "string" argument must be of type string. Received type number');
        }
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') {
        return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
    }
    if (value == null) {
        throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
    }
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === 'number') {
        throw new TypeError('The "value" argument must not be of type number. Received type number');
    }
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length);
    }
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
        return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    }
    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
        return createBuffer(size);
    }
    if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpreted as a start offset.
        return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
    }
    if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
    }
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual);
    }
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1){
        buf[i] = array[i] & 255;
    }
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
    }
    var buf;
    if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array);
    } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset);
    } else {
        buf = new Uint8Array(array, byteOffset, length);
    }
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) {
            return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
            return createBuffer(0);
        }
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
    }
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
    }
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) {
        length = 0;
    }
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i){
        if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
        }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
        return Buffer.alloc(0);
    }
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i){
            length += list[i].length;
        }
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                Buffer.from(buf).copy(buffer, pos);
            } else {
                Uint8Array.prototype.set.call(buffer, buf, pos);
            }
        } else if (!Buffer.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
            buf.copy(buffer, pos);
        }
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) {
        return string.length;
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
    }
    if (typeof string !== 'string') {
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
    }
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;){
        switch(encoding){
            case 'ascii':
            case 'latin1':
            case 'binary':
                return len;
            case 'utf8':
            case 'utf-8':
                return utf8ToBytes(string).length;
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return len * 2;
            case 'hex':
                return len >>> 1;
            case 'base64':
                return base64ToBytes(string).length;
            default:
                if (loweredCase) {
                    return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
                    ;
                }
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
        }
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
        start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
        return '';
    }
    if (end === undefined || end > this.length) {
        end = this.length;
    }
    if (end <= 0) {
        return '';
    }
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
        return '';
    }
    if (!encoding) encoding = 'utf8';
    while(true){
        switch(encoding){
            case 'hex':
                return hexSlice(this, start, end);
            case 'utf8':
            case 'utf-8':
                return utf8Slice(this, start, end);
            case 'ascii':
                return asciiSlice(this, start, end);
            case 'latin1':
            case 'binary':
                return latin1Slice(this, start, end);
            case 'base64':
                return base64Slice(this, start, end);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return utf16leSlice(this, start, end);
            default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = (encoding + '').toLowerCase();
                loweredCase = true;
        }
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits');
    }
    for(var i = 0; i < len; i += 2){
        swap(this, i, i + 1);
    }
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits');
    }
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits');
    }
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) {
    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
}
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength);
    }
    if (!Buffer.isBuffer(target)) {
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
    }
    if (start === undefined) {
        start = 0;
    }
    if (end === undefined) {
        end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
        thisStart = 0;
    }
    if (thisEnd === undefined) {
        thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index');
    }
    if (thisStart >= thisEnd && start >= end) {
        return 0;
    }
    if (thisStart >= thisEnd) {
        return -1;
    }
    if (start >= end) {
        return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i){
        if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
        }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : buffer.length - 1;
    }
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
    }
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
            return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) {
                return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) {
            return buf[i];
        } else {
            return buf.readUInt16BE(i * indexSize);
        }
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++){
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
            }
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++){
                if (read(arr, i + j) !== read(val, j)) {
                    found = false;
                    break;
                }
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
        length = remaining;
    } else {
        length = Number(length);
        if (length > remaining) {
            length = remaining;
        }
    }
    var strLen = string.length;
    if (length > strLen / 2) {
        length = strLen / 2;
    }
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else {
        throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds');
    }
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;){
        switch(encoding){
            case 'hex':
                return hexWrite(this, string, offset, length);
            case 'utf8':
            case 'utf-8':
                return utf8Write(this, string, offset, length);
            case 'ascii':
            case 'latin1':
            case 'binary':
                return asciiWrite(this, string, offset, length);
            case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return ucs2Write(this, string, offset, length);
            default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
        }
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
    } else {
        return base64.fromByteArray(buf.slice(start, end));
    }
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) {
                        codePoint = firstByte;
                    }
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                            codePoint = tempCodePoint;
                        }
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
        ;
    }
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len){
        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i){
        ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i){
        ret += String.fromCharCode(buf[i]);
    }
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i){
        out += hexSliceLookupTable[buf[i]];
    }
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2){
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) {
        start = len;
    }
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) {
        end = len;
    }
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100)){
        val += this[offset + i] * mul;
    }
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
    }
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100)){
        val += this[offset + --byteLength] * mul;
    }
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100)){
        val += this[offset + i] * mul;
    }
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100)){
        val += this[offset + --i] * mul;
    }
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        this[offset + i] = value / mul & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        this[offset + i] = value / mul & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds');
    }
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
    }
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end);
    } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
            throw new TypeError('encoding must be a string');
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding);
        }
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
                // Fast path: If `val` fits into a single byte, use that numeric value.
                val = code;
            }
        }
    } else if (typeof val === 'number') {
        val = val & 255;
    } else if (typeof val === 'boolean') {
        val = Number(val);
    }
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index');
    }
    if (end <= start) {
        return this;
    }
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') {
        for(i = start; i < end; ++i){
            this[i] = val;
        }
    } else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for(i = 0; i < end - start; ++i){
            this[i + start] = bytes[i % len];
        }
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0){
        str = str + '=';
    }
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
            // valid bmp char, but last char was a lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else {
            throw new Error('Invalid code point');
        }
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j){
            table[i16 + j] = alphabet[i] + alphabet[j];
        }
    }
    return table;
}();
}}),
"[project]/node_modules/@dfinity/principal/lib/esm/utils/base32.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "decode": (()=>decode),
    "encode": (()=>encode)
});
const alphabet = 'abcdefghijklmnopqrstuvwxyz234567';
// Build a lookup table for decoding.
const lookupTable = Object.create(null);
for(let i = 0; i < alphabet.length; i++){
    lookupTable[alphabet[i]] = i;
}
// Add aliases for rfc4648.
lookupTable['0'] = lookupTable.o;
lookupTable['1'] = lookupTable.i;
function encode(input) {
    // How many bits will we skip from the first byte.
    let skip = 0;
    // 5 high bits, carry from one byte to the next.
    let bits = 0;
    // The output string in base32.
    let output = '';
    function encodeByte(byte) {
        if (skip < 0) {
            // we have a carry from the previous byte
            bits |= byte >> -skip;
        } else {
            // no carry
            bits = byte << skip & 248;
        }
        if (skip > 3) {
            // Not enough data to produce a character, get us another one
            skip -= 8;
            return 1;
        }
        if (skip < 4) {
            // produce a character
            output += alphabet[bits >> 3];
            skip += 5;
        }
        return 0;
    }
    for(let i = 0; i < input.length;){
        i += encodeByte(input[i]);
    }
    return output + (skip < 0 ? alphabet[bits >> 3] : '');
}
function decode(input) {
    // how many bits we have from the previous character.
    let skip = 0;
    // current byte we're producing.
    let byte = 0;
    const output = new Uint8Array(input.length * 4 / 3 | 0);
    let o = 0;
    function decodeChar(char) {
        // Consume a character from the stream, store
        // the output in this.output. As before, better
        // to use update().
        let val = lookupTable[char.toLowerCase()];
        if (val === undefined) {
            throw new Error(`Invalid character: ${JSON.stringify(char)}`);
        }
        // move to the high bits
        val <<= 3;
        byte |= val >>> skip;
        skip += 5;
        if (skip >= 8) {
            // We have enough bytes to produce an output
            output[o++] = byte;
            skip -= 8;
            if (skip > 0) {
                byte = val << 5 - skip & 255;
            } else {
                byte = 0;
            }
        }
    }
    for (const c of input){
        decodeChar(c);
    }
    return output.slice(0, o);
} //# sourceMappingURL=base32.js.map
}}),
"[project]/node_modules/@dfinity/principal/lib/esm/utils/getCrc.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// This file is translated to JavaScript from
// https://lxp32.github.io/docs/a-simple-example-crc32-calculation/
__turbopack_context__.s({
    "getCrc32": (()=>getCrc32)
});
const lookUpTable = new Uint32Array([
    0x00000000,
    0x77073096,
    0xee0e612c,
    0x990951ba,
    0x076dc419,
    0x706af48f,
    0xe963a535,
    0x9e6495a3,
    0x0edb8832,
    0x79dcb8a4,
    0xe0d5e91e,
    0x97d2d988,
    0x09b64c2b,
    0x7eb17cbd,
    0xe7b82d07,
    0x90bf1d91,
    0x1db71064,
    0x6ab020f2,
    0xf3b97148,
    0x84be41de,
    0x1adad47d,
    0x6ddde4eb,
    0xf4d4b551,
    0x83d385c7,
    0x136c9856,
    0x646ba8c0,
    0xfd62f97a,
    0x8a65c9ec,
    0x14015c4f,
    0x63066cd9,
    0xfa0f3d63,
    0x8d080df5,
    0x3b6e20c8,
    0x4c69105e,
    0xd56041e4,
    0xa2677172,
    0x3c03e4d1,
    0x4b04d447,
    0xd20d85fd,
    0xa50ab56b,
    0x35b5a8fa,
    0x42b2986c,
    0xdbbbc9d6,
    0xacbcf940,
    0x32d86ce3,
    0x45df5c75,
    0xdcd60dcf,
    0xabd13d59,
    0x26d930ac,
    0x51de003a,
    0xc8d75180,
    0xbfd06116,
    0x21b4f4b5,
    0x56b3c423,
    0xcfba9599,
    0xb8bda50f,
    0x2802b89e,
    0x5f058808,
    0xc60cd9b2,
    0xb10be924,
    0x2f6f7c87,
    0x58684c11,
    0xc1611dab,
    0xb6662d3d,
    0x76dc4190,
    0x01db7106,
    0x98d220bc,
    0xefd5102a,
    0x71b18589,
    0x06b6b51f,
    0x9fbfe4a5,
    0xe8b8d433,
    0x7807c9a2,
    0x0f00f934,
    0x9609a88e,
    0xe10e9818,
    0x7f6a0dbb,
    0x086d3d2d,
    0x91646c97,
    0xe6635c01,
    0x6b6b51f4,
    0x1c6c6162,
    0x856530d8,
    0xf262004e,
    0x6c0695ed,
    0x1b01a57b,
    0x8208f4c1,
    0xf50fc457,
    0x65b0d9c6,
    0x12b7e950,
    0x8bbeb8ea,
    0xfcb9887c,
    0x62dd1ddf,
    0x15da2d49,
    0x8cd37cf3,
    0xfbd44c65,
    0x4db26158,
    0x3ab551ce,
    0xa3bc0074,
    0xd4bb30e2,
    0x4adfa541,
    0x3dd895d7,
    0xa4d1c46d,
    0xd3d6f4fb,
    0x4369e96a,
    0x346ed9fc,
    0xad678846,
    0xda60b8d0,
    0x44042d73,
    0x33031de5,
    0xaa0a4c5f,
    0xdd0d7cc9,
    0x5005713c,
    0x270241aa,
    0xbe0b1010,
    0xc90c2086,
    0x5768b525,
    0x206f85b3,
    0xb966d409,
    0xce61e49f,
    0x5edef90e,
    0x29d9c998,
    0xb0d09822,
    0xc7d7a8b4,
    0x59b33d17,
    0x2eb40d81,
    0xb7bd5c3b,
    0xc0ba6cad,
    0xedb88320,
    0x9abfb3b6,
    0x03b6e20c,
    0x74b1d29a,
    0xead54739,
    0x9dd277af,
    0x04db2615,
    0x73dc1683,
    0xe3630b12,
    0x94643b84,
    0x0d6d6a3e,
    0x7a6a5aa8,
    0xe40ecf0b,
    0x9309ff9d,
    0x0a00ae27,
    0x7d079eb1,
    0xf00f9344,
    0x8708a3d2,
    0x1e01f268,
    0x6906c2fe,
    0xf762575d,
    0x806567cb,
    0x196c3671,
    0x6e6b06e7,
    0xfed41b76,
    0x89d32be0,
    0x10da7a5a,
    0x67dd4acc,
    0xf9b9df6f,
    0x8ebeeff9,
    0x17b7be43,
    0x60b08ed5,
    0xd6d6a3e8,
    0xa1d1937e,
    0x38d8c2c4,
    0x4fdff252,
    0xd1bb67f1,
    0xa6bc5767,
    0x3fb506dd,
    0x48b2364b,
    0xd80d2bda,
    0xaf0a1b4c,
    0x36034af6,
    0x41047a60,
    0xdf60efc3,
    0xa867df55,
    0x316e8eef,
    0x4669be79,
    0xcb61b38c,
    0xbc66831a,
    0x256fd2a0,
    0x5268e236,
    0xcc0c7795,
    0xbb0b4703,
    0x220216b9,
    0x5505262f,
    0xc5ba3bbe,
    0xb2bd0b28,
    0x2bb45a92,
    0x5cb36a04,
    0xc2d7ffa7,
    0xb5d0cf31,
    0x2cd99e8b,
    0x5bdeae1d,
    0x9b64c2b0,
    0xec63f226,
    0x756aa39c,
    0x026d930a,
    0x9c0906a9,
    0xeb0e363f,
    0x72076785,
    0x05005713,
    0x95bf4a82,
    0xe2b87a14,
    0x7bb12bae,
    0x0cb61b38,
    0x92d28e9b,
    0xe5d5be0d,
    0x7cdcefb7,
    0x0bdbdf21,
    0x86d3d2d4,
    0xf1d4e242,
    0x68ddb3f8,
    0x1fda836e,
    0x81be16cd,
    0xf6b9265b,
    0x6fb077e1,
    0x18b74777,
    0x88085ae6,
    0xff0f6a70,
    0x66063bca,
    0x11010b5c,
    0x8f659eff,
    0xf862ae69,
    0x616bffd3,
    0x166ccf45,
    0xa00ae278,
    0xd70dd2ee,
    0x4e048354,
    0x3903b3c2,
    0xa7672661,
    0xd06016f7,
    0x4969474d,
    0x3e6e77db,
    0xaed16a4a,
    0xd9d65adc,
    0x40df0b66,
    0x37d83bf0,
    0xa9bcae53,
    0xdebb9ec5,
    0x47b2cf7f,
    0x30b5ffe9,
    0xbdbdf21c,
    0xcabac28a,
    0x53b39330,
    0x24b4a3a6,
    0xbad03605,
    0xcdd70693,
    0x54de5729,
    0x23d967bf,
    0xb3667a2e,
    0xc4614ab8,
    0x5d681b02,
    0x2a6f2b94,
    0xb40bbe37,
    0xc30c8ea1,
    0x5a05df1b,
    0x2d02ef8d
]);
function getCrc32(buf) {
    const b = new Uint8Array(buf);
    let crc = -1;
    for(let i = 0; i < b.length; i++){
        const byte = b[i];
        const t = (byte ^ crc) & 0xff;
        crc = lookUpTable[t] ^ crc >>> 8;
    }
    return (crc ^ -1) >>> 0;
} //# sourceMappingURL=getCrc.js.map
}}),
"[project]/node_modules/@dfinity/principal/lib/esm/utils/sha224.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sha224": (()=>sha224)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@noble/hashes/esm/sha256.js [app-client] (ecmascript)");
;
function sha224(data) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sha224"].create().update(new Uint8Array(data)).digest();
} //# sourceMappingURL=sha224.js.map
}}),
"[project]/node_modules/@dfinity/principal/lib/esm/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "JSON_KEY_PRINCIPAL": (()=>JSON_KEY_PRINCIPAL),
    "Principal": (()=>Principal)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$utils$2f$base32$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/principal/lib/esm/utils/base32.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$utils$2f$getCrc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/principal/lib/esm/utils/getCrc.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$utils$2f$sha224$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/principal/lib/esm/utils/sha224.js [app-client] (ecmascript)");
;
;
;
const JSON_KEY_PRINCIPAL = '__principal__';
const SELF_AUTHENTICATING_SUFFIX = 2;
const ANONYMOUS_SUFFIX = 4;
const MANAGEMENT_CANISTER_PRINCIPAL_TEXT_STR = 'aaaaa-aa';
const fromHexString = (hexString)=>{
    var _a;
    return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map((byte)=>parseInt(byte, 16)));
};
const toHexString = (bytes)=>bytes.reduce((str, byte)=>str + byte.toString(16).padStart(2, '0'), '');
class Principal {
    constructor(_arr){
        this._arr = _arr;
        this._isPrincipal = true;
    }
    static anonymous() {
        return new this(new Uint8Array([
            ANONYMOUS_SUFFIX
        ]));
    }
    /**
     * Utility method, returning the principal representing the management canister, decoded from the hex string `'aaaaa-aa'`
     * @returns {Principal} principal of the management canister
     */ static managementCanister() {
        return this.fromText(MANAGEMENT_CANISTER_PRINCIPAL_TEXT_STR);
    }
    static selfAuthenticating(publicKey) {
        const sha = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$utils$2f$sha224$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sha224"])(publicKey);
        return new this(new Uint8Array([
            ...sha,
            SELF_AUTHENTICATING_SUFFIX
        ]));
    }
    static from(other) {
        if (typeof other === 'string') {
            return Principal.fromText(other);
        } else if (Object.getPrototypeOf(other) === Uint8Array.prototype) {
            return new Principal(other);
        } else if (typeof other === 'object' && other !== null && other._isPrincipal === true) {
            return new Principal(other._arr);
        }
        throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);
    }
    static fromHex(hex) {
        return new this(fromHexString(hex));
    }
    static fromText(text) {
        let maybePrincipal = text;
        // If formatted as JSON string, parse it first
        if (text.includes(JSON_KEY_PRINCIPAL)) {
            const obj = JSON.parse(text);
            if (JSON_KEY_PRINCIPAL in obj) {
                maybePrincipal = obj[JSON_KEY_PRINCIPAL];
            }
        }
        const canisterIdNoDash = maybePrincipal.toLowerCase().replace(/-/g, '');
        let arr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$utils$2f$base32$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decode"])(canisterIdNoDash);
        arr = arr.slice(4, arr.length);
        const principal = new this(arr);
        if (principal.toText() !== maybePrincipal) {
            throw new Error(`Principal "${principal.toText()}" does not have a valid checksum (original value "${maybePrincipal}" may not be a valid Principal ID).`);
        }
        return principal;
    }
    static fromUint8Array(arr) {
        return new this(arr);
    }
    isAnonymous() {
        return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;
    }
    toUint8Array() {
        return this._arr;
    }
    toHex() {
        return toHexString(this._arr).toUpperCase();
    }
    toText() {
        const checksumArrayBuf = new ArrayBuffer(4);
        const view = new DataView(checksumArrayBuf);
        view.setUint32(0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$utils$2f$getCrc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getCrc32"])(this._arr));
        const checksum = new Uint8Array(checksumArrayBuf);
        const bytes = Uint8Array.from(this._arr);
        const array = new Uint8Array([
            ...checksum,
            ...bytes
        ]);
        const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$utils$2f$base32$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["encode"])(array);
        const matches = result.match(/.{1,5}/g);
        if (!matches) {
            // This should only happen if there's no character, which is unreachable.
            throw new Error();
        }
        return matches.join('-');
    }
    toString() {
        return this.toText();
    }
    /**
     * Serializes to JSON
     * @returns {JsonnablePrincipal} a JSON object with a single key, {@link JSON_KEY_PRINCIPAL}, whose value is the principal as a string
     */ toJSON() {
        return {
            [JSON_KEY_PRINCIPAL]: this.toText()
        };
    }
    /**
     * Utility method taking a Principal to compare against. Used for determining canister ranges in certificate verification
     * @param {Principal} other - a {@link Principal} to compare
     * @returns {'lt' | 'eq' | 'gt'} `'lt' | 'eq' | 'gt'` a string, representing less than, equal to, or greater than
     */ compareTo(other) {
        for(let i = 0; i < Math.min(this._arr.length, other._arr.length); i++){
            if (this._arr[i] < other._arr[i]) return 'lt';
            else if (this._arr[i] > other._arr[i]) return 'gt';
        }
        // Here, at least one principal is a prefix of the other principal (they could be the same)
        if (this._arr.length < other._arr.length) return 'lt';
        if (this._arr.length > other._arr.length) return 'gt';
        return 'eq';
    }
    /**
     * Utility method checking whether a provided Principal is less than or equal to the current one using the {@link Principal.compareTo} method
     * @param other a {@link Principal} to compare
     * @returns {boolean} boolean
     */ ltEq(other) {
        const cmp = this.compareTo(other);
        return cmp == 'lt' || cmp == 'eq';
    }
    /**
     * Utility method checking whether a provided Principal is greater than or equal to the current one using the {@link Principal.compareTo} method
     * @param other a {@link Principal} to compare
     * @returns {boolean} boolean
     */ gtEq(other) {
        const cmp = this.compareTo(other);
        return cmp == 'gt' || cmp == 'eq';
    }
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@noble/hashes/esm/crypto.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "crypto": (()=>crypto)
});
const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined; //# sourceMappingURL=crypto.js.map
}}),
"[project]/node_modules/@noble/hashes/esm/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Utilities for hex, bytes, CSPRNG.
 * @module
 */ /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
// node.js versions earlier than v19 don't declare it in global scope.
// For node.js, package.json#exports field mapping rewrites import
// from `crypto` to `cryptoNode`, which imports native module.
// Makes the utils un-importable in browsers without a bundler.
// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.
__turbopack_context__.s({
    "Hash": (()=>Hash),
    "abytes": (()=>abytes),
    "aexists": (()=>aexists),
    "ahash": (()=>ahash),
    "anumber": (()=>anumber),
    "aoutput": (()=>aoutput),
    "asyncLoop": (()=>asyncLoop),
    "byteSwap": (()=>byteSwap),
    "byteSwap32": (()=>byteSwap32),
    "byteSwapIfBE": (()=>byteSwapIfBE),
    "bytesToHex": (()=>bytesToHex),
    "bytesToUtf8": (()=>bytesToUtf8),
    "checkOpts": (()=>checkOpts),
    "clean": (()=>clean),
    "concatBytes": (()=>concatBytes),
    "createHasher": (()=>createHasher),
    "createOptHasher": (()=>createOptHasher),
    "createView": (()=>createView),
    "createXOFer": (()=>createXOFer),
    "hexToBytes": (()=>hexToBytes),
    "isBytes": (()=>isBytes),
    "isLE": (()=>isLE),
    "kdfInputToBytes": (()=>kdfInputToBytes),
    "nextTick": (()=>nextTick),
    "randomBytes": (()=>randomBytes),
    "rotl": (()=>rotl),
    "rotr": (()=>rotr),
    "swap32IfBE": (()=>swap32IfBE),
    "swap8IfBE": (()=>swap8IfBE),
    "toBytes": (()=>toBytes),
    "u32": (()=>u32),
    "u8": (()=>u8),
    "utf8ToBytes": (()=>utf8ToBytes),
    "wrapConstructor": (()=>wrapConstructor),
    "wrapConstructorWithOpts": (()=>wrapConstructorWithOpts),
    "wrapXOFConstructorWithOpts": (()=>wrapXOFConstructorWithOpts)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$crypto$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@noble/hashes/esm/crypto.js [app-client] (ecmascript)");
;
function isBytes(a) {
    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array';
}
function anumber(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);
}
function abytes(b, ...lengths) {
    if (!isBytes(b)) throw new Error('Uint8Array expected');
    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);
}
function ahash(h) {
    if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.createHasher');
    anumber(h.outputLen);
    anumber(h.blockLen);
}
function aexists(instance, checkFinished = true) {
    if (instance.destroyed) throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');
}
function aoutput(out, instance) {
    abytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error('digestInto() expects output buffer of length at least ' + min);
    }
}
function u8(arr) {
    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
}
function u32(arr) {
    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function clean(...arrays) {
    for(let i = 0; i < arrays.length; i++){
        arrays[i].fill(0);
    }
}
function createView(arr) {
    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr(word, shift) {
    return word << 32 - shift | word >>> shift;
}
function rotl(word, shift) {
    return word << shift | word >>> 32 - shift >>> 0;
}
const isLE = /* @__PURE__ */ (()=>new Uint8Array(new Uint32Array([
        0x11223344
    ]).buffer)[0] === 0x44)();
function byteSwap(word) {
    return word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;
}
const swap8IfBE = isLE ? (n)=>n : (n)=>byteSwap(n);
const byteSwapIfBE = swap8IfBE;
function byteSwap32(arr) {
    for(let i = 0; i < arr.length; i++){
        arr[i] = byteSwap(arr[i]);
    }
    return arr;
}
const swap32IfBE = isLE ? (u)=>u : byteSwap32;
// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex
const hasHexBuiltin = /* @__PURE__ */ (()=>// @ts-ignore
    typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({
    length: 256
}, (_, i)=>i.toString(16).padStart(2, '0'));
function bytesToHex(bytes) {
    abytes(bytes);
    // @ts-ignore
    if (hasHexBuiltin) return bytes.toHex();
    // pre-caching improves the speed 6x
    let hex = '';
    for(let i = 0; i < bytes.length; i++){
        hex += hexes[bytes[i]];
    }
    return hex;
}
// We use optimized technique to convert hex string to byte array
const asciis = {
    _0: 48,
    _9: 57,
    A: 65,
    F: 70,
    a: 97,
    f: 102
};
function asciiToBase16(ch) {
    if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48
    if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)
    if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)
    return;
}
function hexToBytes(hex) {
    if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);
    // @ts-ignore
    if (hasHexBuiltin) return Uint8Array.fromHex(hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);
    const array = new Uint8Array(al);
    for(let ai = 0, hi = 0; ai < al; ai++, hi += 2){
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163
    }
    return array;
}
const nextTick = async ()=>{};
async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for(let i = 0; i < iters; i++){
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick) continue;
        await nextTick();
        ts += diff;
    }
}
function utf8ToBytes(str) {
    if (typeof str !== 'string') throw new Error('string expected');
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
function bytesToUtf8(bytes) {
    return new TextDecoder().decode(bytes);
}
function toBytes(data) {
    if (typeof data === 'string') data = utf8ToBytes(data);
    abytes(data);
    return data;
}
function kdfInputToBytes(data) {
    if (typeof data === 'string') data = utf8ToBytes(data);
    abytes(data);
    return data;
}
function concatBytes(...arrays) {
    let sum = 0;
    for(let i = 0; i < arrays.length; i++){
        const a = arrays[i];
        abytes(a);
        sum += a.length;
    }
    const res = new Uint8Array(sum);
    for(let i = 0, pad = 0; i < arrays.length; i++){
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
function checkOpts(defaults, opts) {
    if (opts !== undefined && ({}).toString.call(opts) !== '[object Object]') throw new Error('options should be object or undefined');
    const merged = Object.assign(defaults, opts);
    return merged;
}
class Hash {
}
function createHasher(hashCons) {
    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = ()=>hashCons();
    return hashC;
}
function createOptHasher(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
function createXOFer(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
const wrapConstructor = createHasher;
const wrapConstructorWithOpts = createOptHasher;
const wrapXOFConstructorWithOpts = createXOFer;
function randomBytes(bytesLength = 32) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$crypto$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["crypto"] && typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$crypto$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["crypto"].getRandomValues === 'function') {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$crypto$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["crypto"].getRandomValues(new Uint8Array(bytesLength));
    }
    // Legacy Node.js compatibility
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$crypto$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["crypto"] && typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$crypto$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["crypto"].randomBytes === 'function') {
        return Uint8Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$crypto$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["crypto"].randomBytes(bytesLength));
    }
    throw new Error('crypto.getRandomValues must be defined');
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@noble/hashes/esm/_md.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Internal Merkle-Damgard hash utils.
 * @module
 */ __turbopack_context__.s({
    "Chi": (()=>Chi),
    "HashMD": (()=>HashMD),
    "Maj": (()=>Maj),
    "SHA224_IV": (()=>SHA224_IV),
    "SHA256_IV": (()=>SHA256_IV),
    "SHA384_IV": (()=>SHA384_IV),
    "SHA512_IV": (()=>SHA512_IV),
    "setBigUint64": (()=>setBigUint64)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@noble/hashes/esm/utils.js [app-client] (ecmascript)");
;
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number(value >> _32n & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
function Chi(a, b, c) {
    return a & b ^ ~a & c;
}
function Maj(a, b, c) {
    return a & b ^ a & c ^ b & c;
}
class HashMD extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Hash"] {
    constructor(blockLen, outputLen, padOffset, isLE){
        super();
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createView"])(this.buffer);
    }
    update(data) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aexists"])(this);
        data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toBytes"])(data);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["abytes"])(data);
        const { view, buffer, blockLen } = this;
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createView"])(data);
                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aexists"])(this);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aoutput"])(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clean"])(this.buffer.subarray(pos));
        // we have less than padOffset left in buffer, so we cannot put length in
        // current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for(let i = pos; i < blockLen; i++)buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createView"])(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');
        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.destroyed = destroyed;
        to.finished = finished;
        to.length = length;
        to.pos = pos;
        if (length % blockLen) to.buffer.set(buffer);
        return to;
    }
    clone() {
        return this._cloneInto();
    }
}
const SHA256_IV = /* @__PURE__ */ Uint32Array.from([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
]);
const SHA224_IV = /* @__PURE__ */ Uint32Array.from([
    0xc1059ed8,
    0x367cd507,
    0x3070dd17,
    0xf70e5939,
    0xffc00b31,
    0x68581511,
    0x64f98fa7,
    0xbefa4fa4
]);
const SHA384_IV = /* @__PURE__ */ Uint32Array.from([
    0xcbbb9d5d,
    0xc1059ed8,
    0x629a292a,
    0x367cd507,
    0x9159015a,
    0x3070dd17,
    0x152fecd8,
    0xf70e5939,
    0x67332667,
    0xffc00b31,
    0x8eb44a87,
    0x68581511,
    0xdb0c2e0d,
    0x64f98fa7,
    0x47b5481d,
    0xbefa4fa4
]);
const SHA512_IV = /* @__PURE__ */ Uint32Array.from([
    0x6a09e667,
    0xf3bcc908,
    0xbb67ae85,
    0x84caa73b,
    0x3c6ef372,
    0xfe94f82b,
    0xa54ff53a,
    0x5f1d36f1,
    0x510e527f,
    0xade682d1,
    0x9b05688c,
    0x2b3e6c1f,
    0x1f83d9ab,
    0xfb41bd6b,
    0x5be0cd19,
    0x137e2179
]); //# sourceMappingURL=_md.js.map
}}),
"[project]/node_modules/@noble/hashes/esm/_u64.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.
 * @todo re-check https://issues.chromium.org/issues/42212588
 * @module
 */ __turbopack_context__.s({
    "add": (()=>add),
    "add3H": (()=>add3H),
    "add3L": (()=>add3L),
    "add4H": (()=>add4H),
    "add4L": (()=>add4L),
    "add5H": (()=>add5H),
    "add5L": (()=>add5L),
    "default": (()=>__TURBOPACK__default__export__),
    "fromBig": (()=>fromBig),
    "rotlBH": (()=>rotlBH),
    "rotlBL": (()=>rotlBL),
    "rotlSH": (()=>rotlSH),
    "rotlSL": (()=>rotlSL),
    "rotr32H": (()=>rotr32H),
    "rotr32L": (()=>rotr32L),
    "rotrBH": (()=>rotrBH),
    "rotrBL": (()=>rotrBL),
    "rotrSH": (()=>rotrSH),
    "rotrSL": (()=>rotrSL),
    "shrSH": (()=>shrSH),
    "shrSL": (()=>shrSL),
    "split": (()=>split),
    "toBig": (()=>toBig)
});
const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n = /* @__PURE__ */ BigInt(32);
function fromBig(n, le = false) {
    if (le) return {
        h: Number(n & U32_MASK64),
        l: Number(n >> _32n & U32_MASK64)
    };
    return {
        h: Number(n >> _32n & U32_MASK64) | 0,
        l: Number(n & U32_MASK64) | 0
    };
}
function split(lst, le = false) {
    const len = lst.length;
    let Ah = new Uint32Array(len);
    let Al = new Uint32Array(len);
    for(let i = 0; i < len; i++){
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [
            h,
            l
        ];
    }
    return [
        Ah,
        Al
    ];
}
const toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
// for Shift in [0, 32)
const shrSH = (h, _l, s)=>h >>> s;
const shrSL = (h, l, s)=>h << 32 - s | l >>> s;
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s)=>h >>> s | l << 32 - s;
const rotrSL = (h, l, s)=>h << 32 - s | l >>> s;
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;
const rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (_h, l)=>l;
const rotr32L = (h, _l)=>h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s)=>h << s | l >>> 32 - s;
const rotlSL = (h, l, s)=>l << s | h >>> 32 - s;
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;
const rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return {
        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
        l: l | 0
    };
}
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
const add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
const add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
;
// prettier-ignore
const u64 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
};
const __TURBOPACK__default__export__ = u64;
 //# sourceMappingURL=_u64.js.map
}}),
"[project]/node_modules/@noble/hashes/esm/sha2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.
 * SHA256 is the fastest hash implementable in JS, even faster than Blake3.
 * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and
 * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).
 * @module
 */ __turbopack_context__.s({
    "SHA224": (()=>SHA224),
    "SHA256": (()=>SHA256),
    "SHA384": (()=>SHA384),
    "SHA512": (()=>SHA512),
    "SHA512_224": (()=>SHA512_224),
    "SHA512_256": (()=>SHA512_256),
    "sha224": (()=>sha224),
    "sha256": (()=>sha256),
    "sha384": (()=>sha384),
    "sha512": (()=>sha512),
    "sha512_224": (()=>sha512_224),
    "sha512_256": (()=>sha512_256)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@noble/hashes/esm/_md.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@noble/hashes/esm/_u64.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@noble/hashes/esm/utils.js [app-client] (ecmascript)");
;
;
;
/**
 * Round constants:
 * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)
 */ // prettier-ignore
const SHA256_K = /* @__PURE__ */ Uint32Array.from([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
/** Reusable temporary buffer. "W" comes straight from spec. */ const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
class SHA256 extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["HashMD"] {
    constructor(outputLen = 32){
        super(64, outputLen, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA256_IV"][0] | 0;
        this.B = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA256_IV"][1] | 0;
        this.C = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA256_IV"][2] | 0;
        this.D = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA256_IV"][3] | 0;
        this.E = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA256_IV"][4] | 0;
        this.F = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA256_IV"][5] | 0;
        this.G = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA256_IV"][6] | 0;
        this.H = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA256_IV"][7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [
            A,
            B,
            C,
            D,
            E,
            F,
            G,
            H
        ];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);
        for(let i = 16; i < 64; i++){
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotr"])(W15, 7) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotr"])(W15, 18) ^ W15 >>> 3;
            const s1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotr"])(W2, 17) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotr"])(W2, 19) ^ W2 >>> 10;
            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for(let i = 0; i < 64; i++){
            const sigma1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotr"])(E, 6) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotr"])(E, 11) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotr"])(E, 25);
            const T1 = H + sigma1 + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Chi"])(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
            const sigma0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotr"])(A, 2) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotr"])(A, 13) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotr"])(A, 22);
            const T2 = sigma0 + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Maj"])(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T1 | 0;
            D = C;
            C = B;
            B = A;
            A = T1 + T2 | 0;
        }
        // Add the compressed chunk to the current hash value
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clean"])(SHA256_W);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clean"])(this.buffer);
    }
}
class SHA224 extends SHA256 {
    constructor(){
        super(28);
        this.A = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA224_IV"][0] | 0;
        this.B = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA224_IV"][1] | 0;
        this.C = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA224_IV"][2] | 0;
        this.D = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA224_IV"][3] | 0;
        this.E = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA224_IV"][4] | 0;
        this.F = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA224_IV"][5] | 0;
        this.G = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA224_IV"][6] | 0;
        this.H = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA224_IV"][7] | 0;
    }
}
// SHA2-512 is slower than sha256 in js because u64 operations are slow.
// Round contants
// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409
// prettier-ignore
const K512 = /* @__PURE__ */ (()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["split"])([
        '0x428a2f98d728ae22',
        '0x7137449123ef65cd',
        '0xb5c0fbcfec4d3b2f',
        '0xe9b5dba58189dbbc',
        '0x3956c25bf348b538',
        '0x59f111f1b605d019',
        '0x923f82a4af194f9b',
        '0xab1c5ed5da6d8118',
        '0xd807aa98a3030242',
        '0x12835b0145706fbe',
        '0x243185be4ee4b28c',
        '0x550c7dc3d5ffb4e2',
        '0x72be5d74f27b896f',
        '0x80deb1fe3b1696b1',
        '0x9bdc06a725c71235',
        '0xc19bf174cf692694',
        '0xe49b69c19ef14ad2',
        '0xefbe4786384f25e3',
        '0x0fc19dc68b8cd5b5',
        '0x240ca1cc77ac9c65',
        '0x2de92c6f592b0275',
        '0x4a7484aa6ea6e483',
        '0x5cb0a9dcbd41fbd4',
        '0x76f988da831153b5',
        '0x983e5152ee66dfab',
        '0xa831c66d2db43210',
        '0xb00327c898fb213f',
        '0xbf597fc7beef0ee4',
        '0xc6e00bf33da88fc2',
        '0xd5a79147930aa725',
        '0x06ca6351e003826f',
        '0x142929670a0e6e70',
        '0x27b70a8546d22ffc',
        '0x2e1b21385c26c926',
        '0x4d2c6dfc5ac42aed',
        '0x53380d139d95b3df',
        '0x650a73548baf63de',
        '0x766a0abb3c77b2a8',
        '0x81c2c92e47edaee6',
        '0x92722c851482353b',
        '0xa2bfe8a14cf10364',
        '0xa81a664bbc423001',
        '0xc24b8b70d0f89791',
        '0xc76c51a30654be30',
        '0xd192e819d6ef5218',
        '0xd69906245565a910',
        '0xf40e35855771202a',
        '0x106aa07032bbd1b8',
        '0x19a4c116b8d2d0c8',
        '0x1e376c085141ab53',
        '0x2748774cdf8eeb99',
        '0x34b0bcb5e19b48a8',
        '0x391c0cb3c5c95a63',
        '0x4ed8aa4ae3418acb',
        '0x5b9cca4f7763e373',
        '0x682e6ff3d6b2b8a3',
        '0x748f82ee5defb2fc',
        '0x78a5636f43172f60',
        '0x84c87814a1f0ab72',
        '0x8cc702081a6439ec',
        '0x90befffa23631e28',
        '0xa4506cebde82bde9',
        '0xbef9a3f7b2c67915',
        '0xc67178f2e372532b',
        '0xca273eceea26619c',
        '0xd186b8c721c0c207',
        '0xeada7dd6cde0eb1e',
        '0xf57d4f7fee6ed178',
        '0x06f067aa72176fba',
        '0x0a637dc5a2c898a6',
        '0x113f9804bef90dae',
        '0x1b710b35131c471b',
        '0x28db77f523047d84',
        '0x32caab7b40c72493',
        '0x3c9ebe0a15c9bebc',
        '0x431d67c49c100d4c',
        '0x4cc5d4becb3e42b6',
        '0x597f299cfc657e2a',
        '0x5fcb6fab3ad6faec',
        '0x6c44198c4a475817'
    ].map((n)=>BigInt(n))))();
const SHA512_Kh = /* @__PURE__ */ (()=>K512[0])();
const SHA512_Kl = /* @__PURE__ */ (()=>K512[1])();
// Reusable temporary buffers
const SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
const SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
class SHA512 extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["HashMD"] {
    constructor(outputLen = 64){
        super(128, outputLen, 16, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][0] | 0;
        this.Al = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][1] | 0;
        this.Bh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][2] | 0;
        this.Bl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][3] | 0;
        this.Ch = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][4] | 0;
        this.Cl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][5] | 0;
        this.Dh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][6] | 0;
        this.Dl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][7] | 0;
        this.Eh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][8] | 0;
        this.El = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][9] | 0;
        this.Fh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][10] | 0;
        this.Fl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][11] | 0;
        this.Gh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][12] | 0;
        this.Gl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][13] | 0;
        this.Hh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][14] | 0;
        this.Hl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA512_IV"][15] | 0;
    }
    // prettier-ignore
    get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [
            Ah,
            Al,
            Bh,
            Bl,
            Ch,
            Cl,
            Dh,
            Dl,
            Eh,
            El,
            Fh,
            Fl,
            Gh,
            Gl,
            Hh,
            Hl
        ];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for(let i = 0; i < 16; i++, offset += 4){
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32(offset += 4);
        }
        for(let i = 16; i < 80; i++){
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSH"])(W15h, W15l, 1) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSH"])(W15h, W15l, 8) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["shrSH"])(W15h, W15l, 7);
            const s0l = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSL"])(W15h, W15l, 1) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSL"])(W15h, W15l, 8) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["shrSL"])(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSH"])(W2h, W2l, 19) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrBH"])(W2h, W2l, 61) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["shrSH"])(W2h, W2l, 6);
            const s1l = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSL"])(W2h, W2l, 19) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrBL"])(W2h, W2l, 61) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["shrSL"])(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            const SUMl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add4L"])(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add4H"])(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        // Compression function main loop, 80 rounds
        for(let i = 0; i < 80; i++){
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            const sigma1h = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSH"])(Eh, El, 14) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSH"])(Eh, El, 18) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrBH"])(Eh, El, 41);
            const sigma1l = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSL"])(Eh, El, 14) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSL"])(Eh, El, 18) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrBL"])(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const CHIh = Eh & Fh ^ ~Eh & Gh;
            const CHIl = El & Fl ^ ~El & Gl;
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            const T1ll = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add5L"])(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add5H"])(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            const sigma0h = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSH"])(Ah, Al, 28) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrBH"])(Ah, Al, 34) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrBH"])(Ah, Al, 39);
            const sigma0l = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrSL"])(Ah, Al, 28) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrBL"])(Ah, Al, 34) ^ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotrBL"])(Ah, Al, 39);
            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add3L"])(T1l, sigma0l, MAJl);
            Ah = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add3H"])(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        ({ h: Ah, l: Al } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_u64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clean"])(SHA512_W_H, SHA512_W_L);
    }
    destroy() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clean"])(this.buffer);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
class SHA384 extends SHA512 {
    constructor(){
        super(48);
        this.Ah = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][0] | 0;
        this.Al = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][1] | 0;
        this.Bh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][2] | 0;
        this.Bl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][3] | 0;
        this.Ch = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][4] | 0;
        this.Cl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][5] | 0;
        this.Dh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][6] | 0;
        this.Dl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][7] | 0;
        this.Eh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][8] | 0;
        this.El = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][9] | 0;
        this.Fh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][10] | 0;
        this.Fl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][11] | 0;
        this.Gh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][12] | 0;
        this.Gl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][13] | 0;
        this.Hh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][14] | 0;
        this.Hl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$_md$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA384_IV"][15] | 0;
    }
}
/**
 * Truncated SHA512/256 and SHA512/224.
 * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as "intermediary" IV of SHA512/t.
 * Then t hashes string to produce result IV.
 * See `test/misc/sha2-gen-iv.js`.
 */ /** SHA512/224 IV */ const T224_IV = /* @__PURE__ */ Uint32Array.from([
    0x8c3d37c8,
    0x19544da2,
    0x73e19966,
    0x89dcd4d6,
    0x1dfab7ae,
    0x32ff9c82,
    0x679dd514,
    0x582f9fcf,
    0x0f6d2b69,
    0x7bd44da8,
    0x77e36f73,
    0x04c48942,
    0x3f9d85a8,
    0x6a1d36c8,
    0x1112e6ad,
    0x91d692a1
]);
/** SHA512/256 IV */ const T256_IV = /* @__PURE__ */ Uint32Array.from([
    0x22312194,
    0xfc2bf72c,
    0x9f555fa3,
    0xc84c64c2,
    0x2393b86b,
    0x6f53b151,
    0x96387719,
    0x5940eabd,
    0x96283ee2,
    0xa88effe3,
    0xbe5e1e25,
    0x53863992,
    0x2b0199fc,
    0x2c85b8aa,
    0x0eb72ddc,
    0x81c52ca2
]);
class SHA512_224 extends SHA512 {
    constructor(){
        super(28);
        this.Ah = T224_IV[0] | 0;
        this.Al = T224_IV[1] | 0;
        this.Bh = T224_IV[2] | 0;
        this.Bl = T224_IV[3] | 0;
        this.Ch = T224_IV[4] | 0;
        this.Cl = T224_IV[5] | 0;
        this.Dh = T224_IV[6] | 0;
        this.Dl = T224_IV[7] | 0;
        this.Eh = T224_IV[8] | 0;
        this.El = T224_IV[9] | 0;
        this.Fh = T224_IV[10] | 0;
        this.Fl = T224_IV[11] | 0;
        this.Gh = T224_IV[12] | 0;
        this.Gl = T224_IV[13] | 0;
        this.Hh = T224_IV[14] | 0;
        this.Hl = T224_IV[15] | 0;
    }
}
class SHA512_256 extends SHA512 {
    constructor(){
        super(32);
        this.Ah = T256_IV[0] | 0;
        this.Al = T256_IV[1] | 0;
        this.Bh = T256_IV[2] | 0;
        this.Bl = T256_IV[3] | 0;
        this.Ch = T256_IV[4] | 0;
        this.Cl = T256_IV[5] | 0;
        this.Dh = T256_IV[6] | 0;
        this.Dl = T256_IV[7] | 0;
        this.Eh = T256_IV[8] | 0;
        this.El = T256_IV[9] | 0;
        this.Fh = T256_IV[10] | 0;
        this.Fl = T256_IV[11] | 0;
        this.Gh = T256_IV[12] | 0;
        this.Gl = T256_IV[13] | 0;
        this.Hh = T256_IV[14] | 0;
        this.Hl = T256_IV[15] | 0;
    }
}
const sha256 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHasher"])(()=>new SHA256());
const sha224 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHasher"])(()=>new SHA224());
const sha512 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHasher"])(()=>new SHA512());
const sha384 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHasher"])(()=>new SHA384());
const sha512_256 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHasher"])(()=>new SHA512_256());
const sha512_224 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHasher"])(()=>new SHA512_224()); //# sourceMappingURL=sha2.js.map
}}),
"[project]/node_modules/@noble/hashes/esm/sha256.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.
 *
 * To break sha256 using birthday attack, attackers need to try 2^128 hashes.
 * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.
 *
 * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).
 * @module
 * @deprecated
 */ __turbopack_context__.s({
    "SHA224": (()=>SHA224),
    "SHA256": (()=>SHA256),
    "sha224": (()=>sha224),
    "sha256": (()=>sha256)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@noble/hashes/esm/sha2.js [app-client] (ecmascript)");
;
const SHA256 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA256"];
const sha256 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sha256"];
const SHA224 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHA224"];
const sha224 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sha224"]; //# sourceMappingURL=sha256.js.map
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/utils/buffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Concatenate multiple array buffers.
 * @param buffers The buffers to concatenate.
 */ __turbopack_context__.s({
    "PipeArrayBuffer": (()=>PipeArrayBuffer),
    "bufFromBufLike": (()=>bufFromBufLike),
    "concat": (()=>concat),
    "fromHexString": (()=>fromHexString),
    "toHexString": (()=>toHexString),
    "uint8ToBuf": (()=>uint8ToBuf)
});
function concat(...buffers) {
    const result = new Uint8Array(buffers.reduce((acc, curr)=>acc + curr.byteLength, 0));
    let index = 0;
    for (const b of buffers){
        result.set(new Uint8Array(b), index);
        index += b.byteLength;
    }
    return result;
}
function toHexString(bytes) {
    return new Uint8Array(bytes).reduce((str, byte)=>str + byte.toString(16).padStart(2, '0'), '');
}
function fromHexString(hexString) {
    var _a;
    return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map((byte)=>parseInt(byte, 16)));
}
class PipeArrayBuffer {
    /**
     * Creates a new instance of a pipe
     * @param buffer an optional buffer to start with
     * @param length an optional amount of bytes to use for the length.
     */ constructor(buffer, length = (buffer === null || buffer === void 0 ? void 0 : buffer.byteLength) || 0){
        this._buffer = bufFromBufLike(buffer || new ArrayBuffer(0));
        this._view = new Uint8Array(this._buffer, 0, length);
    }
    /**
     * Save a checkpoint of the reading view (for backtracking)
     */ save() {
        return this._view;
    }
    /**
     * Restore a checkpoint of the reading view (for backtracking)
     * @param checkPoint a previously saved checkpoint
     */ restore(checkPoint) {
        this._view = checkPoint;
    }
    get buffer() {
        // Return a copy of the buffer.
        return bufFromBufLike(this._view.slice());
    }
    get byteLength() {
        return this._view.byteLength;
    }
    /**
     * Read `num` number of bytes from the front of the pipe.
     * @param num The number of bytes to read.
     */ read(num) {
        const result = this._view.subarray(0, num);
        this._view = this._view.subarray(num);
        return result.slice().buffer;
    }
    readUint8() {
        const result = this._view[0];
        this._view = this._view.subarray(1);
        return result;
    }
    /**
     * Write a buffer to the end of the pipe.
     * @param buf The bytes to write.
     */ write(buf) {
        const b = new Uint8Array(buf);
        const offset = this._view.byteLength;
        if (this._view.byteOffset + this._view.byteLength + b.byteLength >= this._buffer.byteLength) {
            // Alloc grow the view to include the new bytes.
            this.alloc(b.byteLength);
        } else {
            // Update the view to include the new bytes.
            this._view = new Uint8Array(this._buffer, this._view.byteOffset, this._view.byteLength + b.byteLength);
        }
        this._view.set(b, offset);
    }
    /**
     * Whether or not there is more data to read from the buffer
     */ get end() {
        return this._view.byteLength === 0;
    }
    /**
     * Allocate a fixed amount of memory in the buffer. This does not affect the view.
     * @param amount A number of bytes to add to the buffer.
     */ alloc(amount) {
        // Add a little bit of exponential growth.
        const b = new ArrayBuffer((this._buffer.byteLength + amount) * 1.2 | 0);
        const v = new Uint8Array(b, 0, this._view.byteLength + amount);
        v.set(this._view);
        this._buffer = b;
        this._view = v;
    }
}
function uint8ToBuf(arr) {
    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength).buffer;
}
function bufFromBufLike(bufLike) {
    if (bufLike instanceof Uint8Array) {
        return uint8ToBuf(bufLike);
    }
    if (bufLike instanceof ArrayBuffer) {
        return bufLike;
    }
    if (Array.isArray(bufLike)) {
        return uint8ToBuf(new Uint8Array(bufLike));
    }
    if ('buffer' in bufLike) {
        return bufFromBufLike(bufLike.buffer);
    }
    return uint8ToBuf(new Uint8Array(bufLike));
} //# sourceMappingURL=buffer.js.map
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/utils/hash.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Hashes a string to a number. Algorithm can be found here:
 * https://caml.inria.fr/pub/papers/garrigue-polymorphic_variants-ml98.pdf
 * @param s - string to hash
 * @returns number representing hashed string
 */ __turbopack_context__.s({
    "idlLabelToId": (()=>idlLabelToId)
});
function idlHash(s) {
    const utf8encoder = new TextEncoder();
    const array = utf8encoder.encode(s);
    let h = 0;
    for (const c of array){
        h = (h * 223 + c) % 2 ** 32;
    }
    return h;
}
function idlLabelToId(label) {
    if (/^_\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {
        const num = +label.slice(1, -1);
        if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {
            return num;
        }
    }
    return idlHash(label);
} //# sourceMappingURL=hash.js.map
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/utils/leb128.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable no-constant-condition */ // Note: this file uses buffer-pipe, which on Node only, uses the Node Buffer
//       implementation, which isn't compatible with the NPM buffer package
//       which we use everywhere else. This means that we have to transform
//       one into the other, hence why every function that returns a Buffer
//       actually return `new Buffer(pipe.buffer)`.
// TODO: The best solution would be to have our own buffer type around
//       Uint8Array which is standard.
__turbopack_context__.s({
    "lebDecode": (()=>lebDecode),
    "lebEncode": (()=>lebEncode),
    "readIntLE": (()=>readIntLE),
    "readUIntLE": (()=>readUIntLE),
    "safeRead": (()=>safeRead),
    "safeReadUint8": (()=>safeReadUint8),
    "slebDecode": (()=>slebDecode),
    "slebEncode": (()=>slebEncode),
    "writeIntLE": (()=>writeIntLE),
    "writeUIntLE": (()=>writeUIntLE)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/utils/buffer.js [app-client] (ecmascript)");
;
function eob() {
    throw new Error('unexpected end of buffer');
}
function safeRead(pipe, num) {
    if (pipe.byteLength < num) {
        eob();
    }
    return pipe.read(num);
}
function safeReadUint8(pipe) {
    const byte = pipe.readUint8();
    if (byte === undefined) {
        eob();
    }
    return byte;
}
function lebEncode(value) {
    if (typeof value === 'number') {
        value = BigInt(value);
    }
    if (value < BigInt(0)) {
        throw new Error('Cannot leb encode negative values.');
    }
    const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;
    const pipe = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PipeArrayBuffer"](new ArrayBuffer(byteLength), 0);
    while(true){
        const i = Number(value & BigInt(0x7f));
        value /= BigInt(0x80);
        if (value === BigInt(0)) {
            pipe.write(new Uint8Array([
                i
            ]));
            break;
        } else {
            pipe.write(new Uint8Array([
                i | 0x80
            ]));
        }
    }
    return pipe.buffer;
}
function lebDecode(pipe) {
    let weight = BigInt(1);
    let value = BigInt(0);
    let byte;
    do {
        byte = safeReadUint8(pipe);
        value += BigInt(byte & 0x7f).valueOf() * weight;
        weight *= BigInt(128);
    }while (byte >= 0x80)
    return value;
}
function slebEncode(value) {
    if (typeof value === 'number') {
        value = BigInt(value);
    }
    const isNeg = value < BigInt(0);
    if (isNeg) {
        value = -value - BigInt(1);
    }
    const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;
    const pipe = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PipeArrayBuffer"](new ArrayBuffer(byteLength), 0);
    while(true){
        const i = getLowerBytes(value);
        value /= BigInt(0x80);
        // prettier-ignore
        if (isNeg && value === BigInt(0) && (i & 0x40) !== 0 || !isNeg && value === BigInt(0) && (i & 0x40) === 0) {
            pipe.write(new Uint8Array([
                i
            ]));
            break;
        } else {
            pipe.write(new Uint8Array([
                i | 0x80
            ]));
        }
    }
    function getLowerBytes(num) {
        const bytes = num % BigInt(0x80);
        if (isNeg) {
            // We swap the bits here again, and remove 1 to do two's complement.
            return Number(BigInt(0x80) - bytes - BigInt(1));
        } else {
            return Number(bytes);
        }
    }
    return pipe.buffer;
}
function slebDecode(pipe) {
    // Get the size of the buffer, then cut a buffer of that size.
    const pipeView = new Uint8Array(pipe.buffer);
    let len = 0;
    for(; len < pipeView.byteLength; len++){
        if (pipeView[len] < 0x80) {
            // If it's a positive number, we reuse lebDecode.
            if ((pipeView[len] & 0x40) === 0) {
                return lebDecode(pipe);
            }
            break;
        }
    }
    const bytes = new Uint8Array(safeRead(pipe, len + 1));
    let value = BigInt(0);
    for(let i = bytes.byteLength - 1; i >= 0; i--){
        value = value * BigInt(0x80) + BigInt(0x80 - (bytes[i] & 0x7f) - 1);
    }
    return -value - BigInt(1);
}
function writeUIntLE(value, byteLength) {
    if (BigInt(value) < BigInt(0)) {
        throw new Error('Cannot write negative values.');
    }
    return writeIntLE(value, byteLength);
}
function writeIntLE(value, byteLength) {
    value = BigInt(value);
    const pipe = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PipeArrayBuffer"](new ArrayBuffer(Math.min(1, byteLength)), 0);
    let i = 0;
    let mul = BigInt(256);
    let sub = BigInt(0);
    let byte = Number(value % mul);
    pipe.write(new Uint8Array([
        byte
    ]));
    while(++i < byteLength){
        if (value < 0 && sub === BigInt(0) && byte !== 0) {
            sub = BigInt(1);
        }
        byte = Number((value / mul - sub) % BigInt(256));
        pipe.write(new Uint8Array([
            byte
        ]));
        mul *= BigInt(256);
    }
    return pipe.buffer;
}
function readUIntLE(pipe, byteLength) {
    let val = BigInt(safeReadUint8(pipe));
    let mul = BigInt(1);
    let i = 0;
    while(++i < byteLength){
        mul *= BigInt(256);
        const byte = BigInt(safeReadUint8(pipe));
        val = val + mul * byte;
    }
    return val;
}
function readIntLE(pipe, byteLength) {
    let val = readUIntLE(pipe, byteLength);
    const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));
    if (val >= mul) {
        val -= mul * BigInt(2);
    }
    return val;
} //# sourceMappingURL=leb128.js.map
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Equivalent to `Math.log2(n)` with support for `BigInt` values
 * @param n bigint or integer
 * @returns integer
 */ __turbopack_context__.s({
    "iexp2": (()=>iexp2),
    "ilog2": (()=>ilog2)
});
function ilog2(n) {
    const nBig = BigInt(n);
    if (n <= 0) {
        throw new RangeError('Input must be positive');
    }
    return nBig.toString(2).length - 1;
}
function iexp2(n) {
    const nBig = BigInt(n);
    if (n < 0) {
        throw new RangeError('Input must be non-negative');
    }
    return BigInt(1) << nBig;
} //# sourceMappingURL=bigint-math.js.map
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/idl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-explicit-any */ __turbopack_context__.s({
    "Bool": (()=>Bool),
    "BoolClass": (()=>BoolClass),
    "ConstructType": (()=>ConstructType),
    "Empty": (()=>Empty),
    "EmptyClass": (()=>EmptyClass),
    "FixedIntClass": (()=>FixedIntClass),
    "FixedNatClass": (()=>FixedNatClass),
    "Float32": (()=>Float32),
    "Float64": (()=>Float64),
    "FloatClass": (()=>FloatClass),
    "Func": (()=>Func),
    "FuncClass": (()=>FuncClass),
    "Int": (()=>Int),
    "Int16": (()=>Int16),
    "Int32": (()=>Int32),
    "Int64": (()=>Int64),
    "Int8": (()=>Int8),
    "IntClass": (()=>IntClass),
    "Nat": (()=>Nat),
    "Nat16": (()=>Nat16),
    "Nat32": (()=>Nat32),
    "Nat64": (()=>Nat64),
    "Nat8": (()=>Nat8),
    "NatClass": (()=>NatClass),
    "Null": (()=>Null),
    "NullClass": (()=>NullClass),
    "Opt": (()=>Opt),
    "OptClass": (()=>OptClass),
    "PrimitiveType": (()=>PrimitiveType),
    "Principal": (()=>Principal),
    "PrincipalClass": (()=>PrincipalClass),
    "Rec": (()=>Rec),
    "RecClass": (()=>RecClass),
    "Record": (()=>Record),
    "RecordClass": (()=>RecordClass),
    "Reserved": (()=>Reserved),
    "ReservedClass": (()=>ReservedClass),
    "Service": (()=>Service),
    "ServiceClass": (()=>ServiceClass),
    "Text": (()=>Text),
    "TextClass": (()=>TextClass),
    "Tuple": (()=>Tuple),
    "TupleClass": (()=>TupleClass),
    "Type": (()=>Type),
    "Unknown": (()=>Unknown),
    "UnknownClass": (()=>UnknownClass),
    "Variant": (()=>Variant),
    "VariantClass": (()=>VariantClass),
    "Vec": (()=>Vec),
    "VecClass": (()=>VecClass),
    "Visitor": (()=>Visitor),
    "decode": (()=>decode),
    "encode": (()=>encode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/principal/lib/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/utils/buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/utils/hash.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/utils/leb128.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$bigint$2d$math$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js [app-client] (ecmascript)");
;
;
;
;
;
const magicNumber = 'DIDL';
const toReadableString_max = 400; // will not display arguments after 400chars. Makes sure 2mb blobs don't get inside the error
function zipWith(xs, ys, f) {
    return xs.map((x, i)=>f(x, ys[i]));
}
/**
 * An IDL Type Table, which precedes the data in the stream.
 */ class TypeTable {
    constructor(){
        // List of types. Needs to be an array as the index needs to be stable.
        this._typs = [];
        this._idx = new Map();
    }
    has(obj) {
        return this._idx.has(obj.name);
    }
    add(type, buf) {
        const idx = this._typs.length;
        this._idx.set(type.name, idx);
        this._typs.push(buf);
    }
    merge(obj, knot) {
        const idx = this._idx.get(obj.name);
        const knotIdx = this._idx.get(knot);
        if (idx === undefined) {
            throw new Error('Missing type index for ' + obj);
        }
        if (knotIdx === undefined) {
            throw new Error('Missing type index for ' + knot);
        }
        this._typs[idx] = this._typs[knotIdx];
        // Delete the type.
        this._typs.splice(knotIdx, 1);
        this._idx.delete(knot);
    }
    encode() {
        const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(this._typs.length);
        const buf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...this._typs);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(len, buf);
    }
    indexOf(typeName) {
        if (!this._idx.has(typeName)) {
            throw new Error('Missing type index for ' + typeName);
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(this._idx.get(typeName) || 0);
    }
}
class Visitor {
    visitType(t, data) {
        throw new Error('Not implemented');
    }
    visitPrimitive(t, data) {
        return this.visitType(t, data);
    }
    visitEmpty(t, data) {
        return this.visitPrimitive(t, data);
    }
    visitBool(t, data) {
        return this.visitPrimitive(t, data);
    }
    visitNull(t, data) {
        return this.visitPrimitive(t, data);
    }
    visitReserved(t, data) {
        return this.visitPrimitive(t, data);
    }
    visitText(t, data) {
        return this.visitPrimitive(t, data);
    }
    visitNumber(t, data) {
        return this.visitPrimitive(t, data);
    }
    visitInt(t, data) {
        return this.visitNumber(t, data);
    }
    visitNat(t, data) {
        return this.visitNumber(t, data);
    }
    visitFloat(t, data) {
        return this.visitPrimitive(t, data);
    }
    visitFixedInt(t, data) {
        return this.visitNumber(t, data);
    }
    visitFixedNat(t, data) {
        return this.visitNumber(t, data);
    }
    visitPrincipal(t, data) {
        return this.visitPrimitive(t, data);
    }
    visitConstruct(t, data) {
        return this.visitType(t, data);
    }
    visitVec(t, ty, data) {
        return this.visitConstruct(t, data);
    }
    visitOpt(t, ty, data) {
        return this.visitConstruct(t, data);
    }
    visitRecord(t, fields, data) {
        return this.visitConstruct(t, data);
    }
    visitTuple(t, components, data) {
        const fields = components.map((ty, i)=>[
                `_${i}_`,
                ty
            ]);
        return this.visitRecord(t, fields, data);
    }
    visitVariant(t, fields, data) {
        return this.visitConstruct(t, data);
    }
    visitRec(t, ty, data) {
        return this.visitConstruct(ty, data);
    }
    visitFunc(t, data) {
        return this.visitConstruct(t, data);
    }
    visitService(t, data) {
        return this.visitConstruct(t, data);
    }
}
class Type {
    /* Display type name */ display() {
        return this.name;
    }
    valueToString(x) {
        return toReadableString(x);
    }
    /* Implement `T` in the IDL spec, only needed for non-primitive types */ buildTypeTable(typeTable) {
        if (!typeTable.has(this)) {
            this._buildTypeTableImpl(typeTable);
        }
    }
}
class PrimitiveType extends Type {
    checkType(t) {
        if (this.name !== t.name) {
            throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);
        }
        return t;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _buildTypeTableImpl(typeTable) {
        // No type table encoding for Primitive types.
        return;
    }
}
class ConstructType extends Type {
    checkType(t) {
        if (t instanceof RecClass) {
            const ty = t.getType();
            if (typeof ty === 'undefined') {
                throw new Error('type mismatch with uninitialized type');
            }
            return ty;
        }
        throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);
    }
    encodeType(typeTable) {
        return typeTable.indexOf(this.name);
    }
}
class EmptyClass extends PrimitiveType {
    accept(v, d) {
        return v.visitEmpty(this, d);
    }
    covariant(x) {
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue() {
        throw new Error('Empty cannot appear as a function argument');
    }
    valueToString() {
        throw new Error('Empty cannot appear as a value');
    }
    encodeType() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-17 /* IDLTypeIds.Empty */ );
    }
    decodeValue() {
        throw new Error('Empty cannot appear as an output');
    }
    get name() {
        return 'empty';
    }
}
class UnknownClass extends Type {
    checkType(t) {
        throw new Error('Method not implemented for unknown.');
    }
    accept(v, d) {
        throw v.visitType(this, d);
    }
    covariant(x) {
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue() {
        throw new Error('Unknown cannot appear as a function argument');
    }
    valueToString() {
        throw new Error('Unknown cannot appear as a value');
    }
    encodeType() {
        throw new Error('Unknown cannot be serialized');
    }
    decodeValue(b, t) {
        let decodedValue = t.decodeValue(b, t);
        if (Object(decodedValue) !== decodedValue) {
            // decodedValue is primitive. Box it, otherwise we cannot add the type() function.
            // The type() function is important for primitives because otherwise we cannot tell apart the
            // different number types.
            decodedValue = Object(decodedValue);
        }
        let typeFunc;
        if (t instanceof RecClass) {
            typeFunc = ()=>t.getType();
        } else {
            typeFunc = ()=>t;
        }
        // Do not use 'decodedValue.type = typeFunc' because this would lead to an enumerable property
        // 'type' which means it would be serialized if the value would be candid encoded again.
        // This in turn leads to problems if the decoded value is a variant because these values are
        // only allowed to have a single property.
        Object.defineProperty(decodedValue, 'type', {
            value: typeFunc,
            writable: true,
            enumerable: false,
            configurable: true
        });
        return decodedValue;
    }
    _buildTypeTableImpl() {
        throw new Error('Unknown cannot be serialized');
    }
    get name() {
        return 'Unknown';
    }
}
class BoolClass extends PrimitiveType {
    accept(v, d) {
        return v.visitBool(this, d);
    }
    covariant(x) {
        if (typeof x === 'boolean') return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        return new Uint8Array([
            x ? 1 : 0
        ]);
    }
    encodeType() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-2 /* IDLTypeIds.Bool */ );
    }
    decodeValue(b, t) {
        this.checkType(t);
        switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeReadUint8"])(b)){
            case 0:
                return false;
            case 1:
                return true;
            default:
                throw new Error('Boolean value out of range');
        }
    }
    get name() {
        return 'bool';
    }
}
class NullClass extends PrimitiveType {
    accept(v, d) {
        return v.visitNull(this, d);
    }
    covariant(x) {
        if (x === null) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue() {
        return new ArrayBuffer(0);
    }
    encodeType() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-1 /* IDLTypeIds.Null */ );
    }
    decodeValue(b, t) {
        this.checkType(t);
        return null;
    }
    get name() {
        return 'null';
    }
}
class ReservedClass extends PrimitiveType {
    accept(v, d) {
        return v.visitReserved(this, d);
    }
    covariant(x) {
        return true;
    }
    encodeValue() {
        return new ArrayBuffer(0);
    }
    encodeType() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-16 /* IDLTypeIds.Reserved */ );
    }
    decodeValue(b, t) {
        if (t.name !== this.name) {
            t.decodeValue(b, t);
        }
        return null;
    }
    get name() {
        return 'reserved';
    }
}
class TextClass extends PrimitiveType {
    accept(v, d) {
        return v.visitText(this, d);
    }
    covariant(x) {
        if (typeof x === 'string') return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        const buf = new TextEncoder().encode(x);
        const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(buf.byteLength);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(len, buf);
    }
    encodeType() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-15 /* IDLTypeIds.Text */ );
    }
    decodeValue(b, t) {
        this.checkType(t);
        const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(b);
        const buf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeRead"])(b, Number(len));
        const decoder = new TextDecoder('utf8', {
            fatal: true
        });
        return decoder.decode(buf);
    }
    get name() {
        return 'text';
    }
    valueToString(x) {
        return '"' + x + '"';
    }
}
class IntClass extends PrimitiveType {
    accept(v, d) {
        return v.visitInt(this, d);
    }
    covariant(x) {
        // We allow encoding of JavaScript plain numbers.
        // But we will always decode to bigint.
        if (typeof x === 'bigint' || Number.isInteger(x)) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(x);
    }
    encodeType() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-4 /* IDLTypeIds.Int */ );
    }
    decodeValue(b, t) {
        this.checkType(t);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebDecode"])(b);
    }
    get name() {
        return 'int';
    }
    valueToString(x) {
        return x.toString();
    }
}
class NatClass extends PrimitiveType {
    accept(v, d) {
        return v.visitNat(this, d);
    }
    covariant(x) {
        // We allow encoding of JavaScript plain numbers.
        // But we will always decode to bigint.
        if (typeof x === 'bigint' && x >= BigInt(0) || Number.isInteger(x) && x >= 0) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(x);
    }
    encodeType() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-3 /* IDLTypeIds.Nat */ );
    }
    decodeValue(b, t) {
        this.checkType(t);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(b);
    }
    get name() {
        return 'nat';
    }
    valueToString(x) {
        return x.toString();
    }
}
class FloatClass extends PrimitiveType {
    constructor(_bits){
        super();
        this._bits = _bits;
        if (_bits !== 32 && _bits !== 64) {
            throw new Error('not a valid float type');
        }
    }
    accept(v, d) {
        return v.visitFloat(this, d);
    }
    covariant(x) {
        if (typeof x === 'number' || x instanceof Number) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        const buf = new ArrayBuffer(this._bits / 8);
        const view = new DataView(buf);
        if (this._bits === 32) {
            view.setFloat32(0, x, true);
        } else {
            view.setFloat64(0, x, true);
        }
        return buf;
    }
    encodeType() {
        const opcode = this._bits === 32 ? -13 /* IDLTypeIds.Float32 */  : -14 /* IDLTypeIds.Float64 */ ;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(opcode);
    }
    decodeValue(b, t) {
        this.checkType(t);
        const bytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeRead"])(b, this._bits / 8);
        const view = new DataView(bytes);
        if (this._bits === 32) {
            return view.getFloat32(0, true);
        } else {
            return view.getFloat64(0, true);
        }
    }
    get name() {
        return 'float' + this._bits;
    }
    valueToString(x) {
        return x.toString();
    }
}
class FixedIntClass extends PrimitiveType {
    constructor(_bits){
        super();
        this._bits = _bits;
    }
    accept(v, d) {
        return v.visitFixedInt(this, d);
    }
    covariant(x) {
        const min = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$bigint$2d$math$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["iexp2"])(this._bits - 1) * BigInt(-1);
        const max = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$bigint$2d$math$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["iexp2"])(this._bits - 1) - BigInt(1);
        let ok = false;
        if (typeof x === 'bigint') {
            ok = x >= min && x <= max;
        } else if (Number.isInteger(x)) {
            const v = BigInt(x);
            ok = v >= min && v <= max;
        } else {
            ok = false;
        }
        if (ok) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["writeIntLE"])(x, this._bits / 8);
    }
    encodeType() {
        const offset = Math.log2(this._bits) - 3;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-9 - offset);
    }
    decodeValue(b, t) {
        this.checkType(t);
        const num = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["readIntLE"])(b, this._bits / 8);
        if (this._bits <= 32) {
            return Number(num);
        } else {
            return num;
        }
    }
    get name() {
        return `int${this._bits}`;
    }
    valueToString(x) {
        return x.toString();
    }
}
class FixedNatClass extends PrimitiveType {
    constructor(_bits){
        super();
        this._bits = _bits;
    }
    accept(v, d) {
        return v.visitFixedNat(this, d);
    }
    covariant(x) {
        const max = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$bigint$2d$math$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["iexp2"])(this._bits);
        let ok = false;
        if (typeof x === 'bigint' && x >= BigInt(0)) {
            ok = x < max;
        } else if (Number.isInteger(x) && x >= 0) {
            const v = BigInt(x);
            ok = v < max;
        } else {
            ok = false;
        }
        if (ok) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["writeUIntLE"])(x, this._bits / 8);
    }
    encodeType() {
        const offset = Math.log2(this._bits) - 3;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-5 - offset);
    }
    decodeValue(b, t) {
        this.checkType(t);
        const num = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["readUIntLE"])(b, this._bits / 8);
        if (this._bits <= 32) {
            return Number(num);
        } else {
            return num;
        }
    }
    get name() {
        return `nat${this._bits}`;
    }
    valueToString(x) {
        return x.toString();
    }
}
class VecClass extends ConstructType {
    constructor(_type){
        super();
        this._type = _type;
        // If true, this vector is really a blob and we can just use memcpy.
        //
        // NOTE:
        // With support of encoding/dencoding of TypedArrays, this optimization is
        // only used when plain array of bytes are passed as encoding input in order
        // to be backward compatible.
        this._blobOptimization = false;
        if (_type instanceof FixedNatClass && _type._bits === 8) {
            this._blobOptimization = true;
        }
    }
    accept(v, d) {
        return v.visitVec(this, this._type, d);
    }
    covariant(x) {
        // Special case for ArrayBuffer
        const bits = this._type instanceof FixedNatClass ? this._type._bits : this._type instanceof FixedIntClass ? this._type._bits : 0;
        if (ArrayBuffer.isView(x) && bits == x.BYTES_PER_ELEMENT * 8 || Array.isArray(x) && x.every((v, idx)=>{
            try {
                return this._type.covariant(v);
            } catch (e) {
                throw new Error(`Invalid ${this.display()} argument: \n\nindex ${idx} -> ${e.message}`);
            }
        })) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(x.length);
        if (this._blobOptimization) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(len, new Uint8Array(x));
        }
        if (ArrayBuffer.isView(x)) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(len, new Uint8Array(x.buffer));
        }
        const buf = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PipeArrayBuffer"](new ArrayBuffer(len.byteLength + x.length), 0);
        buf.write(len);
        for (const d of x){
            const encoded = this._type.encodeValue(d);
            buf.write(new Uint8Array(encoded));
        }
        return buf.buffer;
    }
    _buildTypeTableImpl(typeTable) {
        this._type.buildTypeTable(typeTable);
        const opCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-19 /* IDLTypeIds.Vector */ );
        const buffer = this._type.encodeType(typeTable);
        typeTable.add(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(opCode, buffer));
    }
    decodeValue(b, t) {
        const vec = this.checkType(t);
        if (!(vec instanceof VecClass)) {
            throw new Error('Not a vector type');
        }
        const len = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(b));
        if (this._type instanceof FixedNatClass) {
            if (this._type._bits == 8) {
                return new Uint8Array(b.read(len));
            }
            if (this._type._bits == 16) {
                return new Uint16Array(b.read(len * 2));
            }
            if (this._type._bits == 32) {
                return new Uint32Array(b.read(len * 4));
            }
            if (this._type._bits == 64) {
                return new BigUint64Array(b.read(len * 8));
            }
        }
        if (this._type instanceof FixedIntClass) {
            if (this._type._bits == 8) {
                return new Int8Array(b.read(len));
            }
            if (this._type._bits == 16) {
                return new Int16Array(b.read(len * 2));
            }
            if (this._type._bits == 32) {
                return new Int32Array(b.read(len * 4));
            }
            if (this._type._bits == 64) {
                return new BigInt64Array(b.read(len * 8));
            }
        }
        const rets = [];
        for(let i = 0; i < len; i++){
            rets.push(this._type.decodeValue(b, vec._type));
        }
        return rets;
    }
    get name() {
        return `vec ${this._type.name}`;
    }
    display() {
        return `vec ${this._type.display()}`;
    }
    valueToString(x) {
        const elements = x.map((e)=>this._type.valueToString(e));
        return 'vec {' + elements.join('; ') + '}';
    }
}
class OptClass extends ConstructType {
    constructor(_type){
        super();
        this._type = _type;
    }
    accept(v, d) {
        return v.visitOpt(this, this._type, d);
    }
    covariant(x) {
        try {
            if (Array.isArray(x) && (x.length === 0 || x.length === 1 && this._type.covariant(x[0]))) return true;
        } catch (e) {
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)} \n\n-> ${e.message}`);
        }
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        if (x.length === 0) {
            return new Uint8Array([
                0
            ]);
        } else {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(new Uint8Array([
                1
            ]), this._type.encodeValue(x[0]));
        }
    }
    _buildTypeTableImpl(typeTable) {
        this._type.buildTypeTable(typeTable);
        const opCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-18 /* IDLTypeIds.Opt */ );
        const buffer = this._type.encodeType(typeTable);
        typeTable.add(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(opCode, buffer));
    }
    decodeValue(b, t) {
        if (t instanceof NullClass) {
            return [];
        }
        if (t instanceof ReservedClass) {
            return [];
        }
        let wireType = t;
        // unfold wireType, if needed
        if (t instanceof RecClass) {
            const ty = t.getType();
            if (typeof ty === 'undefined') {
                throw new Error('type mismatch with uninitialized type');
            } else wireType = ty;
        }
        if (wireType instanceof OptClass) {
            switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeReadUint8"])(b)){
                case 0:
                    return [];
                case 1:
                    {
                        // Save the current state of the Pipe `b` to allow rollback in case of an error
                        const checkpoint = b.save();
                        try {
                            // Attempt to decode a value using the `_type` of the current instance
                            const v = this._type.decodeValue(b, wireType._type);
                            return [
                                v
                            ];
                        } catch (e) {
                            // If an error occurs during decoding, restore the Pipe `b` to its previous state
                            b.restore(checkpoint);
                            // Skip the value at the current wire type to advance the Pipe `b` position
                            const skipped = wireType._type.decodeValue(b, wireType._type);
                            // Return an empty array to indicate a `none` value
                            return [];
                        }
                    }
                default:
                    throw new Error('Not an option value');
            }
        } else if (this._type instanceof NullClass || this._type instanceof OptClass || this._type instanceof ReservedClass) {
            // null <: <t> :
            // skip value at wire type (to advance b) and return "null", i.e. []
            const skipped = wireType.decodeValue(b, wireType);
            return [];
        } else {
            // not (null <: t) :
            // try constituent type
            const checkpoint = b.save();
            try {
                const v = this._type.decodeValue(b, t);
                return [
                    v
                ];
            } catch (e) {
                // decoding failed, but this is opt, so return "null", i.e. []
                b.restore(checkpoint);
                // skip value at wire type (to advance b)
                const skipped = wireType.decodeValue(b, t);
                // return "null"
                return [];
            }
        }
    }
    get name() {
        return `opt ${this._type.name}`;
    }
    display() {
        return `opt ${this._type.display()}`;
    }
    valueToString(x) {
        if (x.length === 0) {
            return 'null';
        } else {
            return `opt ${this._type.valueToString(x[0])}`;
        }
    }
}
class RecordClass extends ConstructType {
    constructor(fields = {}){
        super();
        this._fields = Object.entries(fields).sort((a, b)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["idlLabelToId"])(a[0]) - (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["idlLabelToId"])(b[0]));
    }
    accept(v, d) {
        return v.visitRecord(this, this._fields, d);
    }
    tryAsTuple() {
        const res = [];
        for(let i = 0; i < this._fields.length; i++){
            const [key, type] = this._fields[i];
            if (key !== `_${i}_`) {
                return null;
            }
            res.push(type);
        }
        return res;
    }
    covariant(x) {
        if (typeof x === 'object' && this._fields.every(([k, t])=>{
            // eslint-disable-next-line
            if (!x.hasOwnProperty(k)) {
                throw new Error(`Record is missing key "${k}".`);
            }
            try {
                return t.covariant(x[k]);
            } catch (e) {
                throw new Error(`Invalid ${this.display()} argument: \n\nfield ${k} -> ${e.message}`);
            }
        })) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        const values = this._fields.map(([key])=>x[key]);
        const bufs = zipWith(this._fields, values, ([, c], d)=>c.encodeValue(d));
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...bufs);
    }
    _buildTypeTableImpl(T) {
        this._fields.forEach(([_, value])=>value.buildTypeTable(T));
        const opCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-20 /* IDLTypeIds.Record */ );
        const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(this._fields.length);
        const fields = this._fields.map(([key, value])=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["idlLabelToId"])(key)), value.encodeType(T)));
        T.add(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(opCode, len, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...fields)));
    }
    decodeValue(b, t) {
        const record = this.checkType(t);
        if (!(record instanceof RecordClass)) {
            throw new Error('Not a record type');
        }
        const x = {};
        let expectedRecordIdx = 0;
        let actualRecordIdx = 0;
        while(actualRecordIdx < record._fields.length){
            const [hash, type] = record._fields[actualRecordIdx];
            if (expectedRecordIdx >= this._fields.length) {
                // skip unexpected left over fields present on the wire
                type.decodeValue(b, type);
                actualRecordIdx++;
                continue;
            }
            const [expectKey, expectType] = this._fields[expectedRecordIdx];
            const expectedId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["idlLabelToId"])(this._fields[expectedRecordIdx][0]);
            const actualId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["idlLabelToId"])(hash);
            if (expectedId === actualId) {
                // the current field on the wire matches the expected field
                x[expectKey] = expectType.decodeValue(b, type);
                expectedRecordIdx++;
                actualRecordIdx++;
            } else if (actualId > expectedId) {
                // The expected field does not exist on the wire
                if (expectType instanceof OptClass || expectType instanceof ReservedClass) {
                    x[expectKey] = [];
                    expectedRecordIdx++;
                } else {
                    throw new Error('Cannot find required field ' + expectKey);
                }
            } else {
                // The field on the wire does not exist in the output type, so we can skip it
                type.decodeValue(b, type);
                actualRecordIdx++;
            }
        }
        // initialize left over expected optional fields
        for (const [expectKey, expectType] of this._fields.slice(expectedRecordIdx)){
            if (expectType instanceof OptClass || expectType instanceof ReservedClass) {
                // TODO this assumes null value in opt is represented as []
                x[expectKey] = [];
            } else {
                throw new Error('Cannot find required field ' + expectKey);
            }
        }
        return x;
    }
    get name() {
        const fields = this._fields.map(([key, value])=>key + ':' + value.name);
        return `record {${fields.join('; ')}}`;
    }
    display() {
        const fields = this._fields.map(([key, value])=>key + ':' + value.display());
        return `record {${fields.join('; ')}}`;
    }
    valueToString(x) {
        const values = this._fields.map(([key])=>x[key]);
        const fields = zipWith(this._fields, values, ([k, c], d)=>k + '=' + c.valueToString(d));
        return `record {${fields.join('; ')}}`;
    }
}
class TupleClass extends RecordClass {
    constructor(_components){
        const x = {};
        _components.forEach((e, i)=>x['_' + i + '_'] = e);
        super(x);
        this._components = _components;
    }
    accept(v, d) {
        return v.visitTuple(this, this._components, d);
    }
    covariant(x) {
        // `>=` because tuples can be covariant when encoded.
        if (Array.isArray(x) && x.length >= this._fields.length && this._components.every((t, i)=>{
            try {
                return t.covariant(x[i]);
            } catch (e) {
                throw new Error(`Invalid ${this.display()} argument: \n\nindex ${i} -> ${e.message}`);
            }
        })) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        const bufs = zipWith(this._components, x, (c, d)=>c.encodeValue(d));
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...bufs);
    }
    decodeValue(b, t) {
        const tuple = this.checkType(t);
        if (!(tuple instanceof TupleClass)) {
            throw new Error('not a tuple type');
        }
        if (tuple._components.length < this._components.length) {
            throw new Error('tuple mismatch');
        }
        const res = [];
        for (const [i, wireType] of tuple._components.entries()){
            if (i >= this._components.length) {
                // skip value
                wireType.decodeValue(b, wireType);
            } else {
                res.push(this._components[i].decodeValue(b, wireType));
            }
        }
        return res;
    }
    display() {
        const fields = this._components.map((value)=>value.display());
        return `record {${fields.join('; ')}}`;
    }
    valueToString(values) {
        const fields = zipWith(this._components, values, (c, d)=>c.valueToString(d));
        return `record {${fields.join('; ')}}`;
    }
}
class VariantClass extends ConstructType {
    constructor(fields = {}){
        super();
        this._fields = Object.entries(fields).sort((a, b)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["idlLabelToId"])(a[0]) - (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["idlLabelToId"])(b[0]));
    }
    accept(v, d) {
        return v.visitVariant(this, this._fields, d);
    }
    covariant(x) {
        if (typeof x === 'object' && Object.entries(x).length === 1 && this._fields.every(([k, v])=>{
            try {
                // eslint-disable-next-line
                return !x.hasOwnProperty(k) || v.covariant(x[k]);
            } catch (e) {
                throw new Error(`Invalid ${this.display()} argument: \n\nvariant ${k} -> ${e.message}`);
            }
        })) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        for(let i = 0; i < this._fields.length; i++){
            const [name, type] = this._fields[i];
            // eslint-disable-next-line
            if (x.hasOwnProperty(name)) {
                const idx = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(i);
                const buf = type.encodeValue(x[name]);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(idx, buf);
            }
        }
        throw Error('Variant has no data: ' + x);
    }
    _buildTypeTableImpl(typeTable) {
        this._fields.forEach(([, type])=>{
            type.buildTypeTable(typeTable);
        });
        const opCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-21 /* IDLTypeIds.Variant */ );
        const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(this._fields.length);
        const fields = this._fields.map(([key, value])=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["idlLabelToId"])(key)), value.encodeType(typeTable)));
        typeTable.add(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(opCode, len, ...fields));
    }
    decodeValue(b, t) {
        const variant = this.checkType(t);
        if (!(variant instanceof VariantClass)) {
            throw new Error('Not a variant type');
        }
        const idx = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(b));
        if (idx >= variant._fields.length) {
            throw Error('Invalid variant index: ' + idx);
        }
        const [wireHash, wireType] = variant._fields[idx];
        for (const [key, expectType] of this._fields){
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["idlLabelToId"])(wireHash) === (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["idlLabelToId"])(key)) {
                const value = expectType.decodeValue(b, wireType);
                return {
                    [key]: value
                };
            }
        }
        throw new Error('Cannot find field hash ' + wireHash);
    }
    get name() {
        const fields = this._fields.map(([key, type])=>key + ':' + type.name);
        return `variant {${fields.join('; ')}}`;
    }
    display() {
        const fields = this._fields.map(([key, type])=>key + (type.name === 'null' ? '' : `:${type.display()}`));
        return `variant {${fields.join('; ')}}`;
    }
    valueToString(x) {
        for (const [name, type] of this._fields){
            // eslint-disable-next-line
            if (x.hasOwnProperty(name)) {
                const value = type.valueToString(x[name]);
                if (value === 'null') {
                    return `variant {${name}}`;
                } else {
                    return `variant {${name}=${value}}`;
                }
            }
        }
        throw new Error('Variant has no data: ' + x);
    }
}
class RecClass extends ConstructType {
    constructor(){
        super(...arguments);
        this._id = RecClass._counter++;
        this._type = undefined;
    }
    accept(v, d) {
        if (!this._type) {
            throw Error('Recursive type uninitialized.');
        }
        return v.visitRec(this, this._type, d);
    }
    fill(t) {
        this._type = t;
    }
    getType() {
        return this._type;
    }
    covariant(x) {
        if (this._type ? this._type.covariant(x) : false) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        if (!this._type) {
            throw Error('Recursive type uninitialized.');
        }
        return this._type.encodeValue(x);
    }
    _buildTypeTableImpl(typeTable) {
        if (!this._type) {
            throw Error('Recursive type uninitialized.');
        }
        typeTable.add(this, new Uint8Array([]));
        this._type.buildTypeTable(typeTable);
        typeTable.merge(this, this._type.name);
    }
    decodeValue(b, t) {
        if (!this._type) {
            throw Error('Recursive type uninitialized.');
        }
        return this._type.decodeValue(b, t);
    }
    get name() {
        return `rec_${this._id}`;
    }
    display() {
        if (!this._type) {
            throw Error('Recursive type uninitialized.');
        }
        return `μ${this.name}.${this._type.name}`;
    }
    valueToString(x) {
        if (!this._type) {
            throw Error('Recursive type uninitialized.');
        }
        return this._type.valueToString(x);
    }
}
RecClass._counter = 0;
function decodePrincipalId(b) {
    const x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeReadUint8"])(b);
    if (x !== 1) {
        throw new Error('Cannot decode principal');
    }
    const len = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(b));
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"].fromUint8Array(new Uint8Array((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeRead"])(b, len)));
}
class PrincipalClass extends PrimitiveType {
    accept(v, d) {
        return v.visitPrincipal(this, d);
    }
    covariant(x) {
        if (x && x._isPrincipal) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        const buf = x.toUint8Array();
        const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(buf.byteLength);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(new Uint8Array([
            1
        ]), len, buf);
    }
    encodeType() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-24 /* IDLTypeIds.Principal */ );
    }
    decodeValue(b, t) {
        this.checkType(t);
        return decodePrincipalId(b);
    }
    get name() {
        return 'principal';
    }
    valueToString(x) {
        return `${this.name} "${x.toText()}"`;
    }
}
class FuncClass extends ConstructType {
    constructor(argTypes, retTypes, annotations = []){
        super();
        this.argTypes = argTypes;
        this.retTypes = retTypes;
        this.annotations = annotations;
    }
    static argsToString(types, v) {
        if (types.length !== v.length) {
            throw new Error('arity mismatch');
        }
        return '(' + types.map((t, i)=>t.valueToString(v[i])).join(', ') + ')';
    }
    accept(v, d) {
        return v.visitFunc(this, d);
    }
    covariant(x) {
        if (Array.isArray(x) && x.length === 2 && x[0] && x[0]._isPrincipal && typeof x[1] === 'string') return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue([principal, methodName]) {
        const buf = principal.toUint8Array();
        const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(buf.byteLength);
        const canister = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(new Uint8Array([
            1
        ]), len, buf);
        const method = new TextEncoder().encode(methodName);
        const methodLen = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(method.byteLength);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(new Uint8Array([
            1
        ]), canister, methodLen, method);
    }
    _buildTypeTableImpl(T) {
        this.argTypes.forEach((arg)=>arg.buildTypeTable(T));
        this.retTypes.forEach((arg)=>arg.buildTypeTable(T));
        const opCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-22 /* IDLTypeIds.Func */ );
        const argLen = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(this.argTypes.length);
        const args = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...this.argTypes.map((arg)=>arg.encodeType(T)));
        const retLen = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(this.retTypes.length);
        const rets = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...this.retTypes.map((arg)=>arg.encodeType(T)));
        const annLen = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(this.annotations.length);
        const anns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...this.annotations.map((a)=>this.encodeAnnotation(a)));
        T.add(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(opCode, argLen, args, retLen, rets, annLen, anns));
    }
    decodeValue(b) {
        const x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeReadUint8"])(b);
        if (x !== 1) {
            throw new Error('Cannot decode function reference');
        }
        const canister = decodePrincipalId(b);
        const mLen = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(b));
        const buf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeRead"])(b, mLen);
        const decoder = new TextDecoder('utf8', {
            fatal: true
        });
        const method = decoder.decode(buf);
        return [
            canister,
            method
        ];
    }
    get name() {
        const args = this.argTypes.map((arg)=>arg.name).join(', ');
        const rets = this.retTypes.map((arg)=>arg.name).join(', ');
        const annon = ' ' + this.annotations.join(' ');
        return `(${args}) -> (${rets})${annon}`;
    }
    valueToString([principal, str]) {
        return `func "${principal.toText()}".${str}`;
    }
    display() {
        const args = this.argTypes.map((arg)=>arg.display()).join(', ');
        const rets = this.retTypes.map((arg)=>arg.display()).join(', ');
        const annon = ' ' + this.annotations.join(' ');
        return `(${args}) → (${rets})${annon}`;
    }
    encodeAnnotation(ann) {
        if (ann === 'query') {
            return new Uint8Array([
                1
            ]);
        } else if (ann === 'oneway') {
            return new Uint8Array([
                2
            ]);
        } else if (ann === 'composite_query') {
            return new Uint8Array([
                3
            ]);
        } else {
            throw new Error('Illegal function annotation');
        }
    }
}
class ServiceClass extends ConstructType {
    constructor(fields){
        super();
        this._fields = Object.entries(fields).sort((a, b)=>{
            if (a[0] < b[0]) {
                return -1;
            }
            if (a[0] > b[0]) {
                return 1;
            }
            return 0;
        });
    }
    accept(v, d) {
        return v.visitService(this, d);
    }
    covariant(x) {
        if (x && x._isPrincipal) return true;
        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
    }
    encodeValue(x) {
        const buf = x.toUint8Array();
        const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(buf.length);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(new Uint8Array([
            1
        ]), len, buf);
    }
    _buildTypeTableImpl(T) {
        this._fields.forEach(([_, func])=>func.buildTypeTable(T));
        const opCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebEncode"])(-23 /* IDLTypeIds.Service */ );
        const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(this._fields.length);
        const meths = this._fields.map(([label, func])=>{
            const labelBuf = new TextEncoder().encode(label);
            const labelLen = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(labelBuf.length);
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(labelLen, labelBuf, func.encodeType(T));
        });
        T.add(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(opCode, len, ...meths));
    }
    decodeValue(b) {
        return decodePrincipalId(b);
    }
    get name() {
        const fields = this._fields.map(([key, value])=>key + ':' + value.name);
        return `service {${fields.join('; ')}}`;
    }
    valueToString(x) {
        return `service "${x.toText()}"`;
    }
}
/**
 * Takes an unknown value and returns a string representation of it.
 * @param x - unknown value
 * @returns {string} string representation of the value
 */ function toReadableString(x) {
    const str = JSON.stringify(x, (_key, value)=>typeof value === 'bigint' ? `BigInt(${value})` : value);
    return str && str.length > toReadableString_max ? str.substring(0, toReadableString_max - 3) + '...' : str;
}
function encode(argTypes, args) {
    if (args.length < argTypes.length) {
        throw Error('Wrong number of message arguments');
    }
    const typeTable = new TypeTable();
    argTypes.forEach((t)=>t.buildTypeTable(typeTable));
    const magic = new TextEncoder().encode(magicNumber);
    const table = typeTable.encode();
    const len = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebEncode"])(args.length);
    const typs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...argTypes.map((t)=>t.encodeType(typeTable)));
    const vals = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...zipWith(argTypes, args, (t, x)=>{
        try {
            t.covariant(x);
        } catch (e) {
            const err = new Error(e.message + '\n\n');
            throw err;
        }
        return t.encodeValue(x);
    }));
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(magic, table, len, typs, vals);
}
function decode(retTypes, bytes) {
    const b = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PipeArrayBuffer"](bytes);
    if (bytes.byteLength < magicNumber.length) {
        throw new Error('Message length smaller than magic number');
    }
    const magicBuffer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeRead"])(b, magicNumber.length);
    const magic = new TextDecoder().decode(magicBuffer);
    if (magic !== magicNumber) {
        throw new Error('Wrong magic number: ' + JSON.stringify(magic));
    }
    function readTypeTable(pipe) {
        const typeTable = [];
        const len = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(pipe));
        for(let i = 0; i < len; i++){
            const ty = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebDecode"])(pipe));
            switch(ty){
                case -18 /* IDLTypeIds.Opt */ :
                case -19 /* IDLTypeIds.Vector */ :
                    {
                        const t = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebDecode"])(pipe));
                        typeTable.push([
                            ty,
                            t
                        ]);
                        break;
                    }
                case -20 /* IDLTypeIds.Record */ :
                case -21 /* IDLTypeIds.Variant */ :
                    {
                        const fields = [];
                        let objectLength = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(pipe));
                        let prevHash;
                        while(objectLength--){
                            const hash = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(pipe));
                            if (hash >= Math.pow(2, 32)) {
                                throw new Error('field id out of 32-bit range');
                            }
                            if (typeof prevHash === 'number' && prevHash >= hash) {
                                throw new Error('field id collision or not sorted');
                            }
                            prevHash = hash;
                            const t = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebDecode"])(pipe));
                            fields.push([
                                hash,
                                t
                            ]);
                        }
                        typeTable.push([
                            ty,
                            fields
                        ]);
                        break;
                    }
                case -22 /* IDLTypeIds.Func */ :
                    {
                        const args = [];
                        let argLength = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(pipe));
                        while(argLength--){
                            args.push(Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebDecode"])(pipe)));
                        }
                        const returnValues = [];
                        let returnValuesLength = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(pipe));
                        while(returnValuesLength--){
                            returnValues.push(Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebDecode"])(pipe)));
                        }
                        const annotations = [];
                        let annotationLength = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(pipe));
                        while(annotationLength--){
                            const annotation = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(pipe));
                            switch(annotation){
                                case 1:
                                    {
                                        annotations.push('query');
                                        break;
                                    }
                                case 2:
                                    {
                                        annotations.push('oneway');
                                        break;
                                    }
                                case 3:
                                    {
                                        annotations.push('composite_query');
                                        break;
                                    }
                                default:
                                    throw new Error('unknown annotation');
                            }
                        }
                        typeTable.push([
                            ty,
                            [
                                args,
                                returnValues,
                                annotations
                            ]
                        ]);
                        break;
                    }
                case -23 /* IDLTypeIds.Service */ :
                    {
                        let servLength = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(pipe));
                        const methods = [];
                        while(servLength--){
                            const nameLength = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(pipe));
                            const funcName = new TextDecoder().decode((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeRead"])(pipe, nameLength));
                            const funcType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebDecode"])(pipe);
                            methods.push([
                                funcName,
                                funcType
                            ]);
                        }
                        typeTable.push([
                            ty,
                            methods
                        ]);
                        break;
                    }
                default:
                    throw new Error('Illegal op_code: ' + ty);
            }
        }
        const rawList = [];
        const length = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lebDecode"])(pipe));
        for(let i = 0; i < length; i++){
            rawList.push(Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slebDecode"])(pipe)));
        }
        return [
            typeTable,
            rawList
        ];
    }
    const [rawTable, rawTypes] = readTypeTable(b);
    if (rawTypes.length < retTypes.length) {
        throw new Error('Wrong number of return values');
    }
    const table = rawTable.map((_)=>Rec());
    function getType(t) {
        if (t < -24) {
            throw new Error('future value not supported');
        }
        if (t < 0) {
            switch(t){
                case -1:
                    return Null;
                case -2:
                    return Bool;
                case -3:
                    return Nat;
                case -4:
                    return Int;
                case -5:
                    return Nat8;
                case -6:
                    return Nat16;
                case -7:
                    return Nat32;
                case -8:
                    return Nat64;
                case -9:
                    return Int8;
                case -10:
                    return Int16;
                case -11:
                    return Int32;
                case -12:
                    return Int64;
                case -13:
                    return Float32;
                case -14:
                    return Float64;
                case -15:
                    return Text;
                case -16:
                    return Reserved;
                case -17:
                    return Empty;
                case -24:
                    return Principal;
                default:
                    throw new Error('Illegal op_code: ' + t);
            }
        }
        if (t >= rawTable.length) {
            throw new Error('type index out of range');
        }
        return table[t];
    }
    function buildType(entry) {
        switch(entry[0]){
            case -19 /* IDLTypeIds.Vector */ :
                {
                    const ty = getType(entry[1]);
                    return Vec(ty);
                }
            case -18 /* IDLTypeIds.Opt */ :
                {
                    const ty = getType(entry[1]);
                    return Opt(ty);
                }
            case -20 /* IDLTypeIds.Record */ :
                {
                    const fields = {};
                    for (const [hash, ty] of entry[1]){
                        const name = `_${hash}_`;
                        fields[name] = getType(ty);
                    }
                    const record = Record(fields);
                    const tuple = record.tryAsTuple();
                    if (Array.isArray(tuple)) {
                        return Tuple(...tuple);
                    } else {
                        return record;
                    }
                }
            case -21 /* IDLTypeIds.Variant */ :
                {
                    const fields = {};
                    for (const [hash, ty] of entry[1]){
                        const name = `_${hash}_`;
                        fields[name] = getType(ty);
                    }
                    return Variant(fields);
                }
            case -22 /* IDLTypeIds.Func */ :
                {
                    const [args, returnValues, annotations] = entry[1];
                    return Func(args.map((t)=>getType(t)), returnValues.map((t)=>getType(t)), annotations);
                }
            case -23 /* IDLTypeIds.Service */ :
                {
                    const rec = {};
                    const methods = entry[1];
                    for (const [name, typeRef] of methods){
                        let type = getType(typeRef);
                        if (type instanceof RecClass) {
                            // unpack reference type
                            type = type.getType();
                        }
                        if (!(type instanceof FuncClass)) {
                            throw new Error('Illegal service definition: services can only contain functions');
                        }
                        rec[name] = type;
                    }
                    return Service(rec);
                }
            default:
                throw new Error('Illegal op_code: ' + entry[0]);
        }
    }
    rawTable.forEach((entry, i)=>{
        // Process function type first, so that we can construct the correct service type
        if (entry[0] === -22 /* IDLTypeIds.Func */ ) {
            const t = buildType(entry);
            table[i].fill(t);
        }
    });
    rawTable.forEach((entry, i)=>{
        if (entry[0] !== -22 /* IDLTypeIds.Func */ ) {
            const t = buildType(entry);
            table[i].fill(t);
        }
    });
    const types = rawTypes.map((t)=>getType(t));
    const output = retTypes.map((t, i)=>{
        return t.decodeValue(b, types[i]);
    });
    // skip unused values
    for(let ind = retTypes.length; ind < types.length; ind++){
        types[ind].decodeValue(b, types[ind]);
    }
    if (b.byteLength > 0) {
        throw new Error('decode: Left-over bytes');
    }
    return output;
}
const Empty = new EmptyClass();
const Reserved = new ReservedClass();
const Unknown = new UnknownClass();
const Bool = new BoolClass();
const Null = new NullClass();
const Text = new TextClass();
const Int = new IntClass();
const Nat = new NatClass();
const Float32 = new FloatClass(32);
const Float64 = new FloatClass(64);
const Int8 = new FixedIntClass(8);
const Int16 = new FixedIntClass(16);
const Int32 = new FixedIntClass(32);
const Int64 = new FixedIntClass(64);
const Nat8 = new FixedNatClass(8);
const Nat16 = new FixedNatClass(16);
const Nat32 = new FixedNatClass(32);
const Nat64 = new FixedNatClass(64);
const Principal = new PrincipalClass();
function Tuple(...types) {
    return new TupleClass(types);
}
function Vec(t) {
    return new VecClass(t);
}
function Opt(t) {
    return new OptClass(t);
}
function Record(t) {
    return new RecordClass(t);
}
function Variant(fields) {
    return new VariantClass(fields);
}
function Rec() {
    return new RecClass();
}
function Func(args, ret, annotations = []) {
    return new FuncClass(args, ret, annotations);
}
function Service(t) {
    return new ServiceClass(t);
} //# sourceMappingURL=idl.js.map
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/candid-core.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "InputBox": (()=>InputBox),
    "InputForm": (()=>InputForm),
    "OptionForm": (()=>OptionForm),
    "RecordForm": (()=>RecordForm),
    "TupleForm": (()=>TupleForm),
    "VariantForm": (()=>VariantForm),
    "VecForm": (()=>VecForm)
});
class InputBox {
    constructor(idl, ui){
        this.idl = idl;
        this.ui = ui;
        this.label = null;
        this.value = undefined;
        const status = document.createElement('span');
        status.className = 'status';
        this.status = status;
        if (ui.input) {
            ui.input.addEventListener('blur', ()=>{
                if (ui.input.value === '') {
                    return;
                }
                this.parse();
            });
            ui.input.addEventListener('input', ()=>{
                status.style.display = 'none';
                ui.input.classList.remove('reject');
            });
        }
    }
    isRejected() {
        return this.value === undefined;
    }
    parse(config = {}) {
        if (this.ui.form) {
            const value = this.ui.form.parse(config);
            this.value = value;
            return value;
        }
        if (this.ui.input) {
            const input = this.ui.input;
            try {
                const value = this.ui.parse(this.idl, config, input.value);
                if (!this.idl.covariant(value)) {
                    throw new Error(`${input.value} is not of type ${this.idl.display()}`);
                }
                this.status.style.display = 'none';
                this.value = value;
                return value;
            } catch (err) {
                input.classList.add('reject');
                this.status.style.display = 'block';
                this.status.innerHTML = 'InputError: ' + err.message;
                this.value = undefined;
                return undefined;
            }
        }
        return null;
    }
    render(dom) {
        const container = document.createElement('span');
        if (this.label) {
            const label = document.createElement('label');
            label.innerText = this.label;
            container.appendChild(label);
        }
        if (this.ui.input) {
            container.appendChild(this.ui.input);
            container.appendChild(this.status);
        }
        if (this.ui.form) {
            this.ui.form.render(container);
        }
        dom.appendChild(container);
    }
}
class InputForm {
    constructor(ui){
        this.ui = ui;
        this.form = [];
    }
    renderForm(dom) {
        if (this.ui.container) {
            this.form.forEach((e)=>e.render(this.ui.container));
            dom.appendChild(this.ui.container);
        } else {
            this.form.forEach((e)=>e.render(dom));
        }
    }
    render(dom) {
        if (this.ui.open && this.ui.event) {
            dom.appendChild(this.ui.open);
            const form = this;
            // eslint-disable-next-line
            form.ui.open.addEventListener(form.ui.event, ()=>{
                // Remove old form
                if (form.ui.container) {
                    form.ui.container.innerHTML = '';
                } else {
                    const oldContainer = form.ui.open.nextElementSibling;
                    if (oldContainer) {
                        oldContainer.parentNode.removeChild(oldContainer);
                    }
                }
                // Render form
                form.generateForm();
                form.renderForm(dom);
            });
        } else {
            this.generateForm();
            this.renderForm(dom);
        }
    }
}
class RecordForm extends InputForm {
    constructor(fields, ui){
        super(ui);
        this.fields = fields;
        this.ui = ui;
    }
    generateForm() {
        this.form = this.fields.map(([key, type])=>{
            const input = this.ui.render(type);
            // eslint-disable-next-line
            if (this.ui.labelMap && this.ui.labelMap.hasOwnProperty(key)) {
                input.label = this.ui.labelMap[key] + ' ';
            } else {
                input.label = key + ' ';
            }
            return input;
        });
    }
    parse(config) {
        const v = {};
        this.fields.forEach(([key, _], i)=>{
            const value = this.form[i].parse(config);
            v[key] = value;
        });
        if (this.form.some((input)=>input.isRejected())) {
            return undefined;
        }
        return v;
    }
}
class TupleForm extends InputForm {
    constructor(components, ui){
        super(ui);
        this.components = components;
        this.ui = ui;
    }
    generateForm() {
        this.form = this.components.map((type)=>{
            const input = this.ui.render(type);
            return input;
        });
    }
    parse(config) {
        const v = [];
        this.components.forEach((_, i)=>{
            const value = this.form[i].parse(config);
            v.push(value);
        });
        if (this.form.some((input)=>input.isRejected())) {
            return undefined;
        }
        return v;
    }
}
class VariantForm extends InputForm {
    constructor(fields, ui){
        super(ui);
        this.fields = fields;
        this.ui = ui;
    }
    generateForm() {
        const index = this.ui.open.selectedIndex;
        const [_, type] = this.fields[index];
        const variant = this.ui.render(type);
        this.form = [
            variant
        ];
    }
    parse(config) {
        const select = this.ui.open;
        const selected = select.options[select.selectedIndex].value;
        const value = this.form[0].parse(config);
        if (value === undefined) {
            return undefined;
        }
        const v = {};
        v[selected] = value;
        return v;
    }
}
class OptionForm extends InputForm {
    constructor(ty, ui){
        super(ui);
        this.ty = ty;
        this.ui = ui;
    }
    generateForm() {
        if (this.ui.open.checked) {
            const opt = this.ui.render(this.ty);
            this.form = [
                opt
            ];
        } else {
            this.form = [];
        }
    }
    parse(config) {
        if (this.form.length === 0) {
            return [];
        } else {
            const value = this.form[0].parse(config);
            if (value === undefined) {
                return undefined;
            }
            return [
                value
            ];
        }
    }
}
class VecForm extends InputForm {
    constructor(ty, ui){
        super(ui);
        this.ty = ty;
        this.ui = ui;
    }
    generateForm() {
        const len = +this.ui.open.value;
        this.form = [];
        for(let i = 0; i < len; i++){
            const t = this.ui.render(this.ty);
            this.form.push(t);
        }
    }
    parse(config) {
        const value = this.form.map((input)=>{
            return input.parse(config);
        });
        if (this.form.some((input)=>input.isRejected())) {
            return undefined;
        }
        return value;
    }
} //# sourceMappingURL=candid-core.js.map
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/candid-ui.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable @typescript-eslint/no-explicit-any */ /* eslint-disable @typescript-eslint/no-unused-vars */ __turbopack_context__.s({
    "Render": (()=>Render),
    "inputBox": (()=>inputBox),
    "optForm": (()=>optForm),
    "recordForm": (()=>recordForm),
    "renderInput": (()=>renderInput),
    "renderValue": (()=>renderValue),
    "tupleForm": (()=>tupleForm),
    "variantForm": (()=>variantForm),
    "vecForm": (()=>vecForm)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$idl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/idl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/principal/lib/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$candid$2d$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/candid-core.js [app-client] (ecmascript)");
;
;
;
const InputConfig = {
    parse: parsePrimitive
};
const FormConfig = {
    render: renderInput
};
const inputBox = (t, config)=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$candid$2d$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputBox"](t, Object.assign(Object.assign({}, InputConfig), config));
};
const recordForm = (fields, config)=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$candid$2d$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RecordForm"](fields, Object.assign(Object.assign({}, FormConfig), config));
};
const tupleForm = (components, config)=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$candid$2d$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TupleForm"](components, Object.assign(Object.assign({}, FormConfig), config));
};
const variantForm = (fields, config)=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$candid$2d$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VariantForm"](fields, Object.assign(Object.assign({}, FormConfig), config));
};
const optForm = (ty, config)=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$candid$2d$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OptionForm"](ty, Object.assign(Object.assign({}, FormConfig), config));
};
const vecForm = (ty, config)=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$candid$2d$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VecForm"](ty, Object.assign(Object.assign({}, FormConfig), config));
};
class Render extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$idl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Visitor"] {
    visitType(t, d) {
        const input = document.createElement('input');
        input.classList.add('argument');
        input.placeholder = t.display();
        return inputBox(t, {
            input
        });
    }
    visitNull(t, d) {
        return inputBox(t, {});
    }
    visitRecord(t, fields, d) {
        let config = {};
        if (fields.length > 1) {
            const container = document.createElement('div');
            container.classList.add('popup-form');
            config = {
                container
            };
        }
        const form = recordForm(fields, config);
        return inputBox(t, {
            form
        });
    }
    visitTuple(t, components, d) {
        let config = {};
        if (components.length > 1) {
            const container = document.createElement('div');
            container.classList.add('popup-form');
            config = {
                container
            };
        }
        const form = tupleForm(components, config);
        return inputBox(t, {
            form
        });
    }
    visitVariant(t, fields, d) {
        const select = document.createElement('select');
        for (const [key, type] of fields){
            const option = new Option(key);
            select.add(option);
        }
        select.selectedIndex = -1;
        select.classList.add('open');
        const config = {
            open: select,
            event: 'change'
        };
        const form = variantForm(fields, config);
        return inputBox(t, {
            form
        });
    }
    visitOpt(t, ty, d) {
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.classList.add('open');
        const form = optForm(ty, {
            open: checkbox,
            event: 'change'
        });
        return inputBox(t, {
            form
        });
    }
    visitVec(t, ty, d) {
        const len = document.createElement('input');
        len.type = 'number';
        len.min = '0';
        len.max = '100';
        len.style.width = '8rem';
        len.placeholder = 'len';
        len.classList.add('open');
        const container = document.createElement('div');
        container.classList.add('popup-form');
        const form = vecForm(ty, {
            open: len,
            event: 'change',
            container
        });
        return inputBox(t, {
            form
        });
    }
    visitRec(t, ty, d) {
        return renderInput(ty);
    }
}
class Parse extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$idl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Visitor"] {
    visitNull(t, v) {
        return null;
    }
    visitBool(t, v) {
        if (v === 'true') {
            return true;
        }
        if (v === 'false') {
            return false;
        }
        throw new Error(`Cannot parse ${v} as boolean`);
    }
    visitText(t, v) {
        return v;
    }
    visitFloat(t, v) {
        return parseFloat(v);
    }
    visitFixedInt(t, v) {
        if (t._bits <= 32) {
            return parseInt(v, 10);
        } else {
            return BigInt(v);
        }
    }
    visitFixedNat(t, v) {
        if (t._bits <= 32) {
            return parseInt(v, 10);
        } else {
            return BigInt(v);
        }
    }
    visitNumber(t, v) {
        return BigInt(v);
    }
    visitPrincipal(t, v) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"].fromText(v);
    }
    visitService(t, v) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"].fromText(v);
    }
    visitFunc(t, v) {
        const x = v.split('.', 2);
        return [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"].fromText(x[0]),
            x[1]
        ];
    }
}
class Random extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$idl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Visitor"] {
    visitNull(t, v) {
        return null;
    }
    visitBool(t, v) {
        return Math.random() < 0.5;
    }
    visitText(t, v) {
        return Math.random().toString(36).substring(6);
    }
    visitFloat(t, v) {
        return Math.random();
    }
    visitInt(t, v) {
        return BigInt(this.generateNumber(true));
    }
    visitNat(t, v) {
        return BigInt(this.generateNumber(false));
    }
    visitFixedInt(t, v) {
        const x = this.generateNumber(true);
        if (t._bits <= 32) {
            return x;
        } else {
            return BigInt(v);
        }
    }
    visitFixedNat(t, v) {
        const x = this.generateNumber(false);
        if (t._bits <= 32) {
            return x;
        } else {
            return BigInt(v);
        }
    }
    generateNumber(signed) {
        const num = Math.floor(Math.random() * 100);
        if (signed && Math.random() < 0.5) {
            return -num;
        } else {
            return num;
        }
    }
}
function parsePrimitive(t, config, d) {
    if (config.random && d === '') {
        return t.accept(new Random(), d);
    } else {
        return t.accept(new Parse(), d);
    }
}
function renderInput(t) {
    return t.accept(new Render(), null);
}
function renderValue(t, input, value) {
    return t.accept(new RenderValue(), {
        input,
        value
    });
}
class RenderValue extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$idl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Visitor"] {
    visitType(t, d) {
        d.input.ui.input.value = t.valueToString(d.value);
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    visitNull(t, d) {}
    visitText(t, d) {
        d.input.ui.input.value = d.value;
    }
    visitRec(t, ty, d) {
        renderValue(ty, d.input, d.value);
    }
    visitOpt(t, ty, d) {
        if (d.value.length === 0) {
            return;
        } else {
            const form = d.input.ui.form;
            const open = form.ui.open;
            open.checked = true;
            open.dispatchEvent(new Event(form.ui.event));
            renderValue(ty, form.form[0], d.value[0]);
        }
    }
    visitRecord(t, fields, d) {
        const form = d.input.ui.form;
        fields.forEach(([key, type], i)=>{
            renderValue(type, form.form[i], d.value[key]);
        });
    }
    visitTuple(t, components, d) {
        const form = d.input.ui.form;
        components.forEach((type, i)=>{
            renderValue(type, form.form[i], d.value[i]);
        });
    }
    visitVariant(t, fields, d) {
        const form = d.input.ui.form;
        const selected = Object.entries(d.value)[0];
        fields.forEach(([key, type], i)=>{
            if (key === selected[0]) {
                const open = form.ui.open;
                open.selectedIndex = i;
                open.dispatchEvent(new Event(form.ui.event));
                renderValue(type, form.form[0], selected[1]);
            }
        });
    }
    visitVec(t, ty, d) {
        const form = d.input.ui.form;
        const len = d.value.length;
        const open = form.ui.open;
        open.value = len;
        open.dispatchEvent(new Event(form.ui.event));
        d.value.forEach((v, i)=>{
            renderValue(ty, form.form[i], v);
        });
    }
} //# sourceMappingURL=candid-ui.js.map
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/types.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
;
;
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$candid$2d$ui$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/candid-ui.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$candid$2d$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/candid-core.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$idl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/idl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/utils/hash.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$leb128$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/utils/leb128.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/utils/buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/types.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@dfinity/candid/lib/esm/idl.js [app-client] (ecmascript) <export * as IDL>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "IDL": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$idl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$idl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/idl.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/bignumber.js/bignumber.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
;
(function(globalObject) {
    'use strict';
    /*
 *      bignumber.js v9.3.0
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */ var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = '[BigNumber Error] ', tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ', BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 0x1fffffffffffff, // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [
        1,
        10,
        100,
        1e3,
        1e4,
        1e5,
        1e6,
        1e7,
        1e8,
        1e9,
        1e10,
        1e11,
        1e12,
        1e13
    ], SQRT_BASE = 1e7, // EDITABLE
    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    MAX = 1E9; // 0 to MAX_INT32
    /*
   * Create and return a BigNumber constructor.
   */ function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber.prototype = {
            constructor: BigNumber,
            toString: null,
            valueOf: null
        }, ONE = new BigNumber(1), //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------
        // The default values below must be integers within the inclusive ranges stated.
        // The values can also be changed at run-time using BigNumber.set.
        // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20, // The rounding mode used when rounding to the above decimal places, and when using
        // toExponential, toFixed, toFormat and toPrecision, and round (default value).
        // UP         0 Away from zero.
        // DOWN       1 Towards zero.
        // CEIL       2 Towards +Infinity.
        // FLOOR      3 Towards -Infinity.
        // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        ROUNDING_MODE = 4, // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7, // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21, // RANGE : [MIN_EXP, MAX_EXP]
        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -1e7, // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 1e7, // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false, // The modulo mode used when calculating the modulus: a mod n.
        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
        // The remainder (r) is calculated as: r = a - n * q.
        //
        // UP        0 The remainder is positive if the dividend is negative, else is negative.
        // DOWN      1 The remainder has the same sign as the dividend.
        //             This modulo mode is commonly known as 'truncated division' and is
        //             equivalent to (a % n) in JavaScript.
        // FLOOR     3 The remainder has the same sign as the divisor (Python %).
        // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
        // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
        //             The remainder is always positive.
        //
        // The truncated division, floored division, Euclidian division and IEEE 754 remainder
        // modes are commonly used for the modulus operation.
        // Although the other rounding modes can also be used, they may not give useful results.
        MODULO_MODE = 1, // The maximum number of significant digits of the result of the exponentiatedBy operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 0, // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
            prefix: '',
            groupSize: 3,
            secondaryGroupSize: 0,
            groupSeparator: ',',
            decimalSeparator: '.',
            fractionGroupSize: 0,
            fractionGroupSeparator: '\xA0',
            suffix: ''
        }, // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
        // '-', '.', whitespace, or repeated character.
        // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz', alphabetHasNormalDecimalDigits = true;
        //------------------------------------------------------------------------------------------
        // CONSTRUCTOR
        /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */ function BigNumber(v, b) {
            var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
            // Enable constructor call without `new`.
            if (!(x instanceof BigNumber)) return new BigNumber(v, b);
            if (b == null) {
                if (v && v._isBigNumber === true) {
                    x.s = v.s;
                    if (!v.c || v.e > MAX_EXP) {
                        x.c = x.e = null;
                    } else if (v.e < MIN_EXP) {
                        x.c = [
                            x.e = 0
                        ];
                    } else {
                        x.e = v.e;
                        x.c = v.c.slice();
                    }
                    return;
                }
                if ((isNum = typeof v == 'number') && v * 0 == 0) {
                    // Use `1 / n` to handle minus zero also.
                    x.s = 1 / v < 0 ? (v = -v, -1) : 1;
                    // Fast path for integers, where n < 2147483648 (2**31).
                    if (v === ~~v) {
                        for(e = 0, i = v; i >= 10; i /= 10, e++);
                        if (e > MAX_EXP) {
                            x.c = x.e = null;
                        } else {
                            x.e = e;
                            x.c = [
                                v
                            ];
                        }
                        return;
                    }
                    str = String(v);
                } else {
                    if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
                }
                // Decimal point?
                if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                // Exponential form?
                if ((i = str.search(/e/i)) > 0) {
                    // Determine exponent.
                    if (e < 0) e = i;
                    e += +str.slice(i + 1);
                    str = str.substring(0, i);
                } else if (e < 0) {
                    // Integer.
                    e = str.length;
                }
            } else {
                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                intCheck(b, 2, ALPHABET.length, 'Base');
                // Allow exponential notation to be used with base 10 argument, while
                // also rounding to DECIMAL_PLACES as with other bases.
                if (b == 10 && alphabetHasNormalDecimalDigits) {
                    x = new BigNumber(v);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                }
                str = String(v);
                if (isNum = typeof v == 'number') {
                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                    if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
                    x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                    if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
                        throw Error(tooManyDigits + v);
                    }
                } else {
                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                }
                alphabet = ALPHABET.slice(0, b);
                e = i = 0;
                // Check that str is a valid base b number.
                // Don't use RegExp, so alphabet can contain special characters.
                for(len = str.length; i < len; i++){
                    if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                        if (c == '.') {
                            // If '.' is not the first character and it has not be found before.
                            if (i > e) {
                                e = len;
                                continue;
                            }
                        } else if (!caseChanged) {
                            // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                            if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                                caseChanged = true;
                                i = -1;
                                e = 0;
                                continue;
                            }
                        }
                        return parseNumeric(x, String(v), isNum, b);
                    }
                }
                // Prevent later check for length on converted number.
                isNum = false;
                str = convertBase(str, b, 10, x.s);
                // Decimal point?
                if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                else e = str.length;
            }
            // Determine leading zeros.
            for(i = 0; str.charCodeAt(i) === 48; i++);
            // Determine trailing zeros.
            for(len = str.length; str.charCodeAt(--len) === 48;);
            if (str = str.slice(i, ++len)) {
                len -= i;
                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
                    throw Error(tooManyDigits + x.s * v);
                }
                // Overflow?
                if ((e = e - i - 1) > MAX_EXP) {
                    // Infinity.
                    x.c = x.e = null;
                // Underflow?
                } else if (e < MIN_EXP) {
                    // Zero.
                    x.c = [
                        x.e = 0
                    ];
                } else {
                    x.e = e;
                    x.c = [];
                    // Transform base
                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE; // i < 1
                    if (i < len) {
                        if (i) x.c.push(+str.slice(0, i));
                        for(len -= LOG_BASE; i < len;){
                            x.c.push(+str.slice(i, i += LOG_BASE));
                        }
                        i = LOG_BASE - (str = str.slice(i)).length;
                    } else {
                        i -= len;
                    }
                    for(; i--; str += '0');
                    x.c.push(+str);
                }
            } else {
                // Zero.
                x.c = [
                    x.e = 0
                ];
            }
        }
        // CONSTRUCTOR PROPERTIES
        BigNumber.clone = clone;
        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;
        /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */ BigNumber.config = BigNumber.set = function(obj) {
            var p, v;
            if (obj != null) {
                if (typeof obj == 'object') {
                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                        v = obj[p];
                        intCheck(v, 0, MAX, p);
                        DECIMAL_PLACES = v;
                    }
                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                        v = obj[p];
                        intCheck(v, 0, 8, p);
                        ROUNDING_MODE = v;
                    }
                    // EXPONENTIAL_AT {number|number[]}
                    // Integer, -MAX to MAX inclusive or
                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                        v = obj[p];
                        if (v && v.pop) {
                            intCheck(v[0], -MAX, 0, p);
                            intCheck(v[1], 0, MAX, p);
                            TO_EXP_NEG = v[0];
                            TO_EXP_POS = v[1];
                        } else {
                            intCheck(v, -MAX, MAX, p);
                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                        }
                    }
                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                    if (obj.hasOwnProperty(p = 'RANGE')) {
                        v = obj[p];
                        if (v && v.pop) {
                            intCheck(v[0], -MAX, -1, p);
                            intCheck(v[1], 1, MAX, p);
                            MIN_EXP = v[0];
                            MAX_EXP = v[1];
                        } else {
                            intCheck(v, -MAX, MAX, p);
                            if (v) {
                                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                            } else {
                                throw Error(bignumberError + p + ' cannot be zero: ' + v);
                            }
                        }
                    }
                    // CRYPTO {boolean} true or false.
                    // '[BigNumber Error] CRYPTO not true or false: {v}'
                    // '[BigNumber Error] crypto unavailable'
                    if (obj.hasOwnProperty(p = 'CRYPTO')) {
                        v = obj[p];
                        if (v === !!v) {
                            if (v) {
                                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                                    CRYPTO = v;
                                } else {
                                    CRYPTO = !v;
                                    throw Error(bignumberError + 'crypto unavailable');
                                }
                            } else {
                                CRYPTO = v;
                            }
                        } else {
                            throw Error(bignumberError + p + ' not true or false: ' + v);
                        }
                    }
                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                        v = obj[p];
                        intCheck(v, 0, 9, p);
                        MODULO_MODE = v;
                    }
                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                        v = obj[p];
                        intCheck(v, 0, MAX, p);
                        POW_PRECISION = v;
                    }
                    // FORMAT {object}
                    // '[BigNumber Error] FORMAT not an object: {v}'
                    if (obj.hasOwnProperty(p = 'FORMAT')) {
                        v = obj[p];
                        if (typeof v == 'object') FORMAT = v;
                        else throw Error(bignumberError + p + ' not an object: ' + v);
                    }
                    // ALPHABET {string}
                    // '[BigNumber Error] ALPHABET invalid: {v}'
                    if (obj.hasOwnProperty(p = 'ALPHABET')) {
                        v = obj[p];
                        // Disallow if less than two characters,
                        // or if it contains '+', '-', '.', whitespace, or a repeated character.
                        if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
                            ALPHABET = v;
                        } else {
                            throw Error(bignumberError + p + ' invalid: ' + v);
                        }
                    }
                } else {
                    // '[BigNumber Error] Object expected: {v}'
                    throw Error(bignumberError + 'Object expected: ' + obj);
                }
            }
            return {
                DECIMAL_PLACES: DECIMAL_PLACES,
                ROUNDING_MODE: ROUNDING_MODE,
                EXPONENTIAL_AT: [
                    TO_EXP_NEG,
                    TO_EXP_POS
                ],
                RANGE: [
                    MIN_EXP,
                    MAX_EXP
                ],
                CRYPTO: CRYPTO,
                MODULO_MODE: MODULO_MODE,
                POW_PRECISION: POW_PRECISION,
                FORMAT: FORMAT,
                ALPHABET: ALPHABET
            };
        };
        /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */ BigNumber.isBigNumber = function(v) {
            if (!v || v._isBigNumber !== true) return false;
            if (!BigNumber.DEBUG) return true;
            var i, n, c = v.c, e = v.e, s = v.s;
            out: if (({}).toString.call(c) == '[object Array]') {
                if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
                    // If the first element is zero, the BigNumber value must be zero.
                    if (c[0] === 0) {
                        if (e === 0 && c.length === 1) return true;
                        break out;
                    }
                    // Calculate number of digits that c[0] should have, based on the exponent.
                    i = (e + 1) % LOG_BASE;
                    if (i < 1) i += LOG_BASE;
                    // Calculate number of digits of c[0].
                    //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
                    if (String(c[0]).length == i) {
                        for(i = 0; i < c.length; i++){
                            n = c[i];
                            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                        }
                        // Last element cannot be zero, unless it is the only element.
                        if (n !== 0) return true;
                    }
                }
            // Infinity/NaN
            } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
                return true;
            }
            throw Error(bignumberError + 'Invalid BigNumber: ' + v);
        };
        /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.maximum = BigNumber.max = function() {
            return maxOrMin(arguments, -1);
        };
        /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.minimum = BigNumber.min = function() {
            return maxOrMin(arguments, 1);
        };
        /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */ BigNumber.random = function() {
            var pow2_53 = 0x20000000000000;
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function() {
                return mathfloor(Math.random() * pow2_53);
            } : function() {
                return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
            };
            return function(dp) {
                var a, b, e, k, v, i = 0, c = [], rand = new BigNumber(ONE);
                if (dp == null) dp = DECIMAL_PLACES;
                else intCheck(dp, 0, MAX);
                k = mathceil(dp / LOG_BASE);
                if (CRYPTO) {
                    // Browsers supporting crypto.getRandomValues.
                    if (crypto.getRandomValues) {
                        a = crypto.getRandomValues(new Uint32Array(k *= 2));
                        for(; i < k;){
                            // 53 bits:
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                            //                                     11111 11111111 11111111
                            // 0x20000 is 2^21.
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);
                            // Rejection sampling:
                            // 0 <= v < 9007199254740992
                            // Probability that v >= 9e15, is
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                            if (v >= 9e15) {
                                b = crypto.getRandomValues(new Uint32Array(2));
                                a[i] = b[0];
                                a[i + 1] = b[1];
                            } else {
                                // 0 <= v <= 8999999999999999
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 2;
                            }
                        }
                        i = k / 2;
                    // Node.js supporting crypto.randomBytes.
                    } else if (crypto.randomBytes) {
                        // buffer
                        a = crypto.randomBytes(k *= 7);
                        for(; i < k;){
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                            // 0x100000000 is 2^32, 0x1000000 is 2^24
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                            // 0 <= v < 9007199254740992
                            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                            if (v >= 9e15) {
                                crypto.randomBytes(7).copy(a, i);
                            } else {
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 7;
                            }
                        }
                        i = k / 7;
                    } else {
                        CRYPTO = false;
                        throw Error(bignumberError + 'crypto unavailable');
                    }
                }
                // Use Math.random.
                if (!CRYPTO) {
                    for(; i < k;){
                        v = random53bitInt();
                        if (v < 9e15) c[i++] = v % 1e14;
                    }
                }
                k = c[--i];
                dp %= LOG_BASE;
                // Convert trailing digits to zeros according to dp.
                if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                }
                // Remove trailing elements which are zero.
                for(; c[i] === 0; c.pop(), i--);
                // Zero?
                if (i < 0) {
                    c = [
                        e = 0
                    ];
                } else {
                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for(e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);
                    // Count the digits of the first element of c to determine leading zeros, and...
                    for(i = 1, v = c[0]; v >= 10; v /= 10, i++);
                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                }
                rand.e = e;
                rand.c = c;
                return rand;
            };
        }();
        /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.sum = function() {
            var i = 1, args = arguments, sum = new BigNumber(args[0]);
            for(; i < args.length;)sum = sum.plus(args[i++]);
            return sum;
        };
        // PRIVATE FUNCTIONS
        // Called by BigNumber and BigNumber.prototype.toString.
        convertBase = function() {
            var decimal = '0123456789';
            /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */ function toBaseOut(str, baseIn, baseOut, alphabet) {
                var j, arr = [
                    0
                ], arrL, i = 0, len = str.length;
                for(; i < len;){
                    for(arrL = arr.length; arrL--; arr[arrL] *= baseIn);
                    arr[0] += alphabet.indexOf(str.charAt(i++));
                    for(j = 0; j < arr.length; j++){
                        if (arr[j] > baseOut - 1) {
                            if (arr[j + 1] == null) arr[j + 1] = 0;
                            arr[j + 1] += arr[j] / baseOut | 0;
                            arr[j] %= baseOut;
                        }
                    }
                }
                return arr.reverse();
            }
            // Convert a numeric string of baseIn to a numeric string of baseOut.
            // If the caller is toString, we are converting from base 10 to baseOut.
            // If the caller is BigNumber, we are converting from baseIn to base 10.
            return function(str, baseIn, baseOut, sign, callerIsToString) {
                var alphabet, d, e, k, r, x, xc, y, i = str.indexOf('.'), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
                // Non-integer.
                if (i >= 0) {
                    k = POW_PRECISION;
                    // Unlimited precision.
                    POW_PRECISION = 0;
                    str = str.replace('.', '');
                    y = new BigNumber(baseIn);
                    x = y.pow(str.length - i);
                    POW_PRECISION = k;
                    // Convert str as if an integer, then restore the fraction part by dividing the
                    // result by its base raised to a power.
                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);
                    y.e = y.c.length;
                }
                // Convert the number as integer.
                xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
                // xc now represents str as an integer and converted to baseOut. e is the exponent.
                e = k = xc.length;
                // Remove trailing zeros.
                for(; xc[--k] == 0; xc.pop());
                // Zero?
                if (!xc[0]) return alphabet.charAt(0);
                // Does str represent an integer? If so, no need for the division.
                if (i < 0) {
                    --e;
                } else {
                    x.c = xc;
                    x.e = e;
                    // The sign is needed for correct rounding.
                    x.s = sign;
                    x = div(x, y, dp, rm, baseOut);
                    xc = x.c;
                    r = x.r;
                    e = x.e;
                }
                // xc now represents str converted to baseOut.
                // The index of the rounding digit.
                d = e + dp + 1;
                // The rounding digit: the digit to the right of the digit that may be rounded up.
                i = xc[d];
                // Look at the rounding digits and mode to determine whether to round up.
                k = baseOut / 2;
                r = r || d < 0 || xc[d + 1] != null;
                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
                // If the index of the rounding digit is not greater than zero, or xc represents
                // zero, then the result of the base conversion is zero or, if rounding up, a value
                // such as 0.00001.
                if (d < 1 || !xc[0]) {
                    // 1^-dp or 0
                    str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
                } else {
                    // Truncate xc to the required number of decimal places.
                    xc.length = d;
                    // Round up?
                    if (r) {
                        // Rounding up may mean the previous digit has to be rounded up and so on.
                        for(--baseOut; ++xc[--d] > baseOut;){
                            xc[d] = 0;
                            if (!d) {
                                ++e;
                                xc = [
                                    1
                                ].concat(xc);
                            }
                        }
                    }
                    // Determine trailing zeros.
                    for(k = xc.length; !xc[--k];);
                    // E.g. [4, 11, 15] becomes 4bf.
                    for(i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));
                    // Add leading zeros, decimal point and trailing zeros as required.
                    str = toFixedPoint(str, e, alphabet.charAt(0));
                }
                // The caller will add the sign.
                return str;
            };
        }();
        // Perform division in the specified base. Called by div and convertBase.
        div = function() {
            // Assume non-zero x and k.
            function multiply(x, k, base) {
                var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
                for(x = x.slice(); i--;){
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                }
                if (carry) x = [
                    carry
                ].concat(x);
                return x;
            }
            function compare(a, b, aL, bL) {
                var i, cmp;
                if (aL != bL) {
                    cmp = aL > bL ? 1 : -1;
                } else {
                    for(i = cmp = 0; i < aL; i++){
                        if (a[i] != b[i]) {
                            cmp = a[i] > b[i] ? 1 : -1;
                            break;
                        }
                    }
                }
                return cmp;
            }
            function subtract(a, b, aL, base) {
                var i = 0;
                // Subtract b from a.
                for(; aL--;){
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                }
                // Remove leading zeros.
                for(; !a[0] && a.length > 1; a.splice(0, 1));
            }
            // x: dividend, y: divisor.
            return function(x, y, dp, rm, base) {
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
                // Either NaN, Infinity or 0?
                if (!xc || !xc[0] || !yc || !yc[0]) {
                    return new BigNumber(// Return NaN if either NaN, or both Infinity or 0.
                    !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                    xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
                }
                q = new BigNumber(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;
                if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                }
                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for(i = 0; yc[i] == (xc[i] || 0); i++);
                if (yc[i] > (xc[i] || 0)) e--;
                if (s < 0) {
                    qc.push(1);
                    more = true;
                } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.
                    n = mathfloor(base / (yc[0] + 1));
                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                    if (n > 1) {
                        yc = multiply(yc, n, base);
                        xc = multiply(xc, n, base);
                        yL = yc.length;
                        xL = xc.length;
                    }
                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;
                    // Add zeros to make remainder as long as divisor.
                    for(; remL < yL; rem[remL++] = 0);
                    yz = yc.slice();
                    yz = [
                        0
                    ].concat(yz);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;
                    do {
                        n = 0;
                        // Compare divisor and remainder.
                        cmp = compare(yc, rem, yL, remL);
                        // If divisor < remainder.
                        if (cmp < 0) {
                            // Calculate trial digit, n.
                            rem0 = rem[0];
                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                            // n is how many times the divisor goes into the current remainder.
                            n = mathfloor(rem0 / yc0);
                            //  Algorithm:
                            //  product = divisor multiplied by trial digit (n).
                            //  Compare product and remainder.
                            //  If product is greater than remainder:
                            //    Subtract divisor from product, decrement trial digit.
                            //  Subtract product from remainder.
                            //  If product was less than remainder at the last compare:
                            //    Compare new remainder and divisor.
                            //    If remainder is greater than divisor:
                            //      Subtract divisor from remainder, increment trial digit.
                            if (n > 1) {
                                // n may be > base only when base is 3.
                                if (n >= base) n = base - 1;
                                // product = divisor * trial digit.
                                prod = multiply(yc, n, base);
                                prodL = prod.length;
                                remL = rem.length;
                                // Compare product and remainder.
                                // If product > remainder then trial digit n too high.
                                // n is 1 too high about 5% of the time, and is not known to have
                                // ever been more than 1 too high.
                                while(compare(prod, rem, prodL, remL) == 1){
                                    n--;
                                    // Subtract divisor from product.
                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                    prodL = prod.length;
                                    cmp = 1;
                                }
                            } else {
                                // n is 0 or 1, cmp is -1.
                                // If n is 0, there is no need to compare yc and rem again below,
                                // so change cmp to 1 to avoid it.
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                if (n == 0) {
                                    // divisor < remainder, so n must be at least 1.
                                    cmp = n = 1;
                                }
                                // product = divisor
                                prod = yc.slice();
                                prodL = prod.length;
                            }
                            if (prodL < remL) prod = [
                                0
                            ].concat(prod);
                            // Subtract product from remainder.
                            subtract(rem, prod, remL, base);
                            remL = rem.length;
                            // If product was < remainder.
                            if (cmp == -1) {
                                // Compare divisor and new remainder.
                                // If divisor < new remainder, subtract divisor from remainder.
                                // Trial digit n too low.
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                while(compare(yc, rem, yL, remL) < 1){
                                    n++;
                                    // Subtract divisor from remainder.
                                    subtract(rem, yL < remL ? yz : yc, remL, base);
                                    remL = rem.length;
                                }
                            }
                        } else if (cmp === 0) {
                            n++;
                            rem = [
                                0
                            ];
                        } // else cmp === 1 and n will be 0
                        // Add the next digit, n, to the result array.
                        qc[i++] = n;
                        // Update the remainder.
                        if (rem[0]) {
                            rem[remL++] = xc[xi] || 0;
                        } else {
                            rem = [
                                xc[xi]
                            ];
                            remL = 1;
                        }
                    }while ((xi++ < xL || rem[0] != null) && s--)
                    more = rem[0] != null;
                    // Leading zero?
                    if (!qc[0]) qc.splice(0, 1);
                }
                if (base == BASE) {
                    // To calculate q.e, first get the number of digits of qc[0].
                    for(i = 1, s = qc[0]; s >= 10; s /= 10, i++);
                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
                // Caller is convertBase.
                } else {
                    q.e = e;
                    q.r = +more;
                }
                return q;
            };
        }();
        /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */ function format(n, i, rm, id) {
            var c0, e, ne, len, str;
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            if (!n.c) return n.toString();
            c0 = n.c[0];
            ne = n.e;
            if (i == null) {
                str = coeffToString(n.c);
                str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');
            } else {
                n = round(new BigNumber(n), i, rm);
                // n.e may have changed if the value was rounded up.
                e = n.e;
                str = coeffToString(n.c);
                len = str.length;
                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.
                // Exponential notation.
                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
                    // Append zeros?
                    for(; len < i; str += '0', len++);
                    str = toExponential(str, e);
                // Fixed-point notation.
                } else {
                    i -= ne;
                    str = toFixedPoint(str, e, '0');
                    // Append zeros?
                    if (e + 1 > len) {
                        if (--i > 0) for(str += '.'; i--; str += '0');
                    } else {
                        i += e - len;
                        if (i > 0) {
                            if (e + 1 == len) str += '.';
                            for(; i--; str += '0');
                        }
                    }
                }
            }
            return n.s < 0 && c0 ? '-' + str : str;
        }
        // Handle BigNumber.max and BigNumber.min.
        // If any number is NaN, return NaN.
        function maxOrMin(args, n) {
            var k, y, i = 1, x = new BigNumber(args[0]);
            for(; i < args.length; i++){
                y = new BigNumber(args[i]);
                if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
                    x = y;
                }
            }
            return x;
        }
        /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */ function normalise(n, c, e) {
            var i = 1, j = c.length;
            // Remove trailing zeros.
            for(; !c[--j]; c.pop());
            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for(j = c[0]; j >= 10; j /= 10, i++);
            // Overflow?
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
                // Infinity.
                n.c = n.e = null;
            // Underflow?
            } else if (e < MIN_EXP) {
                // Zero.
                n.c = [
                    n.e = 0
                ];
            } else {
                n.e = e;
                n.c = c;
            }
            return n;
        }
        // Handle values that fail the validity test in BigNumber.
        parseNumeric = function() {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
            return function(x, str, isNum, b) {
                var base, s = isNum ? str : str.replace(whitespaceOrPlus, '');
                // No exception on ±Infinity or NaN.
                if (isInfinityOrNaN.test(s)) {
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                } else {
                    if (!isNum) {
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                        s = s.replace(basePrefix, function(m, p1, p2) {
                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                            return !b || b == base ? p1 : m;
                        });
                        if (b) {
                            base = b;
                            // E.g. '1.' to '1', '.1' to '0.1'
                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                        }
                        if (str != s) return new BigNumber(s, base);
                    }
                    // '[BigNumber Error] Not a number: {n}'
                    // '[BigNumber Error] Not a base {b} number: {n}'
                    if (BigNumber.DEBUG) {
                        throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
                    }
                    // NaN
                    x.s = null;
                }
                x.c = x.e = null;
            };
        }();
        /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */ function round(x, sd, rm, r) {
            var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
            // if x is not Infinity or NaN...
            if (xc) {
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {
                    // Get the number of digits of the first element of xc.
                    for(d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                    i = sd - d;
                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                        i += LOG_BASE;
                        j = sd;
                        n = xc[ni = 0];
                        // Get the rounding digit at index j of n.
                        rd = mathfloor(n / pows10[d - j - 1] % 10);
                    } else {
                        ni = mathceil((i + 1) / LOG_BASE);
                        if (ni >= xc.length) {
                            if (r) {
                                // Needed by sqrt.
                                for(; xc.length <= ni; xc.push(0));
                                n = rd = 0;
                                d = 1;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + 1;
                            } else {
                                break out;
                            }
                        } else {
                            n = k = xc[ni];
                            // Get the number of digits of n.
                            for(d = 1; k >= 10; k /= 10, d++);
                            // Get the index of rd within n.
                            i %= LOG_BASE;
                            // Get the index of rd within n, adjusted for leading zeros.
                            // The number of leading zeros of n is given by LOG_BASE - d.
                            j = i - LOG_BASE + d;
                            // Get the rounding digit at index j of n.
                            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                        }
                    }
                    r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
                    (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
                    if (sd < 1 || !xc[0]) {
                        xc.length = 0;
                        if (r) {
                            // Convert sd to decimal places.
                            sd -= x.e + 1;
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                            x.e = -sd || 0;
                        } else {
                            // Zero.
                            xc[0] = x.e = 0;
                        }
                        return x;
                    }
                    // Remove excess digits.
                    if (i == 0) {
                        xc.length = ni;
                        k = 1;
                        ni--;
                    } else {
                        xc.length = ni + 1;
                        k = pows10[LOG_BASE - i];
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                        // j > 0 means i > number of leading zeros of n.
                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }
                    // Round up?
                    if (r) {
                        for(;;){
                            // If the digit to be rounded up is in the first element of xc...
                            if (ni == 0) {
                                // i will be the length of xc[0] before k is added.
                                for(i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                                j = xc[0] += k;
                                for(k = 1; j >= 10; j /= 10, k++);
                                // if i != k the length has increased.
                                if (i != k) {
                                    x.e++;
                                    if (xc[0] == BASE) xc[0] = 1;
                                }
                                break;
                            } else {
                                xc[ni] += k;
                                if (xc[ni] != BASE) break;
                                xc[ni--] = 0;
                                k = 1;
                            }
                        }
                    }
                    // Remove trailing zeros.
                    for(i = xc.length; xc[--i] === 0; xc.pop());
                }
                // Overflow? Infinity.
                if (x.e > MAX_EXP) {
                    x.c = x.e = null;
                // Underflow? Zero.
                } else if (x.e < MIN_EXP) {
                    x.c = [
                        x.e = 0
                    ];
                }
            }
            return x;
        }
        function valueOf(n) {
            var str, e = n.e;
            if (e === null) return n.toString();
            str = coeffToString(n.c);
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');
            return n.s < 0 ? '-' + str : str;
        }
        // PROTOTYPE/INSTANCE METHODS
        /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */ P.absoluteValue = P.abs = function() {
            var x = new BigNumber(this);
            if (x.s < 0) x.s = 1;
            return x;
        };
        /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */ P.comparedTo = function(y, b) {
            return compare(this, new BigNumber(y, b));
        };
        /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.decimalPlaces = P.dp = function(dp, rm) {
            var c, n, v, x = this;
            if (dp != null) {
                intCheck(dp, 0, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(new BigNumber(x), dp + x.e + 1, rm);
            }
            if (!(c = x.c)) return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
            // Subtract the number of trailing zeros of the last number.
            if (v = c[v]) for(; v % 10 == 0; v /= 10, n--);
            if (n < 0) n = 0;
            return n;
        };
        /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */ P.dividedBy = P.div = function(y, b) {
            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */ P.dividedToIntegerBy = P.idiv = function(y, b) {
            return div(this, new BigNumber(y, b), 0, 1);
        };
        /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */ P.exponentiatedBy = P.pow = function(n, m) {
            var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
            n = new BigNumber(n);
            // Allow NaN and ±Infinity, but not other non-integers.
            if (n.c && !n.isInteger()) {
                throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));
            }
            if (m != null) m = new BigNumber(m);
            // Exponent of MAX_SAFE_INTEGER is 15.
            nIsBig = n.e > 14;
            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
                // The sign of the result of pow when x is negative depends on the evenness of n.
                // If +n overflows to ±Infinity, the evenness of n would be not be known.
                y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
                return m ? y.mod(m) : y;
            }
            nIsNeg = n.s < 0;
            if (m) {
                // x % m returns NaN if abs(m) is zero, or m is NaN.
                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);
                isModExp = !nIsNeg && x.isInteger() && m.isInteger();
                if (isModExp) x = x.mod(m);
            // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
            // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
                // If x is negative and n is odd, k = -0, else k = 0.
                k = x.s < 0 && isOdd(n) ? -0 : 0;
                // If x >= 1, k = ±Infinity.
                if (x.e > -1) k = 1 / k;
                // If n is negative return ±0, else return ±Infinity.
                return new BigNumber(nIsNeg ? 1 / k : k);
            } else if (POW_PRECISION) {
                // Truncating each coefficient array to a length of k after each multiplication
                // equates to truncating significant digits to POW_PRECISION + [28, 41],
                // i.e. there will be a minimum of 28 guard digits retained.
                k = mathceil(POW_PRECISION / LOG_BASE + 2);
            }
            if (nIsBig) {
                half = new BigNumber(0.5);
                if (nIsNeg) n.s = 1;
                nIsOdd = isOdd(n);
            } else {
                i = Math.abs(+valueOf(n));
                nIsOdd = i % 2;
            }
            y = new BigNumber(ONE);
            // Performs 54 loop iterations for n of 9007199254740991.
            for(;;){
                if (nIsOdd) {
                    y = y.times(x);
                    if (!y.c) break;
                    if (k) {
                        if (y.c.length > k) y.c.length = k;
                    } else if (isModExp) {
                        y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                    }
                }
                if (i) {
                    i = mathfloor(i / 2);
                    if (i === 0) break;
                    nIsOdd = i % 2;
                } else {
                    n = n.times(half);
                    round(n, n.e + 1, 1);
                    if (n.e > 14) {
                        nIsOdd = isOdd(n);
                    } else {
                        i = +valueOf(n);
                        if (i === 0) break;
                        nIsOdd = i % 2;
                    }
                }
                x = x.times(x);
                if (k) {
                    if (x.c && x.c.length > k) x.c.length = k;
                } else if (isModExp) {
                    x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
                }
            }
            if (isModExp) return y;
            if (nIsNeg) y = ONE.div(y);
            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */ P.integerValue = function(rm) {
            var n = new BigNumber(this);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(n, n.e + 1, rm);
        };
        /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isEqualTo = P.eq = function(y, b) {
            return compare(this, new BigNumber(y, b)) === 0;
        };
        /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */ P.isFinite = function() {
            return !!this.c;
        };
        /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isGreaterThan = P.gt = function(y, b) {
            return compare(this, new BigNumber(y, b)) > 0;
        };
        /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */ P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
        };
        /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */ P.isInteger = function() {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isLessThan = P.lt = function(y, b) {
            return compare(this, new BigNumber(y, b)) < 0;
        };
        /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */ P.isLessThanOrEqualTo = P.lte = function(y, b) {
            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        };
        /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */ P.isNaN = function() {
            return !this.s;
        };
        /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */ P.isNegative = function() {
            return this.s < 0;
        };
        /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */ P.isPositive = function() {
            return this.s > 0;
        };
        /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */ P.isZero = function() {
            return !!this.c && this.c[0] == 0;
        };
        /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */ P.minus = function(y, b) {
            var i, j, t, xLTy, x = this, a = x.s;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.plus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Either Infinity?
                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);
                // Either zero?
                if (!xc[0] || !yc[0]) {
                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                    ROUNDING_MODE == 3 ? -0 : 0);
                }
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Determine which is the bigger number.
            if (a = xe - ye) {
                if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                } else {
                    ye = xe;
                    t = yc;
                }
                t.reverse();
                // Prepend zeros to equalise exponents.
                for(b = a; b--; t.push(0));
                t.reverse();
            } else {
                // Exponents equal. Check digit by digit.
                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
                for(a = b = 0; b < j; b++){
                    if (xc[b] != yc[b]) {
                        xLTy = xc[b] < yc[b];
                        break;
                    }
                }
            }
            // x < y? Point xc to the array of the bigger number.
            if (xLTy) {
                t = xc;
                xc = yc;
                yc = t;
                y.s = -y.s;
            }
            b = (j = yc.length) - (i = xc.length);
            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if (b > 0) for(; b--; xc[i++] = 0);
            b = BASE - 1;
            // Subtract yc from xc.
            for(; j > a;){
                if (xc[--j] < yc[j]) {
                    for(i = j; i && !xc[--i]; xc[i] = b);
                    --xc[i];
                    xc[j] += BASE;
                }
                xc[j] -= yc[j];
            }
            // Remove leading zeros and adjust exponent accordingly.
            for(; xc[0] == 0; xc.splice(0, 1), --ye);
            // Zero?
            if (!xc[0]) {
                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [
                    y.e = 0
                ];
                return y;
            }
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise(y, xc, ye);
        };
        /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */ P.modulo = P.mod = function(y, b) {
            var q, s, x = this;
            y = new BigNumber(y, b);
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if (!x.c || !y.s || y.c && !y.c[0]) {
                return new BigNumber(NaN);
            // Return x if y is Infinity or x is zero.
            } else if (!y.c || x.c && !x.c[0]) {
                return new BigNumber(x);
            }
            if (MODULO_MODE == 9) {
                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div(x, y, 0, 3);
                y.s = s;
                q.s *= s;
            } else {
                q = div(x, y, 0, MODULO_MODE);
            }
            y = x.minus(q.times(y));
            // To match JavaScript %, ensure sign of zero is sign of dividend.
            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
            return y;
        };
        /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */ P.multipliedBy = P.times = function(y, b) {
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber(y, b)).c;
            // Either NaN, ±Infinity or ±0?
            if (!xc || !yc || !xc[0] || !yc[0]) {
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                    y.c = y.e = y.s = null;
                } else {
                    y.s *= x.s;
                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) {
                        y.c = y.e = null;
                    // Return ±0 if either is ±0.
                    } else {
                        y.c = [
                            0
                        ];
                        y.e = 0;
                    }
                }
                return y;
            }
            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;
            // Ensure xc points to longer array and xcL to its length.
            if (xcL < ycL) {
                zc = xc;
                xc = yc;
                yc = zc;
                i = xcL;
                xcL = ycL;
                ycL = i;
            }
            // Initialise the result array with zeros.
            for(i = xcL + ycL, zc = []; i--; zc.push(0));
            base = BASE;
            sqrtBase = SQRT_BASE;
            for(i = ycL; --i >= 0;){
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;
                for(k = xcL, j = i + k; j > i;){
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                }
                zc[j] = c;
            }
            if (c) {
                ++e;
            } else {
                zc.splice(0, 1);
            }
            return normalise(y, zc, e);
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */ P.negated = function() {
            var x = new BigNumber(this);
            x.s = -x.s || null;
            return x;
        };
        /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */ P.plus = function(y, b) {
            var t, x = this, a = x.s;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.minus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Return ±Infinity if either ±Infinity.
                if (!xc || !yc) return new BigNumber(a / 0);
                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if (a = xe - ye) {
                if (a > 0) {
                    ye = xe;
                    t = yc;
                } else {
                    a = -a;
                    t = xc;
                }
                t.reverse();
                for(; a--; t.push(0));
                t.reverse();
            }
            a = xc.length;
            b = yc.length;
            // Point xc to the longer array, and b to the shorter length.
            if (a - b < 0) {
                t = yc;
                yc = xc;
                xc = t;
                b = a;
            }
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for(a = 0; b;){
                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
            }
            if (a) {
                xc = [
                    a
                ].concat(xc);
                ++ye;
            }
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise(y, xc, ye);
        };
        /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */ P.precision = P.sd = function(sd, rm) {
            var c, n, v, x = this;
            if (sd != null && sd !== !!sd) {
                intCheck(sd, 1, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(new BigNumber(x), sd, rm);
            }
            if (!(c = x.c)) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;
            if (v = c[v]) {
                // Subtract the number of trailing zeros of the last element.
                for(; v % 10 == 0; v /= 10, n--);
                // Add the number of digits of the first element.
                for(v = c[0]; v >= 10; v /= 10, n++);
            }
            if (sd && x.e + 1 > n) n = x.e + 1;
            return n;
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */ P.shiftedBy = function(k) {
            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
            return this.times('1e' + k);
        };
        /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */ P.squareRoot = P.sqrt = function() {
            var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber('0.5');
            // Negative/NaN/Infinity/zero?
            if (s !== 1 || !c || !c[0]) {
                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            }
            // Initial estimate.
            s = Math.sqrt(+valueOf(x));
            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if (s == 0 || s == 1 / 0) {
                n = coeffToString(c);
                if ((n.length + e) % 2 == 0) n += '0';
                s = Math.sqrt(+n);
                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
                if (s == 1 / 0) {
                    n = '5e' + e;
                } else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf('e') + 1) + e;
                }
                r = new BigNumber(n);
            } else {
                r = new BigNumber(s + '');
            }
            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if (r.c[0]) {
                e = r.e;
                s = e + dp;
                if (s < 3) s = 0;
                // Newton-Raphson iteration.
                for(;;){
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));
                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                        // The exponent of r may here be one less than the final result exponent,
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                        // are indexed correctly.
                        if (r.e < e) --s;
                        n = n.slice(s - 3, s + 1);
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                        // iteration.
                        if (n == '9999' || !rep && n == '4999') {
                            // On the first iteration only, check to see if rounding up gives the
                            // exact result as the nines may infinitely repeat.
                            if (!rep) {
                                round(t, t.e + DECIMAL_PLACES + 2, 0);
                                if (t.times(t).eq(x)) {
                                    r = t;
                                    break;
                                }
                            }
                            dp += 4;
                            s += 4;
                            rep = 1;
                        } else {
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                            // result. If not, then there are further digits and m will be truthy.
                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                                // Truncate to the first rounding digit.
                                round(r, r.e + DECIMAL_PLACES + 2, 1);
                                m = !r.times(r).eq(x);
                            }
                            break;
                        }
                    }
                }
            }
            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.toExponential = function(dp, rm) {
            if (dp != null) {
                intCheck(dp, 0, MAX);
                dp++;
            }
            return format(this, dp, rm, 1);
        };
        /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.toFixed = function(dp, rm) {
            if (dp != null) {
                intCheck(dp, 0, MAX);
                dp = dp + this.e + 1;
            }
            return format(this, dp, rm);
        };
        /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */ P.toFormat = function(dp, rm, format) {
            var str, x = this;
            if (format == null) {
                if (dp != null && rm && typeof rm == 'object') {
                    format = rm;
                    rm = null;
                } else if (dp && typeof dp == 'object') {
                    format = dp;
                    dp = rm = null;
                } else {
                    format = FORMAT;
                }
            } else if (typeof format != 'object') {
                throw Error(bignumberError + 'Argument not an object: ' + format);
            }
            str = x.toFixed(dp, rm);
            if (x.c) {
                var i, arr = str.split('.'), g1 = +format.groupSize, g2 = +format.secondaryGroupSize, groupSeparator = format.groupSeparator || '', intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
                if (g2) {
                    i = g1;
                    g1 = g2;
                    g2 = i;
                    len -= i;
                }
                if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);
                    for(; i < len; i += g1)intPart += groupSeparator + intDigits.substr(i, g1);
                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = '-' + intPart;
                }
                str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;
            }
            return (format.prefix || '') + str + (format.suffix || '');
        };
        /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */ P.toFraction = function(md) {
            var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
            if (md != null) {
                n = new BigNumber(md);
                // Throw if md is less than one or is not an integer, unless it is Infinity.
                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
                    throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
                }
            }
            if (!xc) return new BigNumber(x);
            d = new BigNumber(ONE);
            n1 = d0 = new BigNumber(ONE);
            d1 = n0 = new BigNumber(ONE);
            s = coeffToString(xc);
            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber(s);
            // n0 = d1 = 0
            n0.c[0] = 0;
            for(;;){
                q = div(n, d, 0, 1);
                d2 = d0.plus(q.times(d1));
                if (d2.comparedTo(md) == 1) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus(q.times(d2 = n1));
                n0 = d2;
                d = n.minus(q.times(d2 = d));
                n = d2;
            }
            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e = e * 2;
            // Determine which fraction is closer to x, n0/d0 or n1/d1
            r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [
                n1,
                d1
            ] : [
                n0,
                d0
            ];
            MAX_EXP = exp;
            return r;
        };
        /*
     * Return the value of this BigNumber converted to a number primitive.
     */ P.toNumber = function() {
            return +valueOf(this);
        };
        /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */ P.toPrecision = function(sd, rm) {
            if (sd != null) intCheck(sd, 1, MAX);
            return format(this, sd, rm, 2);
        };
        /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */ P.toString = function(b) {
            var str, n = this, s = n.s, e = n.e;
            // Infinity or NaN?
            if (e === null) {
                if (s) {
                    str = 'Infinity';
                    if (s < 0) str = '-' + str;
                } else {
                    str = 'NaN';
                }
            } else {
                if (b == null) {
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');
                } else if (b === 10 && alphabetHasNormalDecimalDigits) {
                    n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
                    str = toFixedPoint(coeffToString(n.c), n.e, '0');
                } else {
                    intCheck(b, 2, ALPHABET.length, 'Base');
                    str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
                }
                if (s < 0 && n.c[0]) str = '-' + str;
            }
            return str;
        };
        /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */ P.valueOf = P.toJSON = function() {
            return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null) BigNumber.set(configObject);
        return BigNumber;
    }
    // PRIVATE HELPER FUNCTIONS
    // These functions don't need access to variables,
    // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.
    function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
    }
    // Return a coefficient array as a string of base 10 digits.
    function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + '';
        for(; i < j;){
            s = a[i++] + '';
            z = LOG_BASE - s.length;
            for(; z--; s = '0' + s);
            r += s;
        }
        // Determine trailing zeros.
        for(j = r.length; r.charCodeAt(--j) === 48;);
        return r.slice(0, j + 1 || 1);
    }
    // Compare the value of BigNumbers x and y.
    function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        // Either NaN?
        if (!i || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;
        // Signs differ?
        if (i != j) return i;
        a = i < 0;
        b = k == l;
        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        // Compare digit by digit.
        for(i = 0; i < j; i++)if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
    }
    /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */ function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
            throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));
        }
    }
    // Assumes finite n.
    function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
    }
    function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
    }
    function toFixedPoint(str, e, z) {
        var len, zs;
        // Negative exponent?
        if (e < 0) {
            // Prepend zeros.
            for(zs = z + '.'; ++e; zs += z);
            str = zs + str;
        // Positive exponent
        } else {
            len = str.length;
            // Append zeros.
            if (++e > len) {
                for(zs = z, e -= len; --e; zs += z);
                str += zs;
            } else if (e < len) {
                str = str.slice(0, e) + '.' + str.slice(e);
            }
        }
        return str;
    }
    // EXPORT
    BigNumber = clone();
    BigNumber['default'] = BigNumber.BigNumber = BigNumber;
    // AMD.
    if (typeof define == 'function' && define.amd) {
        ((r)=>r !== undefined && __turbopack_context__.v(r))(function() {
            return BigNumber;
        }(__turbopack_context__.r, exports, module));
    // Node.js and other environments that support module.exports.
    } else if (("TURBOPACK compile-time value", "object") != 'undefined' && module.exports) {
        module.exports = BigNumber;
    // Browser.
    } else {
        if (!globalObject) {
            globalObject = typeof self != 'undefined' && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
    }
})(this);
}}),
"[project]/node_modules/borc/src/decoder.asm.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* eslint-disable */ module.exports = function decodeAsm(stdlib, foreign, buffer) {
    'use asm';
    // -- Imports
    var heap = new stdlib.Uint8Array(buffer);
    // var log = foreign.log
    var pushInt = foreign.pushInt;
    var pushInt32 = foreign.pushInt32;
    var pushInt32Neg = foreign.pushInt32Neg;
    var pushInt64 = foreign.pushInt64;
    var pushInt64Neg = foreign.pushInt64Neg;
    var pushFloat = foreign.pushFloat;
    var pushFloatSingle = foreign.pushFloatSingle;
    var pushFloatDouble = foreign.pushFloatDouble;
    var pushTrue = foreign.pushTrue;
    var pushFalse = foreign.pushFalse;
    var pushUndefined = foreign.pushUndefined;
    var pushNull = foreign.pushNull;
    var pushInfinity = foreign.pushInfinity;
    var pushInfinityNeg = foreign.pushInfinityNeg;
    var pushNaN = foreign.pushNaN;
    var pushNaNNeg = foreign.pushNaNNeg;
    var pushArrayStart = foreign.pushArrayStart;
    var pushArrayStartFixed = foreign.pushArrayStartFixed;
    var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;
    var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;
    var pushObjectStart = foreign.pushObjectStart;
    var pushObjectStartFixed = foreign.pushObjectStartFixed;
    var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;
    var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;
    var pushByteString = foreign.pushByteString;
    var pushByteStringStart = foreign.pushByteStringStart;
    var pushUtf8String = foreign.pushUtf8String;
    var pushUtf8StringStart = foreign.pushUtf8StringStart;
    var pushSimpleUnassigned = foreign.pushSimpleUnassigned;
    var pushTagStart = foreign.pushTagStart;
    var pushTagStart4 = foreign.pushTagStart4;
    var pushTagStart8 = foreign.pushTagStart8;
    var pushTagUnassigned = foreign.pushTagUnassigned;
    var pushBreak = foreign.pushBreak;
    var pow = stdlib.Math.pow;
    // -- Constants
    // -- Mutable Variables
    var offset = 0;
    var inputLength = 0;
    var code = 0;
    // Decode a cbor string represented as Uint8Array
    // which is allocated on the heap from 0 to inputLength
    //
    // input - Int
    //
    // Returns Code - Int,
    // Success = 0
    // Error > 0
    function parse(input) {
        input = input | 0;
        offset = 0;
        inputLength = input;
        while((offset | 0) < (inputLength | 0)){
            code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;
            if ((code | 0) > 0) {
                break;
            }
        }
        return code | 0;
    }
    // -- Helper Function
    function checkOffset(n) {
        n = n | 0;
        if (((offset | 0) + (n | 0) | 0) < (inputLength | 0)) {
            return 0;
        }
        return 1;
    }
    function readUInt16(n) {
        n = n | 0;
        return heap[n | 0] << 8 | heap[n + 1 | 0] | 0;
    }
    function readUInt32(n) {
        n = n | 0;
        return heap[n | 0] << 24 | heap[n + 1 | 0] << 16 | heap[n + 2 | 0] << 8 | heap[n + 3 | 0] | 0;
    }
    // -- Initial Byte Handlers
    function INT_P(octet) {
        octet = octet | 0;
        pushInt(octet | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function UINT_P_8(octet) {
        octet = octet | 0;
        if (checkOffset(1) | 0) {
            return 1;
        }
        pushInt(heap[offset + 1 | 0] | 0);
        offset = offset + 2 | 0;
        return 0;
    }
    function UINT_P_16(octet) {
        octet = octet | 0;
        if (checkOffset(2) | 0) {
            return 1;
        }
        pushInt(readUInt16(offset + 1 | 0) | 0);
        offset = offset + 3 | 0;
        return 0;
    }
    function UINT_P_32(octet) {
        octet = octet | 0;
        if (checkOffset(4) | 0) {
            return 1;
        }
        pushInt32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
        offset = offset + 5 | 0;
        return 0;
    }
    function UINT_P_64(octet) {
        octet = octet | 0;
        if (checkOffset(8) | 0) {
            return 1;
        }
        pushInt64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
        offset = offset + 9 | 0;
        return 0;
    }
    function INT_N(octet) {
        octet = octet | 0;
        pushInt(-1 - (octet - 32 | 0) | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function UINT_N_8(octet) {
        octet = octet | 0;
        if (checkOffset(1) | 0) {
            return 1;
        }
        pushInt(-1 - (heap[offset + 1 | 0] | 0) | 0);
        offset = offset + 2 | 0;
        return 0;
    }
    function UINT_N_16(octet) {
        octet = octet | 0;
        var val = 0;
        if (checkOffset(2) | 0) {
            return 1;
        }
        val = readUInt16(offset + 1 | 0) | 0;
        pushInt(-1 - (val | 0) | 0);
        offset = offset + 3 | 0;
        return 0;
    }
    function UINT_N_32(octet) {
        octet = octet | 0;
        if (checkOffset(4) | 0) {
            return 1;
        }
        pushInt32Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
        offset = offset + 5 | 0;
        return 0;
    }
    function UINT_N_64(octet) {
        octet = octet | 0;
        if (checkOffset(8) | 0) {
            return 1;
        }
        pushInt64Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
        offset = offset + 9 | 0;
        return 0;
    }
    function BYTE_STRING(octet) {
        octet = octet | 0;
        var start = 0;
        var end = 0;
        var step = 0;
        step = octet - 64 | 0;
        if (checkOffset(step | 0) | 0) {
            return 1;
        }
        start = offset + 1 | 0;
        end = (offset + 1 | 0) + (step | 0) | 0;
        pushByteString(start | 0, end | 0);
        offset = end | 0;
        return 0;
    }
    function BYTE_STRING_8(octet) {
        octet = octet | 0;
        var start = 0;
        var end = 0;
        var length = 0;
        if (checkOffset(1) | 0) {
            return 1;
        }
        length = heap[offset + 1 | 0] | 0;
        start = offset + 2 | 0;
        end = (offset + 2 | 0) + (length | 0) | 0;
        if (checkOffset(length + 1 | 0) | 0) {
            return 1;
        }
        pushByteString(start | 0, end | 0);
        offset = end | 0;
        return 0;
    }
    function BYTE_STRING_16(octet) {
        octet = octet | 0;
        var start = 0;
        var end = 0;
        var length = 0;
        if (checkOffset(2) | 0) {
            return 1;
        }
        length = readUInt16(offset + 1 | 0) | 0;
        start = offset + 3 | 0;
        end = (offset + 3 | 0) + (length | 0) | 0;
        if (checkOffset(length + 2 | 0) | 0) {
            return 1;
        }
        pushByteString(start | 0, end | 0);
        offset = end | 0;
        return 0;
    }
    function BYTE_STRING_32(octet) {
        octet = octet | 0;
        var start = 0;
        var end = 0;
        var length = 0;
        if (checkOffset(4) | 0) {
            return 1;
        }
        length = readUInt32(offset + 1 | 0) | 0;
        start = offset + 5 | 0;
        end = (offset + 5 | 0) + (length | 0) | 0;
        if (checkOffset(length + 4 | 0) | 0) {
            return 1;
        }
        pushByteString(start | 0, end | 0);
        offset = end | 0;
        return 0;
    }
    function BYTE_STRING_64(octet) {
        // NOT IMPLEMENTED
        octet = octet | 0;
        return 1;
    }
    function BYTE_STRING_BREAK(octet) {
        octet = octet | 0;
        pushByteStringStart();
        offset = offset + 1 | 0;
        return 0;
    }
    function UTF8_STRING(octet) {
        octet = octet | 0;
        var start = 0;
        var end = 0;
        var step = 0;
        step = octet - 96 | 0;
        if (checkOffset(step | 0) | 0) {
            return 1;
        }
        start = offset + 1 | 0;
        end = (offset + 1 | 0) + (step | 0) | 0;
        pushUtf8String(start | 0, end | 0);
        offset = end | 0;
        return 0;
    }
    function UTF8_STRING_8(octet) {
        octet = octet | 0;
        var start = 0;
        var end = 0;
        var length = 0;
        if (checkOffset(1) | 0) {
            return 1;
        }
        length = heap[offset + 1 | 0] | 0;
        start = offset + 2 | 0;
        end = (offset + 2 | 0) + (length | 0) | 0;
        if (checkOffset(length + 1 | 0) | 0) {
            return 1;
        }
        pushUtf8String(start | 0, end | 0);
        offset = end | 0;
        return 0;
    }
    function UTF8_STRING_16(octet) {
        octet = octet | 0;
        var start = 0;
        var end = 0;
        var length = 0;
        if (checkOffset(2) | 0) {
            return 1;
        }
        length = readUInt16(offset + 1 | 0) | 0;
        start = offset + 3 | 0;
        end = (offset + 3 | 0) + (length | 0) | 0;
        if (checkOffset(length + 2 | 0) | 0) {
            return 1;
        }
        pushUtf8String(start | 0, end | 0);
        offset = end | 0;
        return 0;
    }
    function UTF8_STRING_32(octet) {
        octet = octet | 0;
        var start = 0;
        var end = 0;
        var length = 0;
        if (checkOffset(4) | 0) {
            return 1;
        }
        length = readUInt32(offset + 1 | 0) | 0;
        start = offset + 5 | 0;
        end = (offset + 5 | 0) + (length | 0) | 0;
        if (checkOffset(length + 4 | 0) | 0) {
            return 1;
        }
        pushUtf8String(start | 0, end | 0);
        offset = end | 0;
        return 0;
    }
    function UTF8_STRING_64(octet) {
        // NOT IMPLEMENTED
        octet = octet | 0;
        return 1;
    }
    function UTF8_STRING_BREAK(octet) {
        octet = octet | 0;
        pushUtf8StringStart();
        offset = offset + 1 | 0;
        return 0;
    }
    function ARRAY(octet) {
        octet = octet | 0;
        pushArrayStartFixed(octet - 128 | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function ARRAY_8(octet) {
        octet = octet | 0;
        if (checkOffset(1) | 0) {
            return 1;
        }
        pushArrayStartFixed(heap[offset + 1 | 0] | 0);
        offset = offset + 2 | 0;
        return 0;
    }
    function ARRAY_16(octet) {
        octet = octet | 0;
        if (checkOffset(2) | 0) {
            return 1;
        }
        pushArrayStartFixed(readUInt16(offset + 1 | 0) | 0);
        offset = offset + 3 | 0;
        return 0;
    }
    function ARRAY_32(octet) {
        octet = octet | 0;
        if (checkOffset(4) | 0) {
            return 1;
        }
        pushArrayStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
        offset = offset + 5 | 0;
        return 0;
    }
    function ARRAY_64(octet) {
        octet = octet | 0;
        if (checkOffset(8) | 0) {
            return 1;
        }
        pushArrayStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
        offset = offset + 9 | 0;
        return 0;
    }
    function ARRAY_BREAK(octet) {
        octet = octet | 0;
        pushArrayStart();
        offset = offset + 1 | 0;
        return 0;
    }
    function MAP(octet) {
        octet = octet | 0;
        var step = 0;
        step = octet - 160 | 0;
        if (checkOffset(step | 0) | 0) {
            return 1;
        }
        pushObjectStartFixed(step | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function MAP_8(octet) {
        octet = octet | 0;
        if (checkOffset(1) | 0) {
            return 1;
        }
        pushObjectStartFixed(heap[offset + 1 | 0] | 0);
        offset = offset + 2 | 0;
        return 0;
    }
    function MAP_16(octet) {
        octet = octet | 0;
        if (checkOffset(2) | 0) {
            return 1;
        }
        pushObjectStartFixed(readUInt16(offset + 1 | 0) | 0);
        offset = offset + 3 | 0;
        return 0;
    }
    function MAP_32(octet) {
        octet = octet | 0;
        if (checkOffset(4) | 0) {
            return 1;
        }
        pushObjectStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
        offset = offset + 5 | 0;
        return 0;
    }
    function MAP_64(octet) {
        octet = octet | 0;
        if (checkOffset(8) | 0) {
            return 1;
        }
        pushObjectStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
        offset = offset + 9 | 0;
        return 0;
    }
    function MAP_BREAK(octet) {
        octet = octet | 0;
        pushObjectStart();
        offset = offset + 1 | 0;
        return 0;
    }
    function TAG_KNOWN(octet) {
        octet = octet | 0;
        pushTagStart(octet - 192 | 0 | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function TAG_BIGNUM_POS(octet) {
        octet = octet | 0;
        pushTagStart(octet | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function TAG_BIGNUM_NEG(octet) {
        octet = octet | 0;
        pushTagStart(octet | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function TAG_FRAC(octet) {
        octet = octet | 0;
        pushTagStart(octet | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function TAG_BIGNUM_FLOAT(octet) {
        octet = octet | 0;
        pushTagStart(octet | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function TAG_UNASSIGNED(octet) {
        octet = octet | 0;
        pushTagStart(octet - 192 | 0 | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function TAG_BASE64_URL(octet) {
        octet = octet | 0;
        pushTagStart(octet | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function TAG_BASE64(octet) {
        octet = octet | 0;
        pushTagStart(octet | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function TAG_BASE16(octet) {
        octet = octet | 0;
        pushTagStart(octet | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function TAG_MORE_1(octet) {
        octet = octet | 0;
        if (checkOffset(1) | 0) {
            return 1;
        }
        pushTagStart(heap[offset + 1 | 0] | 0);
        offset = offset + 2 | 0;
        return 0;
    }
    function TAG_MORE_2(octet) {
        octet = octet | 0;
        if (checkOffset(2) | 0) {
            return 1;
        }
        pushTagStart(readUInt16(offset + 1 | 0) | 0);
        offset = offset + 3 | 0;
        return 0;
    }
    function TAG_MORE_4(octet) {
        octet = octet | 0;
        if (checkOffset(4) | 0) {
            return 1;
        }
        pushTagStart4(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
        offset = offset + 5 | 0;
        return 0;
    }
    function TAG_MORE_8(octet) {
        octet = octet | 0;
        if (checkOffset(8) | 0) {
            return 1;
        }
        pushTagStart8(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
        offset = offset + 9 | 0;
        return 0;
    }
    function SIMPLE_UNASSIGNED(octet) {
        octet = octet | 0;
        pushSimpleUnassigned((octet | 0) - 224 | 0);
        offset = offset + 1 | 0;
        return 0;
    }
    function SIMPLE_FALSE(octet) {
        octet = octet | 0;
        pushFalse();
        offset = offset + 1 | 0;
        return 0;
    }
    function SIMPLE_TRUE(octet) {
        octet = octet | 0;
        pushTrue();
        offset = offset + 1 | 0;
        return 0;
    }
    function SIMPLE_NULL(octet) {
        octet = octet | 0;
        pushNull();
        offset = offset + 1 | 0;
        return 0;
    }
    function SIMPLE_UNDEFINED(octet) {
        octet = octet | 0;
        pushUndefined();
        offset = offset + 1 | 0;
        return 0;
    }
    function SIMPLE_BYTE(octet) {
        octet = octet | 0;
        if (checkOffset(1) | 0) {
            return 1;
        }
        pushSimpleUnassigned(heap[offset + 1 | 0] | 0);
        offset = offset + 2 | 0;
        return 0;
    }
    function SIMPLE_FLOAT_HALF(octet) {
        octet = octet | 0;
        var f = 0;
        var g = 0;
        var sign = 1.0;
        var exp = 0.0;
        var mant = 0.0;
        var r = 0.0;
        if (checkOffset(2) | 0) {
            return 1;
        }
        f = heap[offset + 1 | 0] | 0;
        g = heap[offset + 2 | 0] | 0;
        if ((f | 0) & 0x80) {
            sign = -1.0;
        }
        exp = +(((f | 0) & 0x7C) >> 2);
        mant = +(((f | 0) & 0x03) << 8 | g);
        if (+exp == 0.0) {
            pushFloat(+(+sign * +5.9604644775390625e-8 * +mant));
        } else if (+exp == 31.0) {
            if (+sign == 1.0) {
                if (+mant > 0.0) {
                    pushNaN();
                } else {
                    pushInfinity();
                }
            } else {
                if (+mant > 0.0) {
                    pushNaNNeg();
                } else {
                    pushInfinityNeg();
                }
            }
        } else {
            pushFloat(+(+sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)));
        }
        offset = offset + 3 | 0;
        return 0;
    }
    function SIMPLE_FLOAT_SINGLE(octet) {
        octet = octet | 0;
        if (checkOffset(4) | 0) {
            return 1;
        }
        pushFloatSingle(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0);
        offset = offset + 5 | 0;
        return 0;
    }
    function SIMPLE_FLOAT_DOUBLE(octet) {
        octet = octet | 0;
        if (checkOffset(8) | 0) {
            return 1;
        }
        pushFloatDouble(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0, heap[offset + 5 | 0] | 0, heap[offset + 6 | 0] | 0, heap[offset + 7 | 0] | 0, heap[offset + 8 | 0] | 0);
        offset = offset + 9 | 0;
        return 0;
    }
    function ERROR(octet) {
        octet = octet | 0;
        return 1;
    }
    function BREAK(octet) {
        octet = octet | 0;
        pushBreak();
        offset = offset + 1 | 0;
        return 0;
    }
    // -- Jump Table
    var jumpTable = [
        // Integer 0x00..0x17 (0..23)
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        INT_P,
        // Unsigned integer (one-byte uint8_t follows)
        UINT_P_8,
        // Unsigned integer (two-byte uint16_t follows)
        UINT_P_16,
        // Unsigned integer (four-byte uint32_t follows)
        UINT_P_32,
        // Unsigned integer (eight-byte uint64_t follows)
        UINT_P_64,
        ERROR,
        ERROR,
        ERROR,
        ERROR,
        // Negative integer -1-0x00..-1-0x17 (-1..-24)
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        INT_N,
        // Negative integer -1-n (one-byte uint8_t for n follows)
        UINT_N_8,
        // Negative integer -1-n (two-byte uint16_t for n follows)
        UINT_N_16,
        // Negative integer -1-n (four-byte uint32_t for nfollows)
        UINT_N_32,
        // Negative integer -1-n (eight-byte uint64_t for n follows)
        UINT_N_64,
        ERROR,
        ERROR,
        ERROR,
        ERROR,
        // byte string (0x00..0x17 bytes follow)
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        BYTE_STRING,
        // byte string (one-byte uint8_t for n, and then n bytes follow)
        BYTE_STRING_8,
        // byte string (two-byte uint16_t for n, and then n bytes follow)
        BYTE_STRING_16,
        // byte string (four-byte uint32_t for n, and then n bytes follow)
        BYTE_STRING_32,
        // byte string (eight-byte uint64_t for n, and then n bytes follow)
        BYTE_STRING_64,
        ERROR,
        ERROR,
        ERROR,
        // byte string, byte strings follow, terminated by "break"
        BYTE_STRING_BREAK,
        // UTF-8 string (0x00..0x17 bytes follow)
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        UTF8_STRING,
        // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)
        UTF8_STRING_8,
        // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)
        UTF8_STRING_16,
        // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)
        UTF8_STRING_32,
        // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)
        UTF8_STRING_64,
        // UTF-8 string, UTF-8 strings follow, terminated by "break"
        ERROR,
        ERROR,
        ERROR,
        UTF8_STRING_BREAK,
        // array (0x00..0x17 data items follow)
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        ARRAY,
        // array (one-byte uint8_t fo, and then n data items follow)
        ARRAY_8,
        // array (two-byte uint16_t for n, and then n data items follow)
        ARRAY_16,
        // array (four-byte uint32_t for n, and then n data items follow)
        ARRAY_32,
        // array (eight-byte uint64_t for n, and then n data items follow)
        ARRAY_64,
        // array, data items follow, terminated by "break"
        ERROR,
        ERROR,
        ERROR,
        ARRAY_BREAK,
        // map (0x00..0x17 pairs of data items follow)
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        MAP,
        // map (one-byte uint8_t for n, and then n pairs of data items follow)
        MAP_8,
        // map (two-byte uint16_t for n, and then n pairs of data items follow)
        MAP_16,
        // map (four-byte uint32_t for n, and then n pairs of data items follow)
        MAP_32,
        // map (eight-byte uint64_t for n, and then n pairs of data items follow)
        MAP_64,
        ERROR,
        ERROR,
        ERROR,
        // map, pairs of data items follow, terminated by "break"
        MAP_BREAK,
        // Text-based date/time (data item follows; see Section 2.4.1)
        TAG_KNOWN,
        // Epoch-based date/time (data item follows; see Section 2.4.1)
        TAG_KNOWN,
        // Positive bignum (data item "byte string" follows)
        TAG_KNOWN,
        // Negative bignum (data item "byte string" follows)
        TAG_KNOWN,
        // Decimal Fraction (data item "array" follows; see Section 2.4.3)
        TAG_KNOWN,
        // Bigfloat (data item "array" follows; see Section 2.4.3)
        TAG_KNOWN,
        // (tagged item)
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        // Expected Conversion (data item follows; see Section 2.4.4.2)
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        TAG_UNASSIGNED,
        // (more tagged items, 1/2/4/8 bytes and then a data item follow)
        TAG_MORE_1,
        TAG_MORE_2,
        TAG_MORE_4,
        TAG_MORE_8,
        ERROR,
        ERROR,
        ERROR,
        ERROR,
        // (simple value)
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        SIMPLE_UNASSIGNED,
        // False
        SIMPLE_FALSE,
        // True
        SIMPLE_TRUE,
        // Null
        SIMPLE_NULL,
        // Undefined
        SIMPLE_UNDEFINED,
        // (simple value, one byte follows)
        SIMPLE_BYTE,
        // Half-Precision Float (two-byte IEEE 754)
        SIMPLE_FLOAT_HALF,
        // Single-Precision Float (four-byte IEEE 754)
        SIMPLE_FLOAT_SINGLE,
        // Double-Precision Float (eight-byte IEEE 754)
        SIMPLE_FLOAT_DOUBLE,
        ERROR,
        ERROR,
        ERROR,
        // "break" stop code
        BREAK // 0xff
    ];
    // --
    return {
        parse: parse
    };
};
}}),
"[project]/node_modules/borc/src/constants.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const Bignumber = __turbopack_context__.r("[project]/node_modules/bignumber.js/bignumber.js [app-client] (ecmascript)").BigNumber;
exports.MT = {
    POS_INT: 0,
    NEG_INT: 1,
    BYTE_STRING: 2,
    UTF8_STRING: 3,
    ARRAY: 4,
    MAP: 5,
    TAG: 6,
    SIMPLE_FLOAT: 7
};
exports.TAG = {
    DATE_STRING: 0,
    DATE_EPOCH: 1,
    POS_BIGINT: 2,
    NEG_BIGINT: 3,
    DECIMAL_FRAC: 4,
    BIGFLOAT: 5,
    BASE64URL_EXPECTED: 21,
    BASE64_EXPECTED: 22,
    BASE16_EXPECTED: 23,
    CBOR: 24,
    URI: 32,
    BASE64URL: 33,
    BASE64: 34,
    REGEXP: 35,
    MIME: 36
};
exports.NUMBYTES = {
    ZERO: 0,
    ONE: 24,
    TWO: 25,
    FOUR: 26,
    EIGHT: 27,
    INDEFINITE: 31
};
exports.SIMPLE = {
    FALSE: 20,
    TRUE: 21,
    NULL: 22,
    UNDEFINED: 23
};
exports.SYMS = {
    NULL: Symbol('null'),
    UNDEFINED: Symbol('undef'),
    PARENT: Symbol('parent'),
    BREAK: Symbol('break'),
    STREAM: Symbol('stream')
};
exports.SHIFT32 = Math.pow(2, 32);
exports.SHIFT16 = Math.pow(2, 16);
exports.MAX_SAFE_HIGH = 0x1fffff;
exports.NEG_ONE = new Bignumber(-1);
exports.TEN = new Bignumber(10);
exports.TWO = new Bignumber(2);
exports.PARENT = {
    ARRAY: 0,
    OBJECT: 1,
    MAP: 2,
    TAG: 3,
    BYTE_STRING: 4,
    UTF8_STRING: 5
};
}}),
"[project]/node_modules/borc/src/utils.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const { Buffer } = __turbopack_context__.r("[project]/node_modules/borc/node_modules/buffer/index.js [app-client] (ecmascript)");
const Bignumber = __turbopack_context__.r("[project]/node_modules/bignumber.js/bignumber.js [app-client] (ecmascript)").BigNumber;
const constants = __turbopack_context__.r("[project]/node_modules/borc/src/constants.js [app-client] (ecmascript)");
const SHIFT32 = constants.SHIFT32;
const SHIFT16 = constants.SHIFT16;
const MAX_SAFE_HIGH = 0x1fffff;
exports.parseHalf = function parseHalf(buf) {
    var exp, mant, sign;
    sign = buf[0] & 0x80 ? -1 : 1;
    exp = (buf[0] & 0x7C) >> 2;
    mant = (buf[0] & 0x03) << 8 | buf[1];
    if (!exp) {
        return sign * 5.9604644775390625e-8 * mant;
    } else if (exp === 0x1f) {
        return sign * (mant ? 0 / 0 : 2e308);
    } else {
        return sign * Math.pow(2, exp - 25) * (1024 + mant);
    }
};
function toHex(n) {
    if (n < 16) {
        return '0' + n.toString(16);
    }
    return n.toString(16);
}
exports.arrayBufferToBignumber = function(buf) {
    const len = buf.byteLength;
    let res = '';
    for(let i = 0; i < len; i++){
        res += toHex(buf[i]);
    }
    return new Bignumber(res, 16);
};
// convert an Object into a Map
exports.buildMap = (obj)=>{
    const res = new Map();
    const keys = Object.keys(obj);
    const length = keys.length;
    for(let i = 0; i < length; i++){
        res.set(keys[i], obj[keys[i]]);
    }
    return res;
};
exports.buildInt32 = (f, g)=>{
    return f * SHIFT16 + g;
};
exports.buildInt64 = (f1, f2, g1, g2)=>{
    const f = exports.buildInt32(f1, f2);
    const g = exports.buildInt32(g1, g2);
    if (f > MAX_SAFE_HIGH) {
        return new Bignumber(f).times(SHIFT32).plus(g);
    } else {
        return f * SHIFT32 + g;
    }
};
exports.writeHalf = function writeHalf(buf, half) {
    // assume 0, -0, NaN, Infinity, and -Infinity have already been caught
    // HACK: everyone settle in.  This isn't going to be pretty.
    // Translate cn-cbor's C code (from Carsten Borman):
    // uint32_t be32;
    // uint16_t be16, u16;
    // union {
    //   float f;
    //   uint32_t u;
    // } u32;
    // u32.f = float_val;
    const u32 = Buffer.allocUnsafe(4);
    u32.writeFloatBE(half, 0);
    const u = u32.readUInt32BE(0);
    // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */
    // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion
    if ((u & 0x1FFF) !== 0) {
        return false;
    }
    //   int s16 = (u32.u >> 16) & 0x8000;
    //   int exp = (u32.u >> 23) & 0xff;
    //   int mant = u32.u & 0x7fffff;
    var s16 = u >> 16 & 0x8000 // top bit is sign
    ;
    const exp = u >> 23 & 0xff // then 5 bits of exponent
    ;
    const mant = u & 0x7fffff;
    //   if (exp == 0 && mant == 0)
    //     ;              /* 0.0, -0.0 */
    // hildjj: zeros already handled.  Assert if you don't believe me.
    //   else if (exp >= 113 && exp <= 142) /* normalized */
    //     s16 += ((exp - 112) << 10) + (mant >> 13);
    if (exp >= 113 && exp <= 142) {
        s16 += (exp - 112 << 10) + (mant >> 13);
    //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */
    //     if (mant & ((1 << (126 - exp)) - 1))
    //       goto float32;         /* loss of precision */
    //     s16 += ((mant + 0x800000) >> (126 - exp));
    } else if (exp >= 103 && exp < 113) {
        if (mant & (1 << 126 - exp) - 1) {
            return false;
        }
        s16 += mant + 0x800000 >> 126 - exp;
    //   } else if (exp == 255 && mant == 0) { /* Inf */
    //     s16 += 0x7c00;
    // hildjj: Infinity already handled
    //   } else
    //     goto float32;           /* loss of range */
    } else {
        return false;
    }
    //   ensure_writable(3);
    //   u16 = s16;
    //   be16 = hton16p((const uint8_t*)&u16);
    buf.writeUInt16BE(s16, 0);
    return true;
};
exports.keySorter = function(a, b) {
    var lenA = a[0].byteLength;
    var lenB = b[0].byteLength;
    if (lenA > lenB) {
        return 1;
    }
    if (lenB > lenA) {
        return -1;
    }
    return a[0].compare(b[0]);
};
// Adapted from http://www.2ality.com/2012/03/signedzero.html
exports.isNegativeZero = (x)=>{
    return x === 0 && 1 / x < 0;
};
exports.nextPowerOf2 = (n)=>{
    let count = 0;
    // First n in the below condition is for
    // the case where n is 0
    if (n && !(n & n - 1)) {
        return n;
    }
    while(n !== 0){
        n >>= 1;
        count += 1;
    }
    return 1 << count;
};
}}),
"[project]/node_modules/borc/src/simple.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const constants = __turbopack_context__.r("[project]/node_modules/borc/src/constants.js [app-client] (ecmascript)");
const MT = constants.MT;
const SIMPLE = constants.SIMPLE;
const SYMS = constants.SYMS;
/**
 * A CBOR Simple Value that does not map onto a known constant.
 */ class Simple {
    /**
   * Creates an instance of Simple.
   *
   * @param {integer} value - the simple value's integer value
   */ constructor(value){
        if (typeof value !== 'number') {
            throw new Error('Invalid Simple type: ' + typeof value);
        }
        if (value < 0 || value > 255 || (value | 0) !== value) {
            throw new Error('value must be a small positive integer: ' + value);
        }
        this.value = value;
    }
    /**
   * Debug string for simple value
   *
   * @returns {string} simple(value)
   */ toString() {
        return 'simple(' + this.value + ')';
    }
    /**
   * Debug string for simple value
   *
   * @returns {string} simple(value)
   */ inspect() {
        return 'simple(' + this.value + ')';
    }
    /**
   * Push the simple value onto the CBOR stream
   *
   * @param {cbor.Encoder} gen The generator to push onto
   * @returns {number}
   */ encodeCBOR(gen) {
        return gen._pushInt(this.value, MT.SIMPLE_FLOAT);
    }
    /**
   * Is the given object a Simple?
   *
   * @param {any} obj - object to test
   * @returns {bool} - is it Simple?
   */ static isSimple(obj) {
        return obj instanceof Simple;
    }
    /**
   * Decode from the CBOR additional information into a JavaScript value.
   * If the CBOR item has no parent, return a "safe" symbol instead of
   * `null` or `undefined`, so that the value can be passed through a
   * stream in object mode.
   *
   * @param {Number} val - the CBOR additional info to convert
   * @param {bool} hasParent - Does the CBOR item have a parent?
   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value
   */ static decode(val, hasParent) {
        if (hasParent == null) {
            hasParent = true;
        }
        switch(val){
            case SIMPLE.FALSE:
                return false;
            case SIMPLE.TRUE:
                return true;
            case SIMPLE.NULL:
                if (hasParent) {
                    return null;
                } else {
                    return SYMS.NULL;
                }
            case SIMPLE.UNDEFINED:
                if (hasParent) {
                    return undefined;
                } else {
                    return SYMS.UNDEFINED;
                }
            case -1:
                if (!hasParent) {
                    throw new Error('Invalid BREAK');
                }
                return SYMS.BREAK;
            default:
                return new Simple(val);
        }
    }
}
module.exports = Simple;
}}),
"[project]/node_modules/borc/src/tagged.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/**
 * A CBOR tagged item, where the tag does not have semantics specified at the
 * moment, or those semantics threw an error during parsing. Typically this will
 * be an extension point you're not yet expecting.
 */ class Tagged {
    /**
   * Creates an instance of Tagged.
   *
   * @param {Number} tag - the number of the tag
   * @param {any} value - the value inside the tag
   * @param {Error} err - the error that was thrown parsing the tag, or null
   */ constructor(tag, value, err){
        this.tag = tag;
        this.value = value;
        this.err = err;
        if (typeof this.tag !== 'number') {
            throw new Error('Invalid tag type (' + typeof this.tag + ')');
        }
        if (this.tag < 0 || (this.tag | 0) !== this.tag) {
            throw new Error('Tag must be a positive integer: ' + this.tag);
        }
    }
    /**
   * Convert to a String
   *
   * @returns {String} string of the form '1(2)'
   */ toString() {
        return `${this.tag}(${JSON.stringify(this.value)})`;
    }
    /**
   * Push the simple value onto the CBOR stream
   *
   * @param {cbor.Encoder} gen The generator to push onto
   * @returns {number}
   */ encodeCBOR(gen) {
        gen._pushTag(this.tag);
        return gen.pushAny(this.value);
    }
    /**
   * If we have a converter for this type, do the conversion.  Some converters
   * are built-in.  Additional ones can be passed in.  If you want to remove
   * a built-in converter, pass a converter in whose value is 'null' instead
   * of a function.
   *
   * @param {Object} converters - keys in the object are a tag number, the value
   *   is a function that takes the decoded CBOR and returns a JavaScript value
   *   of the appropriate type.  Throw an exception in the function on errors.
   * @returns {any} - the converted item
   */ convert(converters) {
        var er, f;
        f = converters != null ? converters[this.tag] : undefined;
        if (typeof f !== 'function') {
            f = Tagged['_tag' + this.tag];
            if (typeof f !== 'function') {
                return this;
            }
        }
        try {
            return f.call(Tagged, this.value);
        } catch (error) {
            er = error;
            this.err = er;
            return this;
        }
    }
}
module.exports = Tagged;
}}),
"[project]/node_modules/borc/src/decoder.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const { Buffer } = __turbopack_context__.r("[project]/node_modules/borc/node_modules/buffer/index.js [app-client] (ecmascript)");
const ieee754 = __turbopack_context__.r("[project]/node_modules/ieee754/index.js [app-client] (ecmascript)");
const Bignumber = __turbopack_context__.r("[project]/node_modules/bignumber.js/bignumber.js [app-client] (ecmascript)").BigNumber;
const parser = __turbopack_context__.r("[project]/node_modules/borc/src/decoder.asm.js [app-client] (ecmascript)");
const utils = __turbopack_context__.r("[project]/node_modules/borc/src/utils.js [app-client] (ecmascript)");
const c = __turbopack_context__.r("[project]/node_modules/borc/src/constants.js [app-client] (ecmascript)");
const Simple = __turbopack_context__.r("[project]/node_modules/borc/src/simple.js [app-client] (ecmascript)");
const Tagged = __turbopack_context__.r("[project]/node_modules/borc/src/tagged.js [app-client] (ecmascript)");
const { URL } = __turbopack_context__.r("[project]/node_modules/iso-url/index.js [app-client] (ecmascript)");
/**
 * Transform binary cbor data into JavaScript objects.
 */ class Decoder {
    /**
   * @param {Object} [opts={}]
   * @param {number} [opts.size=65536] - Size of the allocated heap.
   */ constructor(opts){
        opts = opts || {};
        if (!opts.size || opts.size < 0x10000) {
            opts.size = 0x10000;
        } else {
            // Ensure the size is a power of 2
            opts.size = utils.nextPowerOf2(opts.size);
        }
        // Heap use to share the input with the parser
        this._heap = new ArrayBuffer(opts.size);
        this._heap8 = new Uint8Array(this._heap);
        this._buffer = Buffer.from(this._heap);
        this._reset();
        // Known tags
        this._knownTags = Object.assign({
            0: (val)=>new Date(val),
            1: (val)=>new Date(val * 1000),
            2: (val)=>utils.arrayBufferToBignumber(val),
            3: (val)=>c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),
            4: (v)=>{
                // const v = new Uint8Array(val)
                return c.TEN.pow(v[0]).times(v[1]);
            },
            5: (v)=>{
                // const v = new Uint8Array(val)
                return c.TWO.pow(v[0]).times(v[1]);
            },
            32: (val)=>new URL(val),
            35: (val)=>new RegExp(val)
        }, opts.tags);
        // Initialize asm based parser
        this.parser = parser(global, {
            // eslint-disable-next-line no-console
            log: console.log.bind(console),
            pushInt: this.pushInt.bind(this),
            pushInt32: this.pushInt32.bind(this),
            pushInt32Neg: this.pushInt32Neg.bind(this),
            pushInt64: this.pushInt64.bind(this),
            pushInt64Neg: this.pushInt64Neg.bind(this),
            pushFloat: this.pushFloat.bind(this),
            pushFloatSingle: this.pushFloatSingle.bind(this),
            pushFloatDouble: this.pushFloatDouble.bind(this),
            pushTrue: this.pushTrue.bind(this),
            pushFalse: this.pushFalse.bind(this),
            pushUndefined: this.pushUndefined.bind(this),
            pushNull: this.pushNull.bind(this),
            pushInfinity: this.pushInfinity.bind(this),
            pushInfinityNeg: this.pushInfinityNeg.bind(this),
            pushNaN: this.pushNaN.bind(this),
            pushNaNNeg: this.pushNaNNeg.bind(this),
            pushArrayStart: this.pushArrayStart.bind(this),
            pushArrayStartFixed: this.pushArrayStartFixed.bind(this),
            pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),
            pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),
            pushObjectStart: this.pushObjectStart.bind(this),
            pushObjectStartFixed: this.pushObjectStartFixed.bind(this),
            pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),
            pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),
            pushByteString: this.pushByteString.bind(this),
            pushByteStringStart: this.pushByteStringStart.bind(this),
            pushUtf8String: this.pushUtf8String.bind(this),
            pushUtf8StringStart: this.pushUtf8StringStart.bind(this),
            pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),
            pushTagUnassigned: this.pushTagUnassigned.bind(this),
            pushTagStart: this.pushTagStart.bind(this),
            pushTagStart4: this.pushTagStart4.bind(this),
            pushTagStart8: this.pushTagStart8.bind(this),
            pushBreak: this.pushBreak.bind(this)
        }, this._heap);
    }
    get _depth() {
        return this._parents.length;
    }
    get _currentParent() {
        return this._parents[this._depth - 1];
    }
    get _ref() {
        return this._currentParent.ref;
    }
    // Finish the current parent
    _closeParent() {
        var p = this._parents.pop();
        if (p.length > 0) {
            throw new Error(`Missing ${p.length} elements`);
        }
        switch(p.type){
            case c.PARENT.TAG:
                this._push(this.createTag(p.ref[0], p.ref[1]));
                break;
            case c.PARENT.BYTE_STRING:
                this._push(this.createByteString(p.ref, p.length));
                break;
            case c.PARENT.UTF8_STRING:
                this._push(this.createUtf8String(p.ref, p.length));
                break;
            case c.PARENT.MAP:
                if (p.values % 2 > 0) {
                    throw new Error('Odd number of elements in the map');
                }
                this._push(this.createMap(p.ref, p.length));
                break;
            case c.PARENT.OBJECT:
                if (p.values % 2 > 0) {
                    throw new Error('Odd number of elements in the map');
                }
                this._push(this.createObject(p.ref, p.length));
                break;
            case c.PARENT.ARRAY:
                this._push(this.createArray(p.ref, p.length));
                break;
            default:
                break;
        }
        if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {
            this._dec();
        }
    }
    // Reduce the expected length of the current parent by one
    _dec() {
        const p = this._currentParent;
        // The current parent does not know the epxected child length
        if (p.length < 0) {
            return;
        }
        p.length--;
        // All children were seen, we can close the current parent
        if (p.length === 0) {
            this._closeParent();
        }
    }
    // Push any value to the current parent
    _push(val, hasChildren) {
        const p = this._currentParent;
        p.values++;
        switch(p.type){
            case c.PARENT.ARRAY:
            case c.PARENT.BYTE_STRING:
            case c.PARENT.UTF8_STRING:
                if (p.length > -1) {
                    this._ref[this._ref.length - p.length] = val;
                } else {
                    this._ref.push(val);
                }
                this._dec();
                break;
            case c.PARENT.OBJECT:
                if (p.tmpKey != null) {
                    this._ref[p.tmpKey] = val;
                    p.tmpKey = null;
                    this._dec();
                } else {
                    p.tmpKey = val;
                    if (typeof p.tmpKey !== 'string') {
                        // too bad, convert to a Map
                        p.type = c.PARENT.MAP;
                        p.ref = utils.buildMap(p.ref);
                    }
                }
                break;
            case c.PARENT.MAP:
                if (p.tmpKey != null) {
                    this._ref.set(p.tmpKey, val);
                    p.tmpKey = null;
                    this._dec();
                } else {
                    p.tmpKey = val;
                }
                break;
            case c.PARENT.TAG:
                this._ref.push(val);
                if (!hasChildren) {
                    this._dec();
                }
                break;
            default:
                throw new Error('Unknown parent type');
        }
    }
    // Create a new parent in the parents list
    _createParent(obj, type, len) {
        this._parents[this._depth] = {
            type: type,
            length: len,
            ref: obj,
            values: 0,
            tmpKey: null
        };
    }
    // Reset all state back to the beginning, also used for initiatlization
    _reset() {
        this._res = [];
        this._parents = [
            {
                type: c.PARENT.ARRAY,
                length: -1,
                ref: this._res,
                values: 0,
                tmpKey: null
            }
        ];
    }
    // -- Interface to customize deoding behaviour
    createTag(tagNumber, value) {
        const typ = this._knownTags[tagNumber];
        if (!typ) {
            return new Tagged(tagNumber, value);
        }
        return typ(value);
    }
    createMap(obj, len) {
        return obj;
    }
    createObject(obj, len) {
        return obj;
    }
    createArray(arr, len) {
        return arr;
    }
    createByteString(raw, len) {
        return Buffer.concat(raw);
    }
    createByteStringFromHeap(start, end) {
        if (start === end) {
            return Buffer.alloc(0);
        }
        return Buffer.from(this._heap.slice(start, end));
    }
    createInt(val) {
        return val;
    }
    createInt32(f, g) {
        return utils.buildInt32(f, g);
    }
    createInt64(f1, f2, g1, g2) {
        return utils.buildInt64(f1, f2, g1, g2);
    }
    createFloat(val) {
        return val;
    }
    createFloatSingle(a, b, c, d) {
        return ieee754.read([
            a,
            b,
            c,
            d
        ], 0, false, 23, 4);
    }
    createFloatDouble(a, b, c, d, e, f, g, h) {
        return ieee754.read([
            a,
            b,
            c,
            d,
            e,
            f,
            g,
            h
        ], 0, false, 52, 8);
    }
    createInt32Neg(f, g) {
        return -1 - utils.buildInt32(f, g);
    }
    createInt64Neg(f1, f2, g1, g2) {
        const f = utils.buildInt32(f1, f2);
        const g = utils.buildInt32(g1, g2);
        if (f > c.MAX_SAFE_HIGH) {
            return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g));
        }
        return -1 - (f * c.SHIFT32 + g);
    }
    createTrue() {
        return true;
    }
    createFalse() {
        return false;
    }
    createNull() {
        return null;
    }
    createUndefined() {
        return undefined;
    }
    createInfinity() {
        return Infinity;
    }
    createInfinityNeg() {
        return -Infinity;
    }
    createNaN() {
        return NaN;
    }
    createNaNNeg() {
        return -NaN;
    }
    createUtf8String(raw, len) {
        return raw.join('');
    }
    createUtf8StringFromHeap(start, end) {
        if (start === end) {
            return '';
        }
        return this._buffer.toString('utf8', start, end);
    }
    createSimpleUnassigned(val) {
        return new Simple(val);
    }
    // -- Interface for decoder.asm.js
    pushInt(val) {
        this._push(this.createInt(val));
    }
    pushInt32(f, g) {
        this._push(this.createInt32(f, g));
    }
    pushInt64(f1, f2, g1, g2) {
        this._push(this.createInt64(f1, f2, g1, g2));
    }
    pushFloat(val) {
        this._push(this.createFloat(val));
    }
    pushFloatSingle(a, b, c, d) {
        this._push(this.createFloatSingle(a, b, c, d));
    }
    pushFloatDouble(a, b, c, d, e, f, g, h) {
        this._push(this.createFloatDouble(a, b, c, d, e, f, g, h));
    }
    pushInt32Neg(f, g) {
        this._push(this.createInt32Neg(f, g));
    }
    pushInt64Neg(f1, f2, g1, g2) {
        this._push(this.createInt64Neg(f1, f2, g1, g2));
    }
    pushTrue() {
        this._push(this.createTrue());
    }
    pushFalse() {
        this._push(this.createFalse());
    }
    pushNull() {
        this._push(this.createNull());
    }
    pushUndefined() {
        this._push(this.createUndefined());
    }
    pushInfinity() {
        this._push(this.createInfinity());
    }
    pushInfinityNeg() {
        this._push(this.createInfinityNeg());
    }
    pushNaN() {
        this._push(this.createNaN());
    }
    pushNaNNeg() {
        this._push(this.createNaNNeg());
    }
    pushArrayStart() {
        this._createParent([], c.PARENT.ARRAY, -1);
    }
    pushArrayStartFixed(len) {
        this._createArrayStartFixed(len);
    }
    pushArrayStartFixed32(len1, len2) {
        const len = utils.buildInt32(len1, len2);
        this._createArrayStartFixed(len);
    }
    pushArrayStartFixed64(len1, len2, len3, len4) {
        const len = utils.buildInt64(len1, len2, len3, len4);
        this._createArrayStartFixed(len);
    }
    pushObjectStart() {
        this._createObjectStartFixed(-1);
    }
    pushObjectStartFixed(len) {
        this._createObjectStartFixed(len);
    }
    pushObjectStartFixed32(len1, len2) {
        const len = utils.buildInt32(len1, len2);
        this._createObjectStartFixed(len);
    }
    pushObjectStartFixed64(len1, len2, len3, len4) {
        const len = utils.buildInt64(len1, len2, len3, len4);
        this._createObjectStartFixed(len);
    }
    pushByteStringStart() {
        this._parents[this._depth] = {
            type: c.PARENT.BYTE_STRING,
            length: -1,
            ref: [],
            values: 0,
            tmpKey: null
        };
    }
    pushByteString(start, end) {
        this._push(this.createByteStringFromHeap(start, end));
    }
    pushUtf8StringStart() {
        this._parents[this._depth] = {
            type: c.PARENT.UTF8_STRING,
            length: -1,
            ref: [],
            values: 0,
            tmpKey: null
        };
    }
    pushUtf8String(start, end) {
        this._push(this.createUtf8StringFromHeap(start, end));
    }
    pushSimpleUnassigned(val) {
        this._push(this.createSimpleUnassigned(val));
    }
    pushTagStart(tag) {
        this._parents[this._depth] = {
            type: c.PARENT.TAG,
            length: 1,
            ref: [
                tag
            ]
        };
    }
    pushTagStart4(f, g) {
        this.pushTagStart(utils.buildInt32(f, g));
    }
    pushTagStart8(f1, f2, g1, g2) {
        this.pushTagStart(utils.buildInt64(f1, f2, g1, g2));
    }
    pushTagUnassigned(tagNumber) {
        this._push(this.createTag(tagNumber));
    }
    pushBreak() {
        if (this._currentParent.length > -1) {
            throw new Error('Unexpected break');
        }
        this._closeParent();
    }
    _createObjectStartFixed(len) {
        if (len === 0) {
            this._push(this.createObject({}));
            return;
        }
        this._createParent({}, c.PARENT.OBJECT, len);
    }
    _createArrayStartFixed(len) {
        if (len === 0) {
            this._push(this.createArray([]));
            return;
        }
        this._createParent(new Array(len), c.PARENT.ARRAY, len);
    }
    _decode(input) {
        if (input.byteLength === 0) {
            throw new Error('Input too short');
        }
        this._reset();
        this._heap8.set(input);
        const code = this.parser.parse(input.byteLength);
        if (this._depth > 1) {
            while(this._currentParent.length === 0){
                this._closeParent();
            }
            if (this._depth > 1) {
                throw new Error('Undeterminated nesting');
            }
        }
        if (code > 0) {
            throw new Error('Failed to parse');
        }
        if (this._res.length === 0) {
            throw new Error('No valid result');
        }
    }
    // -- Public Interface
    decodeFirst(input) {
        this._decode(input);
        return this._res[0];
    }
    decodeAll(input) {
        this._decode(input);
        return this._res;
    }
    /**
   * Decode the first cbor object.
   *
   * @param {Buffer|string} input
   * @param {string} [enc='hex'] - Encoding used if a string is passed.
   * @returns {*}
   */ static decode(input, enc) {
        if (typeof input === 'string') {
            input = Buffer.from(input, enc || 'hex');
        }
        const dec = new Decoder({
            size: input.length
        });
        return dec.decodeFirst(input);
    }
    /**
   * Decode all cbor objects.
   *
   * @param {Buffer|string} input
   * @param {string} [enc='hex'] - Encoding used if a string is passed.
   * @returns {Array<*>}
   */ static decodeAll(input, enc) {
        if (typeof input === 'string') {
            input = Buffer.from(input, enc || 'hex');
        }
        const dec = new Decoder({
            size: input.length
        });
        return dec.decodeAll(input);
    }
}
Decoder.decodeFirst = Decoder.decode;
module.exports = Decoder;
}}),
"[project]/node_modules/borc/src/diagnose.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const { Buffer } = __turbopack_context__.r("[project]/node_modules/borc/node_modules/buffer/index.js [app-client] (ecmascript)");
const Decoder = __turbopack_context__.r("[project]/node_modules/borc/src/decoder.js [app-client] (ecmascript)");
const utils = __turbopack_context__.r("[project]/node_modules/borc/src/utils.js [app-client] (ecmascript)");
/**
 * Output the diagnostic format from a stream of CBOR bytes.
 *
 */ class Diagnose extends Decoder {
    createTag(tagNumber, value) {
        return `${tagNumber}(${value})`;
    }
    createInt(val) {
        return super.createInt(val).toString();
    }
    createInt32(f, g) {
        return super.createInt32(f, g).toString();
    }
    createInt64(f1, f2, g1, g2) {
        return super.createInt64(f1, f2, g1, g2).toString();
    }
    createInt32Neg(f, g) {
        return super.createInt32Neg(f, g).toString();
    }
    createInt64Neg(f1, f2, g1, g2) {
        return super.createInt64Neg(f1, f2, g1, g2).toString();
    }
    createTrue() {
        return 'true';
    }
    createFalse() {
        return 'false';
    }
    createFloat(val) {
        const fl = super.createFloat(val);
        if (utils.isNegativeZero(val)) {
            return '-0_1';
        }
        return `${fl}_1`;
    }
    createFloatSingle(a, b, c, d) {
        const fl = super.createFloatSingle(a, b, c, d);
        return `${fl}_2`;
    }
    createFloatDouble(a, b, c, d, e, f, g, h) {
        const fl = super.createFloatDouble(a, b, c, d, e, f, g, h);
        return `${fl}_3`;
    }
    createByteString(raw, len) {
        const val = raw.join(', ');
        if (len === -1) {
            return `(_ ${val})`;
        }
        return `h'${val}`;
    }
    createByteStringFromHeap(start, end) {
        const val = Buffer.from(super.createByteStringFromHeap(start, end)).toString('hex');
        return `h'${val}'`;
    }
    createInfinity() {
        return 'Infinity_1';
    }
    createInfinityNeg() {
        return '-Infinity_1';
    }
    createNaN() {
        return 'NaN_1';
    }
    createNaNNeg() {
        return '-NaN_1';
    }
    createNull() {
        return 'null';
    }
    createUndefined() {
        return 'undefined';
    }
    createSimpleUnassigned(val) {
        return `simple(${val})`;
    }
    createArray(arr, len) {
        const val = super.createArray(arr, len);
        if (len === -1) {
            // indefinite
            return `[_ ${val.join(', ')}]`;
        }
        return `[${val.join(', ')}]`;
    }
    createMap(map, len) {
        const val = super.createMap(map);
        const list = Array.from(val.keys()).reduce(collectObject(val), '');
        if (len === -1) {
            return `{_ ${list}}`;
        }
        return `{${list}}`;
    }
    createObject(obj, len) {
        const val = super.createObject(obj);
        const map = Object.keys(val).reduce(collectObject(val), '');
        if (len === -1) {
            return `{_ ${map}}`;
        }
        return `{${map}}`;
    }
    createUtf8String(raw, len) {
        const val = raw.join(', ');
        if (len === -1) {
            return `(_ ${val})`;
        }
        return `"${val}"`;
    }
    createUtf8StringFromHeap(start, end) {
        const val = Buffer.from(super.createUtf8StringFromHeap(start, end)).toString('utf8');
        return `"${val}"`;
    }
    static diagnose(input, enc) {
        if (typeof input === 'string') {
            input = Buffer.from(input, enc || 'hex');
        }
        const dec = new Diagnose();
        return dec.decodeFirst(input);
    }
}
module.exports = Diagnose;
function collectObject(val) {
    return (acc, key)=>{
        if (acc) {
            return `${acc}, ${key}: ${val[key]}`;
        }
        return `${key}: ${val[key]}`;
    };
}
}}),
"[project]/node_modules/borc/src/encoder.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const { Buffer } = __turbopack_context__.r("[project]/node_modules/borc/node_modules/buffer/index.js [app-client] (ecmascript)");
const { URL } = __turbopack_context__.r("[project]/node_modules/iso-url/index.js [app-client] (ecmascript)");
const Bignumber = __turbopack_context__.r("[project]/node_modules/bignumber.js/bignumber.js [app-client] (ecmascript)").BigNumber;
const utils = __turbopack_context__.r("[project]/node_modules/borc/src/utils.js [app-client] (ecmascript)");
const constants = __turbopack_context__.r("[project]/node_modules/borc/src/constants.js [app-client] (ecmascript)");
const MT = constants.MT;
const NUMBYTES = constants.NUMBYTES;
const SHIFT32 = constants.SHIFT32;
const SYMS = constants.SYMS;
const TAG = constants.TAG;
const HALF = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.TWO;
const FLOAT = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.FOUR;
const DOUBLE = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.EIGHT;
const TRUE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.TRUE;
const FALSE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.FALSE;
const UNDEFINED = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.UNDEFINED;
const NULL = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.NULL;
const MAXINT_BN = new Bignumber('0x20000000000000');
const BUF_NAN = Buffer.from('f97e00', 'hex');
const BUF_INF_NEG = Buffer.from('f9fc00', 'hex');
const BUF_INF_POS = Buffer.from('f97c00', 'hex');
function toType(obj) {
    // [object Type]
    // --------8---1
    return ({}).toString.call(obj).slice(8, -1);
}
/**
 * Transform JavaScript values into CBOR bytes
 *
 */ class Encoder {
    /**
   * @param {Object} [options={}]
   * @param {function(Buffer)} options.stream
   */ constructor(options){
        options = options || {};
        this.streaming = typeof options.stream === 'function';
        this.onData = options.stream;
        this.semanticTypes = [
            [
                URL,
                this._pushUrl
            ],
            [
                Bignumber,
                this._pushBigNumber
            ]
        ];
        const addTypes = options.genTypes || [];
        const len = addTypes.length;
        for(let i = 0; i < len; i++){
            this.addSemanticType(addTypes[i][0], addTypes[i][1]);
        }
        this._reset();
    }
    addSemanticType(type, fun) {
        const len = this.semanticTypes.length;
        for(let i = 0; i < len; i++){
            const typ = this.semanticTypes[i][0];
            if (typ === type) {
                const old = this.semanticTypes[i][1];
                this.semanticTypes[i][1] = fun;
                return old;
            }
        }
        this.semanticTypes.push([
            type,
            fun
        ]);
        return null;
    }
    push(val) {
        if (!val) {
            return true;
        }
        this.result[this.offset] = val;
        this.resultMethod[this.offset] = 0;
        this.resultLength[this.offset] = val.length;
        this.offset++;
        if (this.streaming) {
            this.onData(this.finalize());
        }
        return true;
    }
    pushWrite(val, method, len) {
        this.result[this.offset] = val;
        this.resultMethod[this.offset] = method;
        this.resultLength[this.offset] = len;
        this.offset++;
        if (this.streaming) {
            this.onData(this.finalize());
        }
        return true;
    }
    _pushUInt8(val) {
        return this.pushWrite(val, 1, 1);
    }
    _pushUInt16BE(val) {
        return this.pushWrite(val, 2, 2);
    }
    _pushUInt32BE(val) {
        return this.pushWrite(val, 3, 4);
    }
    _pushDoubleBE(val) {
        return this.pushWrite(val, 4, 8);
    }
    _pushNaN() {
        return this.push(BUF_NAN);
    }
    _pushInfinity(obj) {
        const half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;
        return this.push(half);
    }
    _pushFloat(obj) {
        const b2 = Buffer.allocUnsafe(2);
        if (utils.writeHalf(b2, obj)) {
            if (utils.parseHalf(b2) === obj) {
                return this._pushUInt8(HALF) && this.push(b2);
            }
        }
        const b4 = Buffer.allocUnsafe(4);
        b4.writeFloatBE(obj, 0);
        if (b4.readFloatBE(0) === obj) {
            return this._pushUInt8(FLOAT) && this.push(b4);
        }
        return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);
    }
    _pushInt(obj, mt, orig) {
        const m = mt << 5;
        if (obj < 24) {
            return this._pushUInt8(m | obj);
        }
        if (obj <= 0xff) {
            return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj);
        }
        if (obj <= 0xffff) {
            return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj);
        }
        if (obj <= 0xffffffff) {
            return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj);
        }
        if (obj <= Number.MAX_SAFE_INTEGER) {
            return this._pushUInt8(m | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);
        }
        if (mt === MT.NEG_INT) {
            return this._pushFloat(orig);
        }
        return this._pushFloat(obj);
    }
    _pushIntNum(obj) {
        if (obj < 0) {
            return this._pushInt(-obj - 1, MT.NEG_INT, obj);
        } else {
            return this._pushInt(obj, MT.POS_INT);
        }
    }
    _pushNumber(obj) {
        switch(false){
            case obj === obj:
                return this._pushNaN(obj);
            case isFinite(obj):
                return this._pushInfinity(obj);
            case obj % 1 !== 0:
                return this._pushIntNum(obj);
            default:
                return this._pushFloat(obj);
        }
    }
    _pushString(obj) {
        const len = Buffer.byteLength(obj, 'utf8');
        return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len);
    }
    _pushBoolean(obj) {
        return this._pushUInt8(obj ? TRUE : FALSE);
    }
    _pushUndefined(obj) {
        return this._pushUInt8(UNDEFINED);
    }
    _pushArray(gen, obj) {
        const len = obj.length;
        if (!gen._pushInt(len, MT.ARRAY)) {
            return false;
        }
        for(let j = 0; j < len; j++){
            if (!gen.pushAny(obj[j])) {
                return false;
            }
        }
        return true;
    }
    _pushTag(tag) {
        return this._pushInt(tag, MT.TAG);
    }
    _pushDate(gen, obj) {
        // Round date, to get seconds since 1970-01-01 00:00:00 as defined in
        // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is
        // still allowed to encode fractions of seconds which can be achieved by
        // changing overwriting the encode function for Date objects.
        return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000));
    }
    _pushBuffer(gen, obj) {
        return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);
    }
    _pushNoFilter(gen, obj) {
        return gen._pushBuffer(gen, obj.slice());
    }
    _pushRegexp(gen, obj) {
        return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);
    }
    _pushSet(gen, obj) {
        if (!gen._pushInt(obj.size, MT.ARRAY)) {
            return false;
        }
        for (const x of obj){
            if (!gen.pushAny(x)) {
                return false;
            }
        }
        return true;
    }
    _pushUrl(gen, obj) {
        return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());
    }
    _pushBigint(obj) {
        let tag = TAG.POS_BIGINT;
        if (obj.isNegative()) {
            obj = obj.negated().minus(1);
            tag = TAG.NEG_BIGINT;
        }
        let str = obj.toString(16);
        if (str.length % 2) {
            str = '0' + str;
        }
        const buf = Buffer.from(str, 'hex');
        return this._pushTag(tag) && this._pushBuffer(this, buf);
    }
    _pushBigNumber(gen, obj) {
        if (obj.isNaN()) {
            return gen._pushNaN();
        }
        if (!obj.isFinite()) {
            return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);
        }
        if (obj.isInteger()) {
            return gen._pushBigint(obj);
        }
        if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {
            return false;
        }
        const dec = obj.decimalPlaces();
        const slide = obj.multipliedBy(new Bignumber(10).pow(dec));
        if (!gen._pushIntNum(-dec)) {
            return false;
        }
        if (slide.abs().isLessThan(MAXINT_BN)) {
            return gen._pushIntNum(slide.toNumber());
        } else {
            return gen._pushBigint(slide);
        }
    }
    _pushMap(gen, obj) {
        if (!gen._pushInt(obj.size, MT.MAP)) {
            return false;
        }
        return this._pushRawMap(obj.size, Array.from(obj));
    }
    _pushObject(obj) {
        if (!obj) {
            return this._pushUInt8(NULL);
        }
        var len = this.semanticTypes.length;
        for(var i = 0; i < len; i++){
            if (obj instanceof this.semanticTypes[i][0]) {
                return this.semanticTypes[i][1].call(obj, this, obj);
            }
        }
        var f = obj.encodeCBOR;
        if (typeof f === 'function') {
            return f.call(obj, this);
        }
        var keys = Object.keys(obj);
        var keyLength = keys.length;
        if (!this._pushInt(keyLength, MT.MAP)) {
            return false;
        }
        return this._pushRawMap(keyLength, keys.map((k)=>[
                k,
                obj[k]
            ]));
    }
    _pushRawMap(len, map) {
        // Sort keys for canoncialization
        // 1. encode key
        // 2. shorter key comes before longer key
        // 3. same length keys are sorted with lower
        //    byte value before higher
        map = map.map(function(a) {
            a[0] = Encoder.encode(a[0]);
            return a;
        }).sort(utils.keySorter);
        for(var j = 0; j < len; j++){
            if (!this.push(map[j][0])) {
                return false;
            }
            if (!this.pushAny(map[j][1])) {
                return false;
            }
        }
        return true;
    }
    /**
   * Alias for `.pushAny`
   *
   * @param {*} obj
   * @returns {boolean} true on success
   */ write(obj) {
        return this.pushAny(obj);
    }
    /**
   * Push any supported type onto the encoded stream
   *
   * @param {any} obj
   * @returns {boolean} true on success
   */ pushAny(obj) {
        var typ = toType(obj);
        switch(typ){
            case 'Number':
                return this._pushNumber(obj);
            case 'String':
                return this._pushString(obj);
            case 'Boolean':
                return this._pushBoolean(obj);
            case 'Object':
                return this._pushObject(obj);
            case 'Array':
                return this._pushArray(this, obj);
            case 'Uint8Array':
                return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj));
            case 'Null':
                return this._pushUInt8(NULL);
            case 'Undefined':
                return this._pushUndefined(obj);
            case 'Map':
                return this._pushMap(this, obj);
            case 'Set':
                return this._pushSet(this, obj);
            case 'URL':
                return this._pushUrl(this, obj);
            case 'BigNumber':
                return this._pushBigNumber(this, obj);
            case 'Date':
                return this._pushDate(this, obj);
            case 'RegExp':
                return this._pushRegexp(this, obj);
            case 'Symbol':
                switch(obj){
                    case SYMS.NULL:
                        return this._pushObject(null);
                    case SYMS.UNDEFINED:
                        return this._pushUndefined(undefined);
                    // TODO: Add pluggable support for other symbols
                    default:
                        throw new Error('Unknown symbol: ' + obj.toString());
                }
            default:
                throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''));
        }
    }
    finalize() {
        if (this.offset === 0) {
            return null;
        }
        var result = this.result;
        var resultLength = this.resultLength;
        var resultMethod = this.resultMethod;
        var offset = this.offset;
        // Determine the size of the buffer
        var size = 0;
        var i = 0;
        for(; i < offset; i++){
            size += resultLength[i];
        }
        var res = Buffer.allocUnsafe(size);
        var index = 0;
        var length = 0;
        // Write the content into the result buffer
        for(i = 0; i < offset; i++){
            length = resultLength[i];
            switch(resultMethod[i]){
                case 0:
                    result[i].copy(res, index);
                    break;
                case 1:
                    res.writeUInt8(result[i], index, true);
                    break;
                case 2:
                    res.writeUInt16BE(result[i], index, true);
                    break;
                case 3:
                    res.writeUInt32BE(result[i], index, true);
                    break;
                case 4:
                    res.writeDoubleBE(result[i], index, true);
                    break;
                case 5:
                    res.write(result[i], index, length, 'utf8');
                    break;
                default:
                    throw new Error('unkown method');
            }
            index += length;
        }
        var tmp = res;
        this._reset();
        return tmp;
    }
    _reset() {
        this.result = [];
        this.resultMethod = [];
        this.resultLength = [];
        this.offset = 0;
    }
    /**
   * Encode the given value
   * @param {*} o
   * @returns {Buffer}
   */ static encode(o) {
        const enc = new Encoder();
        const ret = enc.pushAny(o);
        if (!ret) {
            throw new Error('Failed to encode input');
        }
        return enc.finalize();
    }
}
module.exports = Encoder;
}}),
"[project]/node_modules/borc/src/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
// exports.Commented = require('./commented')
exports.Diagnose = __turbopack_context__.r("[project]/node_modules/borc/src/diagnose.js [app-client] (ecmascript)");
exports.Decoder = __turbopack_context__.r("[project]/node_modules/borc/src/decoder.js [app-client] (ecmascript)");
exports.Encoder = __turbopack_context__.r("[project]/node_modules/borc/src/encoder.js [app-client] (ecmascript)");
exports.Simple = __turbopack_context__.r("[project]/node_modules/borc/src/simple.js [app-client] (ecmascript)");
exports.Tagged = __turbopack_context__.r("[project]/node_modules/borc/src/tagged.js [app-client] (ecmascript)");
// exports.comment = exports.Commented.comment
exports.decodeAll = exports.Decoder.decodeAll;
exports.decodeFirst = exports.Decoder.decodeFirst;
exports.diagnose = exports.Diagnose.diagnose;
exports.encode = exports.Encoder.encode;
exports.decode = exports.Decoder.decode;
exports.leveldb = {
    decode: exports.Decoder.decodeAll,
    encode: exports.Encoder.encode,
    buffer: true,
    name: 'cbor'
};
}}),
"[project]/node_modules/iso-url/src/url-browser.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const defaultBase = self.location ? self.location.protocol + '//' + self.location.host : '';
const URL = self.URL;
class URLWithLegacySupport {
    constructor(url = '', base = defaultBase){
        this.super = new URL(url, base);
        this.path = this.pathname + this.search;
        this.auth = this.username && this.password ? this.username + ':' + this.password : null;
        this.query = this.search && this.search.startsWith('?') ? this.search.slice(1) : null;
    }
    get hash() {
        return this.super.hash;
    }
    get host() {
        return this.super.host;
    }
    get hostname() {
        return this.super.hostname;
    }
    get href() {
        return this.super.href;
    }
    get origin() {
        return this.super.origin;
    }
    get password() {
        return this.super.password;
    }
    get pathname() {
        return this.super.pathname;
    }
    get port() {
        return this.super.port;
    }
    get protocol() {
        return this.super.protocol;
    }
    get search() {
        return this.super.search;
    }
    get searchParams() {
        return this.super.searchParams;
    }
    get username() {
        return this.super.username;
    }
    set hash(hash) {
        this.super.hash = hash;
    }
    set host(host) {
        this.super.host = host;
    }
    set hostname(hostname) {
        this.super.hostname = hostname;
    }
    set href(href) {
        this.super.href = href;
    }
    set origin(origin) {
        this.super.origin = origin;
    }
    set password(password) {
        this.super.password = password;
    }
    set pathname(pathname) {
        this.super.pathname = pathname;
    }
    set port(port) {
        this.super.port = port;
    }
    set protocol(protocol) {
        this.super.protocol = protocol;
    }
    set search(search) {
        this.super.search = search;
    }
    set searchParams(searchParams) {
        this.super.searchParams = searchParams;
    }
    set username(username) {
        this.super.username = username;
    }
    createObjectURL(o) {
        return this.super.createObjectURL(o);
    }
    revokeObjectURL(o) {
        this.super.revokeObjectURL(o);
    }
    toJSON() {
        return this.super.toJSON();
    }
    toString() {
        return this.super.toString();
    }
    format() {
        return this.toString();
    }
}
function format(obj) {
    if (typeof obj === 'string') {
        const url = new URL(obj);
        return url.toString();
    }
    if (!(obj instanceof URL)) {
        const userPass = obj.username && obj.password ? `${obj.username}:${obj.password}@` : '';
        const auth = obj.auth ? obj.auth + '@' : '';
        const port = obj.port ? ':' + obj.port : '';
        const protocol = obj.protocol ? obj.protocol + '//' : '';
        const host = obj.host || '';
        const hostname = obj.hostname || '';
        const search = obj.search || (obj.query ? '?' + obj.query : '');
        const hash = obj.hash || '';
        const pathname = obj.pathname || '';
        const path = obj.path || pathname + search;
        return `${protocol}${userPass || auth}${host || hostname + port}${path}${hash}`;
    }
}
module.exports = {
    URLWithLegacySupport,
    URLSearchParams: self.URLSearchParams,
    defaultBase,
    format
};
}}),
"[project]/node_modules/iso-url/src/relative.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const { URLWithLegacySupport, format } = __turbopack_context__.r("[project]/node_modules/iso-url/src/url-browser.js [app-client] (ecmascript)");
module.exports = (url, location = {}, protocolMap = {}, defaultProtocol)=>{
    let protocol = location.protocol ? location.protocol.replace(':', '') : 'http';
    // Check protocol map
    protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';
    let urlParsed;
    try {
        urlParsed = new URLWithLegacySupport(url);
    } catch (err) {
        urlParsed = {};
    }
    const base = Object.assign({}, location, {
        protocol: protocol || urlParsed.protocol,
        host: location.host || urlParsed.host
    });
    return new URLWithLegacySupport(url, format(base)).toString();
};
}}),
"[project]/node_modules/iso-url/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const { URLWithLegacySupport, format, URLSearchParams, defaultBase } = __turbopack_context__.r("[project]/node_modules/iso-url/src/url-browser.js [app-client] (ecmascript)");
const relative = __turbopack_context__.r("[project]/node_modules/iso-url/src/relative.js [app-client] (ecmascript)");
module.exports = {
    URL: URLWithLegacySupport,
    URLSearchParams,
    format,
    relative,
    defaultBase
};
}}),
"[project]/node_modules/simple-cbor/src/value.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const MAX_U64_NUMBER = 0x20000000000000;
function _concat(a, ...args) {
    const newBuffer = new Uint8Array(a.byteLength + args.reduce((acc, b)=>acc + b.byteLength, 0));
    newBuffer.set(new Uint8Array(a), 0);
    let i = a.byteLength;
    for (const b of args){
        newBuffer.set(new Uint8Array(b), i);
        i += b.byteLength;
    }
    return newBuffer.buffer;
}
function _serializeValue(major, minor, value) {
    // Remove everything that's not an hexadecimal character. These are not
    // considered errors since the value was already validated and they might
    // be number decimals or sign.
    value = value.replace(/[^0-9a-fA-F]/g, "");
    // Create the buffer from the value with left padding with 0.
    const length = 2 ** (minor - 24 /* Int8 */ );
    value = value.slice(-length * 2).padStart(length * 2, "0");
    const bytes = [
        (major << 5) + minor
    ].concat(value.match(/../g).map((byte)=>parseInt(byte, 16)));
    return new Uint8Array(bytes).buffer;
}
function _serializeNumber(major, value) {
    if (value < 24) {
        return new Uint8Array([
            (major << 5) + value
        ]).buffer;
    } else {
        const minor = value <= 0xff ? 24 /* Int8 */  : value <= 0xffff ? 25 /* Int16 */  : value <= 0xffffffff ? 26 /* Int32 */  : 27 /* Int64 */ ;
        return _serializeValue(major, minor, value.toString(16));
    }
}
function _serializeString(str) {
    const utf8 = [];
    for(let i = 0; i < str.length; i++){
        let charcode = str.charCodeAt(i);
        if (charcode < 0x80) {
            utf8.push(charcode);
        } else if (charcode < 0x800) {
            utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);
        } else if (charcode < 0xd800 || charcode >= 0xe000) {
            utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);
        } else {
            // Surrogate pair
            i++;
            charcode = (charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff;
            utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);
        }
    }
    return _concat(new Uint8Array(_serializeNumber(3 /* TextString */ , str.length)), new Uint8Array(utf8));
}
/**
 * Tag a value.
 */ function tagged(tag, value) {
    if (tag == 0xd9d9f7) {
        return _concat(new Uint8Array([
            0xd9,
            0xd9,
            0xf7
        ]), value);
    }
    if (tag < 24) {
        return _concat(new Uint8Array([
            (6 /* Tag */  << 5) + tag
        ]), value);
    } else {
        const minor = tag <= 0xff ? 24 /* Int8 */  : tag <= 0xffff ? 25 /* Int16 */  : tag <= 0xffffffff ? 26 /* Int32 */  : 27 /* Int64 */ ;
        const length = 2 ** (minor - 24 /* Int8 */ );
        const value = tag.toString(16).slice(-length * 2).padStart(length * 2, "0");
        const bytes = [
            (6 /* Tag */  << 5) + minor
        ].concat(value.match(/../g).map((byte)=>parseInt(byte, 16)));
        return new Uint8Array(bytes).buffer;
    }
}
exports.tagged = tagged;
/**
 * Set the raw bytes contained by this value. This should only be used with another
 * CborValue, or if you are implementing extensions to CBOR.
 * @param bytes A buffer containing the value.
 */ function raw(bytes) {
    return new Uint8Array(bytes).buffer;
}
exports.raw = raw;
/**
 * Encode a number that is between [0, 23].
 * @param n
 */ function uSmall(n) {
    if (isNaN(n)) {
        throw new RangeError("Invalid number.");
    }
    n = Math.min(Math.max(0, n), 23); // Clamp it.
    const bytes = [
        (0 /* UnsignedInteger */  << 5) + n
    ];
    return new Uint8Array(bytes).buffer;
}
exports.uSmall = uSmall;
function u8(u8, radix) {
    // Force u8 into a number, and validate it.
    u8 = parseInt("" + u8, radix);
    if (isNaN(u8)) {
        throw new RangeError("Invalid number.");
    }
    u8 = Math.min(Math.max(0, u8), 0xff); // Clamp it.
    u8 = u8.toString(16);
    return _serializeValue(0 /* UnsignedInteger */ , 24 /* Int8 */ , u8);
}
exports.u8 = u8;
function u16(u16, radix) {
    // Force u16 into a number, and validate it.
    u16 = parseInt("" + u16, radix);
    if (isNaN(u16)) {
        throw new RangeError("Invalid number.");
    }
    u16 = Math.min(Math.max(0, u16), 0xffff); // Clamp it.
    u16 = u16.toString(16);
    return _serializeValue(0 /* UnsignedInteger */ , 25 /* Int16 */ , u16);
}
exports.u16 = u16;
function u32(u32, radix) {
    // Force u32 into a number, and validate it.
    u32 = parseInt("" + u32, radix);
    if (isNaN(u32)) {
        throw new RangeError("Invalid number.");
    }
    u32 = Math.min(Math.max(0, u32), 0xffffffff); // Clamp it.
    u32 = u32.toString(16);
    return _serializeValue(0 /* UnsignedInteger */ , 26 /* Int32 */ , u32);
}
exports.u32 = u32;
function u64(u64, radix) {
    // Special consideration for numbers that might be larger than expected.
    if (typeof u64 == "string" && radix == 16) {
        // This is the only case where we guarantee we'll encode the number directly.
        // Validate it's all hexadecimal first.
        if (u64.match(/[^0-9a-fA-F]/)) {
            throw new RangeError("Invalid number.");
        }
        return _serializeValue(0 /* UnsignedInteger */ , 27 /* Int64 */ , u64);
    }
    // Force u64 into a number, and validate it.
    u64 = parseInt("" + u64, radix);
    if (isNaN(u64)) {
        throw new RangeError("Invalid number.");
    }
    u64 = Math.min(Math.max(0, u64), MAX_U64_NUMBER); // Clamp it to actual limit.
    u64 = u64.toString(16);
    return _serializeValue(0 /* UnsignedInteger */ , 27 /* Int64 */ , u64);
}
exports.u64 = u64;
/**
 * Encode a negative number that is between [-24, -1].
 */ function iSmall(n) {
    if (isNaN(n)) {
        throw new RangeError("Invalid number.");
    }
    if (n === 0) {
        return uSmall(0);
    }
    // Negative n, clamped to [1, 24], minus 1 (there's no negative 0).
    n = Math.min(Math.max(0, -n), 24) - 1;
    const bytes = [
        (1 /* SignedInteger */  << 5) + n
    ];
    return new Uint8Array(bytes).buffer;
}
exports.iSmall = iSmall;
function i8(i8, radix) {
    // Force i8 into a number, and validate it.
    i8 = parseInt("" + i8, radix);
    if (isNaN(i8)) {
        throw new RangeError("Invalid number.");
    }
    // Negative n, clamped, minus 1 (there's no negative 0).
    i8 = Math.min(Math.max(0, -i8 - 1), 0xff);
    i8 = i8.toString(16);
    return _serializeValue(1 /* SignedInteger */ , 24 /* Int8 */ , i8);
}
exports.i8 = i8;
function i16(i16, radix) {
    // Force i16 into a number, and validate it.
    i16 = parseInt("" + i16, radix);
    if (isNaN(i16)) {
        throw new RangeError("Invalid number.");
    }
    // Negative n, clamped, minus 1 (there's no negative 0).
    i16 = Math.min(Math.max(0, -i16 - 1), 0xffff);
    i16 = i16.toString(16);
    return _serializeValue(1 /* SignedInteger */ , 25 /* Int16 */ , i16);
}
exports.i16 = i16;
function i32(i32, radix) {
    // Force i32 into a number, and validate it.
    i32 = parseInt("" + i32, radix);
    if (isNaN(i32)) {
        throw new RangeError("Invalid number.");
    }
    // Negative n, clamped, minus 1 (there's no negative 0).
    i32 = Math.min(Math.max(0, -i32 - 1), 0xffffffff);
    i32 = i32.toString(16);
    return _serializeValue(1 /* SignedInteger */ , 26 /* Int32 */ , i32);
}
exports.i32 = i32;
function i64(i64, radix) {
    // Special consideration for numbers that might be larger than expected.
    if (typeof i64 == "string" && radix == 16) {
        if (i64.startsWith("-")) {
            i64 = i64.slice(1);
        } else {
            // Clamp it.
            i64 = "0";
        }
        // This is the only case where we guarantee we'll encode the number directly.
        // Validate it's all hexadecimal first.
        if (i64.match(/[^0-9a-fA-F]/) || i64.length > 16) {
            throw new RangeError("Invalid number.");
        }
        // We need to do -1 to the number.
        let done = false;
        let newI64 = i64.split("").reduceRight((acc, x)=>{
            if (done) {
                return x + acc;
            }
            let n = parseInt(x, 16) - 1;
            if (n >= 0) {
                done = true;
                return n.toString(16) + acc;
            } else {
                return "f" + acc;
            }
        }, "");
        if (!done) {
            // This number was 0.
            return u64(0);
        }
        return _serializeValue(1 /* SignedInteger */ , 27 /* Int64 */ , newI64);
    }
    // Force i64 into a number, and validate it.
    i64 = parseInt("" + i64, radix);
    if (isNaN(i64)) {
        throw new RangeError("Invalid number.");
    }
    i64 = Math.min(Math.max(0, -i64 - 1), 0x20000000000000); // Clamp it to actual.
    i64 = i64.toString(16);
    return _serializeValue(1 /* SignedInteger */ , 27 /* Int64 */ , i64);
}
exports.i64 = i64;
/**
 * Encode a number using the smallest amount of bytes, by calling the methods
 * above. e.g. If the number fits in a u8, it will use that.
 */ function number(n) {
    if (n >= 0) {
        if (n < 24) {
            return uSmall(n);
        } else if (n <= 0xff) {
            return u8(n);
        } else if (n <= 0xffff) {
            return u16(n);
        } else if (n <= 0xffffffff) {
            return u32(n);
        } else {
            return u64(n);
        }
    } else {
        if (n >= -24) {
            return iSmall(n);
        } else if (n >= -0xff) {
            return i8(n);
        } else if (n >= -0xffff) {
            return i16(n);
        } else if (n >= -0xffffffff) {
            return i32(n);
        } else {
            return i64(n);
        }
    }
}
exports.number = number;
/**
 * Encode a byte array. This is different than the `raw()` method.
 */ function bytes(bytes) {
    return _concat(_serializeNumber(2 /* ByteString */ , bytes.byteLength), bytes);
}
exports.bytes = bytes;
/**
 * Encode a JavaScript string.
 */ function string(str) {
    return _serializeString(str);
}
exports.string = string;
/**
 * Encode an array of cbor values.
 */ function array(items) {
    return _concat(_serializeNumber(4 /* Array */ , items.length), ...items);
}
exports.array = array;
/**
 * Encode a map of key-value pairs. The keys are string, and the values are CBOR
 * encoded.
 */ function map(items, stable = false) {
    if (!(items instanceof Map)) {
        items = new Map(Object.entries(items));
    }
    let entries = Array.from(items.entries());
    if (stable) {
        entries = entries.sort(([keyA], [keyB])=>keyA.localeCompare(keyB));
    }
    return _concat(_serializeNumber(5 /* Map */ , items.size), ...entries.map(([k, v])=>_concat(_serializeString(k), v)));
}
exports.map = map;
/**
 * Encode a single (32 bits) precision floating point number.
 */ function singleFloat(f) {
    const single = new Float32Array([
        f
    ]);
    return _concat(new Uint8Array([
        (7 /* SimpleValue */  << 5) + 26
    ]), new Uint8Array(single.buffer));
}
exports.singleFloat = singleFloat;
/**
 * Encode a double (64 bits) precision floating point number.
 */ function doubleFloat(f) {
    const single = new Float64Array([
        f
    ]);
    return _concat(new Uint8Array([
        (7 /* SimpleValue */  << 5) + 27
    ]), new Uint8Array(single.buffer));
}
exports.doubleFloat = doubleFloat;
function bool(v) {
    return v ? true_() : false_();
}
exports.bool = bool;
/**
 * Encode the boolean true.
 */ function true_() {
    return raw(new Uint8Array([
        (7 /* SimpleValue */  << 5) + 21
    ]));
}
exports.true_ = true_;
/**
 * Encode the boolean false.
 */ function false_() {
    return raw(new Uint8Array([
        (7 /* SimpleValue */  << 5) + 20
    ]));
}
exports.false_ = false_;
/**
 * Encode the constant null.
 */ function null_() {
    return raw(new Uint8Array([
        (7 /* SimpleValue */  << 5) + 22
    ]));
}
exports.null_ = null_;
/**
 * Encode the constant undefined.
 */ function undefined_() {
    return raw(new Uint8Array([
        (7 /* SimpleValue */  << 5) + 23
    ]));
}
exports.undefined_ = undefined_; //# sourceMappingURL=value.js.map
}}),
"[project]/node_modules/simple-cbor/src/serializer.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const cbor = __importStar(__turbopack_context__.r("[project]/node_modules/simple-cbor/src/value.js [app-client] (ecmascript)"));
const BufferClasses = [
    ArrayBuffer,
    Uint8Array,
    Uint16Array,
    Uint32Array,
    Int8Array,
    Int16Array,
    Int32Array,
    Float32Array,
    Float64Array
];
class JsonDefaultCborEncoder {
    // @param _serializer The CBOR Serializer to use.
    // @param _stable Whether or not keys from objects should be sorted (stable). This is
    //     particularly useful when testing encodings between JSON objects.
    constructor(_serializer, _stable = false){
        this._serializer = _serializer;
        this._stable = _stable;
        this.name = "jsonDefault";
        this.priority = -100;
    }
    match(value) {
        return [
            "undefined",
            "boolean",
            "number",
            "string",
            "object"
        ].indexOf(typeof value) != -1;
    }
    encode(value) {
        switch(typeof value){
            case "undefined":
                return cbor.undefined_();
            case "boolean":
                return cbor.bool(value);
            case "number":
                if (Math.floor(value) === value) {
                    return cbor.number(value);
                } else {
                    return cbor.doubleFloat(value);
                }
            case "string":
                return cbor.string(value);
            case "object":
                if (value === null) {
                    return cbor.null_();
                } else if (Array.isArray(value)) {
                    return cbor.array(value.map((x)=>this._serializer.serializeValue(x)));
                } else if (BufferClasses.find((x)=>value instanceof x)) {
                    return cbor.bytes(value.buffer);
                } else if (Object.getOwnPropertyNames(value).indexOf("toJSON") !== -1) {
                    return this.encode(value.toJSON());
                } else if (value instanceof Map) {
                    const m = new Map();
                    for (const [key, item] of value.entries()){
                        m.set(key, this._serializer.serializeValue(item));
                    }
                    return cbor.map(m, this._stable);
                } else {
                    const m = new Map();
                    for (const [key, item] of Object.entries(value)){
                        m.set(key, this._serializer.serializeValue(item));
                    }
                    return cbor.map(m, this._stable);
                }
            default:
                throw new Error("Invalid value.");
        }
    }
}
exports.JsonDefaultCborEncoder = JsonDefaultCborEncoder;
class ToCborEncoder {
    constructor(){
        this.name = "cborEncoder";
        this.priority = -90;
    }
    match(value) {
        return typeof value == "object" && typeof value["toCBOR"] == "function";
    }
    encode(value) {
        return value.toCBOR();
    }
}
exports.ToCborEncoder = ToCborEncoder;
class CborSerializer {
    constructor(){
        this._encoders = new Set();
    }
    static withDefaultEncoders(stable = false) {
        const s = new this();
        s.addEncoder(new JsonDefaultCborEncoder(s, stable));
        s.addEncoder(new ToCborEncoder());
        return s;
    }
    removeEncoder(name) {
        // Has to make an extra call to values() to ensure it doesn't break on iteration.
        for (const encoder of this._encoders.values()){
            if (encoder.name == name) {
                this._encoders.delete(encoder);
            }
        }
    }
    addEncoder(encoder) {
        this._encoders.add(encoder);
    }
    getEncoderFor(value) {
        let chosenEncoder = null;
        for (const encoder of this._encoders){
            if (!chosenEncoder || encoder.priority > chosenEncoder.priority) {
                if (encoder.match(value)) {
                    chosenEncoder = encoder;
                }
            }
        }
        if (chosenEncoder === null) {
            throw new Error("Could not find an encoder for value.");
        }
        return chosenEncoder;
    }
    serializeValue(value) {
        return this.getEncoderFor(value).encode(value);
    }
    serialize(value) {
        return this.serializeValue(value);
    }
}
exports.CborSerializer = CborSerializer;
class SelfDescribeCborSerializer extends CborSerializer {
    serialize(value) {
        return cbor.raw(new Uint8Array([
            // Self describe CBOR.
            ...new Uint8Array([
                0xd9,
                0xd9,
                0xf7
            ]),
            ...new Uint8Array(super.serializeValue(value))
        ]));
    }
}
exports.SelfDescribeCborSerializer = SelfDescribeCborSerializer; //# sourceMappingURL=serializer.js.map
}}),
"[project]/node_modules/simple-cbor/src/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
function __export(m) {
    for(var p in m)if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__export(__turbopack_context__.r("[project]/node_modules/simple-cbor/src/serializer.js [app-client] (ecmascript)"));
const value = __importStar(__turbopack_context__.r("[project]/node_modules/simple-cbor/src/value.js [app-client] (ecmascript)"));
exports.value = value; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@dfinity/utils/dist/esm/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AgentManager": (()=>B),
    "Canister": (()=>w),
    "FromStringToTokenError": (()=>I),
    "ICPToken": (()=>et),
    "InvalidPercentageError": (()=>y),
    "NullishError": (()=>A),
    "TokenAmount": (()=>_),
    "TokenAmountV2": (()=>S),
    "arrayBufferToUint8Array": (()=>It),
    "arrayOfNumberToUint8Array": (()=>_t),
    "asNonNullish": (()=>mt),
    "asciiStringToByteArray": (()=>St),
    "assertNonNullish": (()=>f),
    "assertPercentageNumber": (()=>gt),
    "base64ToUint8Array": (()=>Ct),
    "bigEndianCrc32": (()=>Lt),
    "bigIntToUint8Array": (()=>Tt),
    "candidNumberArrayToBigInt": (()=>Bt),
    "convertStringToE8s": (()=>K),
    "createAgent": (()=>q),
    "createServices": (()=>lt),
    "debounce": (()=>Wt),
    "decodeBase32": (()=>kt),
    "defaultAgent": (()=>O),
    "encodeBase32": (()=>Pt),
    "fromDefinedNullable": (()=>re),
    "fromNullable": (()=>L),
    "fromNullishNullable": (()=>ne),
    "hashObject": (()=>qt),
    "hashText": (()=>Q),
    "hexStringToUint8Array": (()=>wt),
    "isEmptyString": (()=>ot),
    "isNullish": (()=>b),
    "jsonReplacer": (()=>D),
    "jsonReviver": (()=>Kt),
    "nonNullish": (()=>s),
    "notEmptyString": (()=>j),
    "nowInBigIntNanoSeconds": (()=>Qt),
    "numberToUint8Array": (()=>Nt),
    "principalToSubAccount": (()=>ie),
    "queryAndUpdate": (()=>st),
    "secondsToDuration": (()=>Jt),
    "smallerVersion": (()=>se),
    "toBigIntNanoSeconds": (()=>zt),
    "toNullable": (()=>ee),
    "uint8ArrayToArrayOfNumber": (()=>Ut),
    "uint8ArrayToBase64": (()=>Dt),
    "uint8ArrayToBigInt": (()=>ht),
    "uint8ArrayToHexString": (()=>k)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$actor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/actor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/auth.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$agent$2f$http$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/agent/http/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/principal/lib/esm/index.js [app-client] (ecmascript)");
var I = ((n)=>(n[n.FractionalMoreThan8Decimals = 0] = "FractionalMoreThan8Decimals", n[n.InvalidFormat = 1] = "InvalidFormat", n[n.FractionalTooManyDecimals = 2] = "FractionalTooManyDecimals", n))(I || {});
var U = BigInt(1e8);
var v = 8, K = (e)=>{
    let t = e.includes("e") ? Number(e).toLocaleString("en", {
        useGrouping: !1,
        maximumFractionDigits: 20
    }) : e;
    t = t.trim().replace(/[,']/g, "");
    let r = t.match(/\d*(\.\d*)?/);
    if (!r || r[0] !== t) return 1;
    let [n, o] = t.split("."), i = BigInt(0);
    if (n) try {
        i += BigInt(n) * U;
    } catch  {
        return 1;
    }
    if (o) {
        if (o.length > 8) return 0;
        try {
            i += BigInt(o.padEnd(8, "0"));
        } catch  {
            return 1;
        }
    }
    return i;
}, Y = ({ amount: e, decimals: t })=>{
    e = e.trim().replace(/[,']/g, "");
    let r = e.match(/\d*(\.\d*)?/);
    if (!r || r[0] !== e) return 1;
    let [n, o] = e.split("."), i = 0n, c = 10n ** BigInt(t);
    if (n) try {
        i += BigInt(n) * c;
    } catch  {
        return 1;
    }
    if (o) {
        if (o.length > t) return 2;
        try {
            i += BigInt(o.padEnd(t, "0"));
        } catch  {
            return 1;
        }
    }
    return i;
}, et = {
    symbol: "ICP",
    name: "Internet Computer",
    decimals: 8
}, _ = class e {
    constructor(t, r){
        this.e8s = t;
        this.token = r;
        if (r.decimals !== 8) throw new Error("Use TokenAmountV2 for number of decimals other than 8");
    }
    static fromE8s({ amount: t, token: r }) {
        return new e(t, r);
    }
    static fromString({ amount: t, token: r }) {
        if (r.decimals !== 8) throw new Error("Use TokenAmountV2 for number of decimals other than 8");
        let n = K(t);
        return typeof n == "bigint" ? new e(n, r) : n;
    }
    static fromNumber({ amount: t, token: r }) {
        let n = e.fromString({
            amount: t.toString(),
            token: r
        });
        if (n instanceof e) return n;
        throw n === 0 ? new Error(`Number ${t} has more than 8 decimals`) : new Error(`Invalid number ${t}`);
    }
    toE8s() {
        return this.e8s;
    }
}, S = class e {
    constructor(t, r){
        this.ulps = t;
        this.token = r;
    }
    static fromUlps({ amount: t, token: r }) {
        return new e(t, r);
    }
    static fromString({ amount: t, token: r }) {
        let n = Y({
            amount: t,
            decimals: r.decimals
        });
        return typeof n == "bigint" ? new e(n, r) : n;
    }
    static fromNumber({ amount: t, token: r }) {
        let n = e.fromString({
            amount: t.toFixed(Math.min(v, r.decimals)),
            token: r
        });
        if (n instanceof e) return n;
        throw n === 2 ? new Error(`Number ${t} has more than ${r.decimals} decimals`) : new Error(`Invalid number ${t}`);
    }
    toUlps() {
        return this.ulps;
    }
    toE8s() {
        return this.token.decimals < 8 ? this.ulps * 10n ** BigInt(8 - this.token.decimals) : this.token.decimals === 8 ? this.ulps : this.ulps / 10n ** BigInt(this.token.decimals - 8);
    }
};
var w = class {
    constructor(t, r, n){
        this.id = t;
        this.service = r;
        this.certifiedService = n;
        this.caller = ({ certified: t = !0 })=>t ? this.certifiedService : this.service;
    }
    get canisterId() {
        return this.id;
    }
};
var b = (e)=>e == null, s = (e)=>!b(e), j = (e)=>s(e) && e !== "", ot = (e)=>!j(e);
var st = async ({ request: e, onLoad: t, onQueryError: r, onUpdateError: n, strategy: o = "query_and_update", identity: i, resolution: c = "race" })=>{
    let a = !1, d = (x)=>e({
            certified: x,
            identity: i
        }).then((l)=>{
            a || t({
                certified: x,
                response: l
            });
        }).catch((l)=>{
            x || r?.({
                error: l,
                identity: i
            }), !a && (b(n) || (console.error(l), x && n({
                error: l,
                identity: i
            })));
        }).finally(()=>a = a || x), m = o === "query" ? [
        d(!1)
    ] : o === "update" ? [
        d(!0)
    ] : [
        d(!1),
        d(!0)
    ];
    await (c === "all_settled" ? Promise.allSettled(m) : Promise.race(m));
};
;
;
var O = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$agent$2f$http$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["HttpAgent"].createSync({
        host: "https://icp-api.io",
        identity: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AnonymousIdentity"]
    }), q = async ({ identity: e, host: t, fetchRootKey: r = !1, verifyQuerySignatures: n = !1, retryTimes: o })=>await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$agent$2f$http$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["HttpAgent"].create({
        identity: e,
        ...s(t) && {
            host: t
        },
        verifyQuerySignatures: n,
        ...s(o) && {
            retryTimes: o
        },
        shouldFetchRootKey: r
    }), B = class e {
    constructor(t){
        this.config = t;
        this.agents = void 0;
        this.getAgent = async ({ identity: t })=>{
            let r = t.getPrincipal().toText();
            if (b(this.agents) || b(this.agents[r])) {
                let n = await q({
                    identity: t,
                    fetchRootKey: this.config.fetchRootKey,
                    host: this.config.host,
                    verifyQuerySignatures: !0
                });
                return this.agents = {
                    ...this.agents ?? {},
                    [r]: n
                }, n;
            }
            return this.agents[r];
        };
        this.clearAgents = ()=>{
            this.agents = null;
        };
    }
    static create(t) {
        return new e(t);
    }
};
var lt = ({ options: { canisterId: e, serviceOverride: t, certifiedServiceOverride: r, agent: n, callTransform: o, queryTransform: i }, idlFactory: c, certifiedIdlFactory: a })=>{
    let d = n ?? O(), m = t ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$actor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Actor"].createActor(c, {
        agent: d,
        canisterId: e,
        callTransform: o,
        queryTransform: i
    }), x = r ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$actor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Actor"].createActor(a, {
        agent: d,
        canisterId: e,
        callTransform: o,
        queryTransform: i
    });
    return {
        service: m,
        certifiedService: x,
        agent: d,
        canisterId: e
    };
};
var y = class extends Error {
}, A = class extends Error {
}, f = (e, t)=>{
    if (e == null) throw new A(t);
}, mt = (e, t)=>(f(e, t), e), gt = (e)=>{
    if (e < 0 || e > 100) throw new y(`${e} is not a valid percentage number.`);
};
var ht = (e)=>{
    let t = new DataView(e.buffer, e.byteOffset, e.byteLength);
    if (typeof t.getBigUint64 == "function") return t.getBigUint64(0);
    {
        let r = BigInt(t.getUint32(0)), n = BigInt(t.getUint32(4));
        return (r << BigInt(32)) + n;
    }
}, Tt = (e)=>{
    let t = new ArrayBuffer(8), r = new DataView(t);
    if (typeof r.setBigUint64 == "function") r.setBigUint64(0, e);
    else {
        let n = Number(e >> BigInt(32)), o = Number(e & BigInt(4294967295));
        r.setUint32(0, n), r.setUint32(4, o);
    }
    return new Uint8Array(t);
}, Nt = (e)=>{
    let t = new DataView(new ArrayBuffer(8));
    for(let r = 7; r >= 0; --r)t.setUint8(r, e % 256), e = e >> 8;
    return new Uint8Array(t.buffer);
}, It = (e)=>new Uint8Array(e), Ut = (e)=>Array.from(e), _t = (e)=>new Uint8Array(e), St = (e)=>Array.from(e).map((t)=>t.charCodeAt(0)), wt = (e)=>{
    let t = e.match(/.{1,2}/g);
    return f(t, "Invalid hex string."), Uint8Array.from(t.map((r)=>parseInt(r, 16)));
}, k = (e)=>(e instanceof Uint8Array || (e = Uint8Array.from(e)), e.reduce((t, r)=>t + r.toString(16).padStart(2, "0"), "")), Bt = (e)=>{
    let t = 0n;
    for(let r = e.length - 1; r >= 0; r--)t = (t << 32n) + BigInt(e[r]);
    return t;
};
var g = "abcdefghijklmnopqrstuvwxyz234567", u = Object.create(null);
for(let e = 0; e < g.length; e++)u[g[e]] = e;
u[0] = u.o;
u[1] = u.i;
var Pt = (e)=>{
    let t = 0, r = 0, n = "";
    function o(i) {
        return t < 0 ? r |= i >> -t : r = i << t & 248, t > 3 ? (t -= 8, 1) : (t < 4 && (n += g[r >> 3], t += 5), 0);
    }
    for(let i = 0; i < e.length;)i += o(e[i]);
    return n + (t < 0 ? g[r >> 3] : "");
};
function kt(e) {
    let t = 0, r = 0, n = new Uint8Array(e.length * 4 / 3 | 0), o = 0;
    function i(c) {
        let a = u[c.toLowerCase()];
        f(a, `Invalid character: ${JSON.stringify(c)}`), a <<= 3, r |= a >>> t, t += 5, t >= 8 && (n[o++] = r, t -= 8, t > 0 ? r = a << 5 - t & 255 : r = 0);
    }
    for (let c of e)i(c);
    return n.slice(0, o);
}
var Dt = (e)=>btoa(String.fromCharCode(...new Uint8Array(e))), Ct = (e)=>Uint8Array.from(atob(e), (t)=>t.charCodeAt(0));
var $ = new Uint32Array([
    0,
    1996959894,
    3993919788,
    2567524794,
    124634137,
    1886057615,
    3915621685,
    2657392035,
    249268274,
    2044508324,
    3772115230,
    2547177864,
    162941995,
    2125561021,
    3887607047,
    2428444049,
    498536548,
    1789927666,
    4089016648,
    2227061214,
    450548861,
    1843258603,
    4107580753,
    2211677639,
    325883990,
    1684777152,
    4251122042,
    2321926636,
    335633487,
    1661365465,
    4195302755,
    2366115317,
    997073096,
    1281953886,
    3579855332,
    2724688242,
    1006888145,
    1258607687,
    3524101629,
    2768942443,
    901097722,
    1119000684,
    3686517206,
    2898065728,
    853044451,
    1172266101,
    3705015759,
    2882616665,
    651767980,
    1373503546,
    3369554304,
    3218104598,
    565507253,
    1454621731,
    3485111705,
    3099436303,
    671266974,
    1594198024,
    3322730930,
    2970347812,
    795835527,
    1483230225,
    3244367275,
    3060149565,
    1994146192,
    31158534,
    2563907772,
    4023717930,
    1907459465,
    112637215,
    2680153253,
    3904427059,
    2013776290,
    251722036,
    2517215374,
    3775830040,
    2137656763,
    141376813,
    2439277719,
    3865271297,
    1802195444,
    476864866,
    2238001368,
    4066508878,
    1812370925,
    453092731,
    2181625025,
    4111451223,
    1706088902,
    314042704,
    2344532202,
    4240017532,
    1658658271,
    366619977,
    2362670323,
    4224994405,
    1303535960,
    984961486,
    2747007092,
    3569037538,
    1256170817,
    1037604311,
    2765210733,
    3554079995,
    1131014506,
    879679996,
    2909243462,
    3663771856,
    1141124467,
    855842277,
    2852801631,
    3708648649,
    1342533948,
    654459306,
    3188396048,
    3373015174,
    1466479909,
    544179635,
    3110523913,
    3462522015,
    1591671054,
    702138776,
    2966460450,
    3352799412,
    1504918807,
    783551873,
    3082640443,
    3233442989,
    3988292384,
    2596254646,
    62317068,
    1957810842,
    3939845945,
    2647816111,
    81470997,
    1943803523,
    3814918930,
    2489596804,
    225274430,
    2053790376,
    3826175755,
    2466906013,
    167816743,
    2097651377,
    4027552580,
    2265490386,
    503444072,
    1762050814,
    4150417245,
    2154129355,
    426522225,
    1852507879,
    4275313526,
    2312317920,
    282753626,
    1742555852,
    4189708143,
    2394877945,
    397917763,
    1622183637,
    3604390888,
    2714866558,
    953729732,
    1340076626,
    3518719985,
    2797360999,
    1068828381,
    1219638859,
    3624741850,
    2936675148,
    906185462,
    1090812512,
    3747672003,
    2825379669,
    829329135,
    1181335161,
    3412177804,
    3160834842,
    628085408,
    1382605366,
    3423369109,
    3138078467,
    570562233,
    1426400815,
    3317316542,
    2998733608,
    733239954,
    1555261956,
    3268935591,
    3050360625,
    752459403,
    1541320221,
    2607071920,
    3965973030,
    1969922972,
    40735498,
    2617837225,
    3943577151,
    1913087877,
    83908371,
    2512341634,
    3803740692,
    2075208622,
    213261112,
    2463272603,
    3855990285,
    2094854071,
    198958881,
    2262029012,
    4057260610,
    1759359992,
    534414190,
    2176718541,
    4139329115,
    1873836001,
    414664567,
    2282248934,
    4279200368,
    1711684554,
    285281116,
    2405801727,
    4167216745,
    1634467795,
    376229701,
    2685067896,
    3608007406,
    1308918612,
    956543938,
    2808555105,
    3495958263,
    1231636301,
    1047427035,
    2932959818,
    3654703836,
    1088359270,
    936918e3,
    2847714899,
    3736837829,
    1202900863,
    817233897,
    3183342108,
    3401237130,
    1404277552,
    615818150,
    3134207493,
    3453421203,
    1423857449,
    601450431,
    3009837614,
    3294710456,
    1567103746,
    711928724,
    3020668471,
    3272380065,
    1510334235,
    755167117
]), J = (e)=>{
    let t = -1;
    for(let r = 0; r < e.length; r++){
        let o = (e[r] ^ t) & 255;
        t = $[o] ^ t >>> 8;
    }
    return (t ^ -1) >>> 0;
}, Lt = (e)=>{
    let t = new ArrayBuffer(4);
    return new DataView(t).setUint32(0, J(e), !1), new Uint8Array(t);
};
;
var h = "__bigint__", T = "__principal__", N = "__uint8array__", D = (e, t)=>typeof t == "bigint" ? {
        [h]: `${t}`
    } : s(t) && t instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"] ? {
        [T]: t.toText()
    } : s(t) && t instanceof Uint8Array ? {
        [N]: Array.from(t)
    } : t, Kt = (e, t)=>{
    let r = (n)=>t[n];
    return s(t) && typeof t == "object" && h in t ? BigInt(r(h)) : s(t) && typeof t == "object" && T in t ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"].fromText(r(T)) : s(t) && typeof t == "object" && N in t ? Uint8Array.from(r(N)) : t;
};
var qt = async (e)=>{
    let t = JSON.stringify(e, D);
    return await Q(t);
}, Q = async (e)=>{
    let t = new TextEncoder().encode(e), r = await crypto.subtle.digest("SHA-256", t);
    return k(new Uint8Array(r));
};
var z = {
    year: "year",
    year_plural: "years",
    month: "month",
    month_plural: "months",
    day: "day",
    day_plural: "days",
    hour: "hour",
    hour_plural: "hours",
    minute: "minute",
    minute_plural: "minutes",
    second: "second",
    second_plural: "seconds"
}, Jt = ({ seconds: e, i18n: t = z })=>{
    let r = e / BigInt(60), n = r / BigInt(60);
    r -= n * BigInt(60);
    let o = n / BigInt(24);
    n -= o * BigInt(24);
    let i = G(o);
    return o -= C(i), [
        p("year", i),
        p("day", o),
        p("hour", n),
        p("minute", r),
        ...e > BigInt(0) && e < BigInt(60) ? [
            p("second", e)
        ] : []
    ].filter(({ amount: a })=>a > 0).slice(0, 2).map((a)=>`${a.amount} ${a.amount === 1 ? t[a.labelKey] : t[`${a.labelKey}_plural`]}`).join(", ");
}, G = (e)=>{
    let t = e / BigInt(365);
    for(; C(t) > e;)t--;
    return t;
}, C = (e)=>{
    let t = e / BigInt(4);
    return e * BigInt(365) + t;
}, p = (e, t)=>({
        labelKey: e,
        amount: Number(t)
    }), M = 1000000n, Qt = ()=>BigInt(Date.now()) * M, zt = (e)=>BigInt(e.getTime()) * M;
var Wt = (e, t)=>{
    let r;
    return (...n)=>{
        let o = ()=>e(...n);
        r && clearTimeout(r), r = setTimeout(o, t !== void 0 && t > 0 ? t : 300);
    };
};
var ee = (e)=>s(e) ? [
        e
    ] : [], L = (e)=>e?.[0], re = (e)=>{
    let t = L(e);
    return f(t), t;
}, ne = (e)=>L(e ?? []);
var ie = (e)=>{
    let t = e.toUint8Array(), r = new Uint8Array(32);
    return r[0] = t.length, r.set(t, 1), r;
};
var F = (e, t)=>t > e.length ? [
        ...e,
        ...[
            ...Array(t - e.length).keys()
        ].map(()=>0)
    ] : e, V = (e)=>{
    if (!Number.isNaN(Number(e))) return Number(e);
    let t = e.split("").reduce((r, n)=>Number.isNaN(Number(n)) ? r : r + n, "");
    return Number(t);
}, se = ({ minVersion: e, currentVersion: t })=>{
    let r = F(e.split(".").map(V), 3).join(".");
    return F(t.split(".").map(V), 3).join(".").localeCompare(r, void 0, {
        numeric: !0,
        sensitivity: "base"
    }) < 0;
};
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@dfinity/identity/lib/esm/identity/ed25519.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Ed25519KeyIdentity": (()=>Ed25519KeyIdentity),
    "Ed25519PublicKey": (()=>Ed25519PublicKey)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/utils/buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/auth.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$der$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/der.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@noble/curves/esm/ed25519.js [app-client] (ecmascript)");
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Ed25519PublicKey_rawKey, _Ed25519PublicKey_derKey, _Ed25519KeyIdentity_publicKey, _Ed25519KeyIdentity_privateKey;
;
;
;
function isObject(value) {
    return value !== null && typeof value === 'object';
}
class Ed25519PublicKey {
    // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.
    constructor(key){
        _Ed25519PublicKey_rawKey.set(this, void 0);
        _Ed25519PublicKey_derKey.set(this, void 0);
        if (key.byteLength !== Ed25519PublicKey.RAW_KEY_LENGTH) {
            throw new Error('An Ed25519 public key must be exactly 32bytes long');
        }
        __classPrivateFieldSet(this, _Ed25519PublicKey_rawKey, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufFromBufLike"])(key), "f");
        __classPrivateFieldSet(this, _Ed25519PublicKey_derKey, Ed25519PublicKey.derEncode(key), "f");
    }
    /**
     * Construct Ed25519PublicKey from an existing PublicKey
     * @param {unknown} maybeKey - existing PublicKey, ArrayBuffer, DerEncodedPublicKey, or hex string
     * @returns {Ed25519PublicKey} Instance of Ed25519PublicKey
     */ static from(maybeKey) {
        if (typeof maybeKey === 'string') {
            const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromHex"])(maybeKey);
            return this.fromRaw(key);
        } else if (isObject(maybeKey)) {
            const key = maybeKey;
            if (isObject(key) && Object.hasOwnProperty.call(key, '__derEncodedPublicKey__')) {
                return this.fromDer(key);
            } else if (ArrayBuffer.isView(key)) {
                const view = key;
                return this.fromRaw((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufFromBufLike"])(view.buffer));
            } else if (key instanceof ArrayBuffer) {
                return this.fromRaw(key);
            } else if ('rawKey' in key) {
                return this.fromRaw(key.rawKey);
            } else if ('derKey' in key) {
                return this.fromDer(key.derKey);
            } else if ('toDer' in key) {
                return this.fromDer(key.toDer());
            }
        }
        throw new Error('Cannot construct Ed25519PublicKey from the provided key.');
    }
    static fromRaw(rawKey) {
        return new Ed25519PublicKey(rawKey);
    }
    static fromDer(derKey) {
        return new Ed25519PublicKey(this.derDecode(derKey));
    }
    static derEncode(publicKey) {
        const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$der$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapDER"])(publicKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$der$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ED25519_OID"]).buffer;
        key.__derEncodedPublicKey__ = undefined;
        return key;
    }
    static derDecode(key) {
        const unwrapped = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$der$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unwrapDER"])(key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$der$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ED25519_OID"]);
        if (unwrapped.length !== this.RAW_KEY_LENGTH) {
            throw new Error('An Ed25519 public key must be exactly 32bytes long');
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufFromBufLike"])(unwrapped);
    }
    get rawKey() {
        return __classPrivateFieldGet(this, _Ed25519PublicKey_rawKey, "f");
    }
    get derKey() {
        return __classPrivateFieldGet(this, _Ed25519PublicKey_derKey, "f");
    }
    toDer() {
        return this.derKey;
    }
    toRaw() {
        return this.rawKey;
    }
}
_Ed25519PublicKey_rawKey = new WeakMap(), _Ed25519PublicKey_derKey = new WeakMap();
// The length of Ed25519 public keys is always 32 bytes.
Ed25519PublicKey.RAW_KEY_LENGTH = 32;
class Ed25519KeyIdentity extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignIdentity"] {
    // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.
    constructor(publicKey, privateKey){
        super();
        _Ed25519KeyIdentity_publicKey.set(this, void 0);
        _Ed25519KeyIdentity_privateKey.set(this, void 0);
        __classPrivateFieldSet(this, _Ed25519KeyIdentity_publicKey, Ed25519PublicKey.from(publicKey), "f");
        __classPrivateFieldSet(this, _Ed25519KeyIdentity_privateKey, new Uint8Array(privateKey), "f");
    }
    /**
     * Generate a new Ed25519KeyIdentity.
     * @param seed a 32-byte seed for the private key. If not provided, a random seed will be generated.
     * @returns Ed25519KeyIdentity
     */ static generate(seed) {
        if (seed && seed.length !== 32) {
            throw new Error('Ed25519 Seed needs to be 32 bytes long.');
        }
        if (!seed) seed = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ed25519"].utils.randomPrivateKey();
        // Check if the seed is all zeros
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufEquals"])(seed, new Uint8Array(new Array(32).fill(0)))) {
            console.warn('Seed is all zeros. This is not a secure seed. Please provide a seed with sufficient entropy if this is a production environment.');
        }
        const sk = new Uint8Array(32);
        for(let i = 0; i < 32; i++)sk[i] = new Uint8Array(seed)[i];
        const pk = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ed25519"].getPublicKey(sk);
        return Ed25519KeyIdentity.fromKeyPair(pk, sk);
    }
    static fromParsedJson(obj) {
        const [publicKeyDer, privateKeyRaw] = obj;
        return new Ed25519KeyIdentity(Ed25519PublicKey.fromDer((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromHex"])(publicKeyDer)), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromHex"])(privateKeyRaw));
    }
    static fromJSON(json) {
        const parsed = JSON.parse(json);
        if (Array.isArray(parsed)) {
            if (typeof parsed[0] === 'string' && typeof parsed[1] === 'string') {
                return this.fromParsedJson([
                    parsed[0],
                    parsed[1]
                ]);
            } else {
                throw new Error('Deserialization error: JSON must have at least 2 items.');
            }
        }
        throw new Error(`Deserialization error: Invalid JSON type for string: ${JSON.stringify(json)}`);
    }
    static fromKeyPair(publicKey, privateKey) {
        return new Ed25519KeyIdentity(Ed25519PublicKey.fromRaw(publicKey), privateKey);
    }
    static fromSecretKey(secretKey) {
        const publicKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ed25519"].getPublicKey(new Uint8Array(secretKey));
        return Ed25519KeyIdentity.fromKeyPair(publicKey, secretKey);
    }
    /**
     * Serialize this key to JSON.
     */ toJSON() {
        return [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toHex"])(__classPrivateFieldGet(this, _Ed25519KeyIdentity_publicKey, "f").toDer()),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toHex"])(__classPrivateFieldGet(this, _Ed25519KeyIdentity_privateKey, "f"))
        ];
    }
    /**
     * Return a copy of the key pair.
     */ getKeyPair() {
        return {
            secretKey: __classPrivateFieldGet(this, _Ed25519KeyIdentity_privateKey, "f"),
            publicKey: __classPrivateFieldGet(this, _Ed25519KeyIdentity_publicKey, "f")
        };
    }
    /**
     * Return the public key.
     */ getPublicKey() {
        return __classPrivateFieldGet(this, _Ed25519KeyIdentity_publicKey, "f");
    }
    /**
     * Signs a blob of data, with this identity's private key.
     * @param challenge - challenge to sign with this identity's secretKey, producing a signature
     */ async sign(challenge) {
        const blob = new Uint8Array(challenge);
        // Some implementations of Ed25519 private keys append a public key to the end of the private key. We only want the private key.
        const signature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["uint8ToBuf"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ed25519"].sign(blob, __classPrivateFieldGet(this, _Ed25519KeyIdentity_privateKey, "f").slice(0, 32)));
        // add { __signature__: void; } to the signature to make it compatible with the agent
        Object.defineProperty(signature, '__signature__', {
            enumerable: false,
            value: undefined
        });
        return signature;
    }
    /**
     * Verify
     * @param sig - signature to verify
     * @param msg - message to verify
     * @param pk - public key
     * @returns - true if the signature is valid, false otherwise
     */ static verify(sig, msg, pk) {
        const [signature, message, publicKey] = [
            sig,
            msg,
            pk
        ].map((x)=>{
            if (typeof x === 'string') {
                x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromHex"])(x);
            }
            if (x instanceof Uint8Array) {
                x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufFromBufLike"])(x.buffer);
            }
            return new Uint8Array(x);
        });
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ed25519"].verify(signature, message, publicKey);
    }
}
_Ed25519KeyIdentity_publicKey = new WeakMap(), _Ed25519KeyIdentity_privateKey = new WeakMap(); //# sourceMappingURL=ed25519.js.map
}}),
"[project]/node_modules/@dfinity/identity/lib/esm/identity/ecdsa.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CryptoError": (()=>CryptoError),
    "ECDSAKeyIdentity": (()=>ECDSAKeyIdentity),
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/auth.js [app-client] (ecmascript)");
;
class CryptoError extends Error {
    constructor(message){
        super(message);
        this.message = message;
        Object.setPrototypeOf(this, CryptoError.prototype);
    }
}
/**
 * Utility method to ensure that a subtleCrypto implementation is provided or is available in the global context
 * @param subtleCrypto SubtleCrypto implementation
 * @returns subleCrypto
 */ function _getEffectiveCrypto(subtleCrypto) {
    if (typeof global !== 'undefined' && global['crypto'] && global['crypto']['subtle']) {
        return global['crypto']['subtle'];
    }
    if (subtleCrypto) {
        return subtleCrypto;
    } else if (typeof crypto !== 'undefined' && crypto['subtle']) {
        return crypto.subtle;
    } else {
        throw new CryptoError('Global crypto was not available and none was provided. Please inlcude a SubtleCrypto implementation. See https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto');
    }
}
class ECDSAKeyIdentity extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignIdentity"] {
    // `fromKeyPair` and `generate` should be used for instantiation, not this constructor.
    constructor(keyPair, derKey, subtleCrypto){
        super();
        this._keyPair = keyPair;
        this._derKey = derKey;
        this._subtleCrypto = subtleCrypto;
    }
    /**
     * Generates a randomly generated identity for use in calls to the Internet Computer.
     * @param {CryptoKeyOptions} options optional settings
     * @param {CryptoKeyOptions['extractable']} options.extractable - whether the key should allow itself to be used. Set to false for maximum security.
     * @param {CryptoKeyOptions['keyUsages']} options.keyUsages - a list of key usages that the key can be used for
     * @param {CryptoKeyOptions['subtleCrypto']} options.subtleCrypto interface
     * @constructs ECDSAKeyIdentity
     * @returns a {@link ECDSAKeyIdentity}
     */ static async generate(options) {
        const { extractable = false, keyUsages = [
            'sign',
            'verify'
        ], subtleCrypto } = options !== null && options !== void 0 ? options : {};
        const effectiveCrypto = _getEffectiveCrypto(subtleCrypto);
        const keyPair = await effectiveCrypto.generateKey({
            name: 'ECDSA',
            namedCurve: 'P-256'
        }, extractable, keyUsages);
        const derKey = await effectiveCrypto.exportKey('spki', keyPair.publicKey);
        return new this(keyPair, derKey, effectiveCrypto);
    }
    /**
     * generates an identity from a public and private key. Please ensure that you are generating these keys securely and protect the user's private key
     * @param keyPair a CryptoKeyPair
     * @param subtleCrypto - a SubtleCrypto interface in case one is not available globally
     * @returns an {@link ECDSAKeyIdentity}
     */ static async fromKeyPair(keyPair, subtleCrypto) {
        const effectiveCrypto = _getEffectiveCrypto(subtleCrypto);
        const derKey = await effectiveCrypto.exportKey('spki', keyPair.publicKey);
        return new ECDSAKeyIdentity(keyPair, derKey, effectiveCrypto);
    }
    /**
     * Return the internally-used key pair.
     * @returns a CryptoKeyPair
     */ getKeyPair() {
        return this._keyPair;
    }
    /**
     * Return the public key.
     * @returns an {@link PublicKey & DerCryptoKey}
     */ getPublicKey() {
        const derKey = this._derKey;
        const key = Object.create(this._keyPair.publicKey);
        key.toDer = function() {
            return derKey;
        };
        return key;
    }
    /**
     * Signs a blob of data, with this identity's private key.
     * @param {ArrayBuffer} challenge - challenge to sign with this identity's secretKey, producing a signature
     * @returns {Promise<Signature>} signature
     */ async sign(challenge) {
        const params = {
            name: 'ECDSA',
            hash: {
                name: 'SHA-256'
            }
        };
        const signature = await this._subtleCrypto.sign(params, this._keyPair.privateKey, challenge);
        return signature;
    }
}
const __TURBOPACK__default__export__ = ECDSAKeyIdentity;
 //# sourceMappingURL=ecdsa.js.map
}}),
"[project]/node_modules/@dfinity/identity/lib/esm/identity/partial.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "PartialIdentity": (()=>PartialIdentity)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/principal/lib/esm/index.js [app-client] (ecmascript)");
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PartialIdentity_inner;
;
class PartialIdentity {
    constructor(inner){
        _PartialIdentity_inner.set(this, void 0);
        __classPrivateFieldSet(this, _PartialIdentity_inner, inner, "f");
    }
    /**
     * The raw public key of this identity.
     */ get rawKey() {
        return __classPrivateFieldGet(this, _PartialIdentity_inner, "f").rawKey;
    }
    /**
     * The DER-encoded public key of this identity.
     */ get derKey() {
        return __classPrivateFieldGet(this, _PartialIdentity_inner, "f").derKey;
    }
    /**
     * The DER-encoded public key of this identity.
     */ toDer() {
        return __classPrivateFieldGet(this, _PartialIdentity_inner, "f").toDer();
    }
    /**
     * The inner {@link PublicKey} used by this identity.
     */ getPublicKey() {
        return __classPrivateFieldGet(this, _PartialIdentity_inner, "f");
    }
    /**
     * The {@link Principal} of this identity.
     */ getPrincipal() {
        if (!__classPrivateFieldGet(this, _PartialIdentity_inner, "f").rawKey) {
            throw new Error('Cannot get principal from a public key without a raw key.');
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"].fromUint8Array(new Uint8Array(__classPrivateFieldGet(this, _PartialIdentity_inner, "f").rawKey));
    }
    /**
     * Required for the Identity interface, but cannot implemented for just a public key.
     */ transformRequest() {
        return Promise.reject('Not implemented. You are attempting to use a partial identity to sign calls, but this identity only has access to the public key.To sign calls, use a DelegationIdentity instead.');
    }
}
_PartialIdentity_inner = new WeakMap(); //# sourceMappingURL=partial.js.map
}}),
"[project]/node_modules/@dfinity/identity/lib/esm/identity/delegation.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Delegation": (()=>Delegation),
    "DelegationChain": (()=>DelegationChain),
    "DelegationIdentity": (()=>DelegationIdentity),
    "PartialDelegationIdentity": (()=>PartialDelegationIdentity),
    "isDelegationValid": (()=>isDelegationValid)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/utils/buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$request_id$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/request_id.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/auth.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/principal/lib/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$simple$2d$cbor$2f$src$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/simple-cbor/src/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$partial$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/identity/partial.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/utils/buffer.js [app-client] (ecmascript)");
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var _PartialDelegationIdentity_delegation;
;
;
;
;
;
const domainSeparator = new TextEncoder().encode('\x1Aic-request-auth-delegation');
const requestDomainSeparator = new TextEncoder().encode('\x0Aic-request');
function _parseBlob(value) {
    if (typeof value !== 'string' || value.length < 64) {
        throw new Error('Invalid public key.');
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromHex"])(value);
}
class Delegation {
    constructor(pubkey, expiration, targets){
        this.pubkey = pubkey;
        this.expiration = expiration;
        this.targets = targets;
    }
    toCBOR() {
        // Expiration field needs to be encoded as a u64 specifically.
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$simple$2d$cbor$2f$src$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["value"].map(Object.assign({
            pubkey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$simple$2d$cbor$2f$src$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["value"].bytes(this.pubkey),
            expiration: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$simple$2d$cbor$2f$src$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["value"].u64(this.expiration.toString(16), 16)
        }, this.targets && {
            targets: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$simple$2d$cbor$2f$src$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["value"].array(this.targets.map((t)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$simple$2d$cbor$2f$src$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["value"].bytes((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufFromBufLike"])(t.toUint8Array()))))
        }));
    }
    toJSON() {
        // every string should be hex and once-de-hexed,
        // discoverable what it is (e.g. de-hex to get JSON with a 'type' property, or de-hex to DER
        // with an OID). After de-hex, if it's not obvious what it is, it's an ArrayBuffer.
        return Object.assign({
            expiration: this.expiration.toString(16),
            pubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toHex"])(this.pubkey)
        }, this.targets && {
            targets: this.targets.map((p)=>p.toHex())
        });
    }
}
/**
 * Sign a single delegation object for a period of time.
 * @param from The identity that lends its delegation.
 * @param to The identity that receives the delegation.
 * @param expiration An expiration date for this delegation.
 * @param targets Limit this delegation to the target principals.
 */ async function _createSingleDelegation(from, to, expiration, targets) {
    const delegation = new Delegation(to.toDer(), BigInt(+expiration) * BigInt(1000000), targets);
    // The signature is calculated by signing the concatenation of the domain separator
    // and the message.
    // Note: To ensure Safari treats this as a user gesture, ensure to not use async methods
    // besides the actualy webauthn functionality (such as `sign`). Safari will de-register
    // a user gesture if you await an async call thats not fetch, xhr, or setTimeout.
    const challenge = new Uint8Array([
        ...domainSeparator,
        ...new Uint8Array((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$request_id$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["requestIdOf"])(Object.assign({}, delegation)))
    ]);
    const signature = await from.sign((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufFromBufLike"])(challenge));
    return {
        delegation,
        signature
    };
}
class DelegationChain {
    constructor(delegations, publicKey){
        this.delegations = delegations;
        this.publicKey = publicKey;
    }
    /**
     * Create a delegation chain between two (or more) keys. By default, the expiration time
     * will be very short (15 minutes).
     *
     * To build a chain of more than 2 identities, this function needs to be called multiple times,
     * passing the previous delegation chain into the options argument. For example:
     * @example
     * const rootKey = createKey();
     * const middleKey = createKey();
     * const bottomeKey = createKey();
     *
     * const rootToMiddle = await DelegationChain.create(
     *   root, middle.getPublicKey(), Date.parse('2100-01-01'),
     * );
     * const middleToBottom = await DelegationChain.create(
     *   middle, bottom.getPublicKey(), Date.parse('2100-01-01'), { previous: rootToMiddle },
     * );
     *
     * // We can now use a delegation identity that uses the delegation above:
     * const identity = DelegationIdentity.fromDelegation(bottomKey, middleToBottom);
     * @param from The identity that will delegate.
     * @param to The identity that gets delegated. It can now sign messages as if it was the
     *           identity above.
     * @param expiration The length the delegation is valid. By default, 15 minutes from calling
     *                   this function.
     * @param options A set of options for this delegation. expiration and previous
     * @param options.previous - Another DelegationChain that this chain should start with.
     * @param options.targets - targets that scope the delegation (e.g. Canister Principals)
     */ static async create(from, to, expiration = new Date(Date.now() + 15 * 60 * 1000), options = {}) {
        var _a, _b;
        const delegation = await _createSingleDelegation(from, to, expiration, options.targets);
        return new DelegationChain([
            ...((_a = options.previous) === null || _a === void 0 ? void 0 : _a.delegations) || [],
            delegation
        ], ((_b = options.previous) === null || _b === void 0 ? void 0 : _b.publicKey) || from.getPublicKey().toDer());
    }
    /**
     * Creates a DelegationChain object from a JSON string.
     * @param json The JSON string to parse.
     */ static fromJSON(json) {
        const { publicKey, delegations } = typeof json === 'string' ? JSON.parse(json) : json;
        if (!Array.isArray(delegations)) {
            throw new Error('Invalid delegations.');
        }
        const parsedDelegations = delegations.map((signedDelegation)=>{
            const { delegation, signature } = signedDelegation;
            const { pubkey, expiration, targets } = delegation;
            if (targets !== undefined && !Array.isArray(targets)) {
                throw new Error('Invalid targets.');
            }
            return {
                delegation: new Delegation(_parseBlob(pubkey), BigInt('0x' + expiration), targets && targets.map((t)=>{
                    if (typeof t !== 'string') {
                        throw new Error('Invalid target.');
                    }
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"].fromHex(t);
                })),
                signature: _parseBlob(signature)
            };
        });
        return new this(parsedDelegations, _parseBlob(publicKey));
    }
    /**
     * Creates a DelegationChain object from a list of delegations and a DER-encoded public key.
     * @param delegations The list of delegations.
     * @param publicKey The DER-encoded public key of the key-pair signing the first delegation.
     */ static fromDelegations(delegations, publicKey) {
        return new this(delegations, publicKey);
    }
    toJSON() {
        return {
            delegations: this.delegations.map((signedDelegation)=>{
                const { delegation, signature } = signedDelegation;
                const { targets } = delegation;
                return {
                    delegation: Object.assign({
                        expiration: delegation.expiration.toString(16),
                        pubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toHex"])(delegation.pubkey)
                    }, targets && {
                        targets: targets.map((t)=>t.toHex())
                    }),
                    signature: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toHex"])(signature)
                };
            }),
            publicKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toHex"])(this.publicKey)
        };
    }
}
class DelegationIdentity extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignIdentity"] {
    constructor(_inner, _delegation){
        super();
        this._inner = _inner;
        this._delegation = _delegation;
    }
    /**
     * Create a delegation without having access to delegateKey.
     * @param key The key used to sign the requests.
     * @param delegation A delegation object created using `createDelegation`.
     */ static fromDelegation(key, delegation) {
        return new this(key, delegation);
    }
    getDelegation() {
        return this._delegation;
    }
    getPublicKey() {
        return {
            derKey: this._delegation.publicKey,
            toDer: ()=>this._delegation.publicKey
        };
    }
    sign(blob) {
        return this._inner.sign(blob);
    }
    async transformRequest(request) {
        const { body } = request, fields = __rest(request, [
            "body"
        ]);
        const requestId = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$request_id$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["requestIdOf"])(body);
        return Object.assign(Object.assign({}, fields), {
            body: {
                content: body,
                sender_sig: await this.sign((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufFromBufLike"])(new Uint8Array([
                    ...requestDomainSeparator,
                    ...new Uint8Array(requestId)
                ]))),
                sender_delegation: this._delegation.delegations,
                sender_pubkey: this._delegation.publicKey
            }
        });
    }
}
class PartialDelegationIdentity extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$partial$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PartialIdentity"] {
    constructor(inner, delegation){
        super(inner);
        _PartialDelegationIdentity_delegation.set(this, void 0);
        __classPrivateFieldSet(this, _PartialDelegationIdentity_delegation, delegation, "f");
    }
    /**
     * The Delegation Chain of this identity.
     */ get delegation() {
        return __classPrivateFieldGet(this, _PartialDelegationIdentity_delegation, "f");
    }
    /**
     * Create a {@link PartialDelegationIdentity} from a {@link PublicKey} and a {@link DelegationChain}.
     * @param key The {@link PublicKey} to delegate to.
     * @param delegation a {@link DelegationChain} targeting the inner key.
     * @constructs PartialDelegationIdentity
     */ static fromDelegation(key, delegation) {
        return new PartialDelegationIdentity(key, delegation);
    }
}
_PartialDelegationIdentity_delegation = new WeakMap();
function isDelegationValid(chain, checks) {
    // Verify that the no delegation is expired. If any are in the chain, returns false.
    for (const { delegation } of chain.delegations){
        // prettier-ignore
        if (+new Date(Number(delegation.expiration / BigInt(1000000))) <= +Date.now()) {
            return false;
        }
    }
    // Check the scopes.
    const scopes = [];
    const maybeScope = checks === null || checks === void 0 ? void 0 : checks.scope;
    if (maybeScope) {
        if (Array.isArray(maybeScope)) {
            scopes.push(...maybeScope.map((s)=>typeof s === 'string' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"].fromText(s) : s));
        } else {
            scopes.push(typeof maybeScope === 'string' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"].fromText(maybeScope) : maybeScope);
        }
    }
    for (const s of scopes){
        const scope = s.toText();
        for (const { delegation } of chain.delegations){
            if (delegation.targets === undefined) {
                continue;
            }
            let none = true;
            for (const target of delegation.targets){
                if (target.toText() === scope) {
                    none = false;
                    break;
                }
            }
            if (none) {
                return false;
            }
        }
    }
    return true;
} //# sourceMappingURL=delegation.js.map
}}),
"[project]/node_modules/@dfinity/identity/lib/esm/identity/webauthn.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CosePublicKey": (()=>CosePublicKey),
    "WebAuthnIdentity": (()=>WebAuthnIdentity)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/auth.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$der$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/der.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/utils/buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$borc$2f$src$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/borc/src/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@noble/hashes/esm/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/candid/lib/esm/utils/buffer.js [app-client] (ecmascript)");
;
;
;
;
function _coseToDerEncodedBlob(cose) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$der$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapDER"])(cose, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$der$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DER_COSE_OID"]).buffer;
}
/**
 * From the documentation;
 * The authData is a byte array described in the spec. Parsing it will involve slicing bytes from
 * the array and converting them into usable objects.
 *
 * See https://webauthn.guide/#registration (subsection "Example: Parsing the authenticator data").
 * @param authData The authData field of the attestation response.
 * @returns The COSE key of the authData.
 */ function _authDataToCose(authData) {
    const dataView = new DataView(new ArrayBuffer(2));
    const idLenBytes = authData.slice(53, 55);
    [
        ...new Uint8Array(idLenBytes)
    ].forEach((v, i)=>dataView.setUint8(i, v));
    const credentialIdLength = dataView.getUint16(0);
    // Get the public key object.
    return authData.slice(55 + credentialIdLength);
}
class CosePublicKey {
    constructor(_cose){
        this._cose = _cose;
        this._encodedKey = _coseToDerEncodedBlob(_cose);
    }
    toDer() {
        return this._encodedKey;
    }
    getCose() {
        return this._cose;
    }
}
/**
 * Create a challenge from a string or array. The default challenge is always the same
 * because we don't need to verify the authenticity of the key on the server (we don't
 * register our keys with the IC). Any challenge would do, even one per key, randomly
 * generated.
 * @param challenge The challenge to transform into a byte array. By default a hard
 *        coded string.
 */ function _createChallengeBuffer(challenge = '<ic0.app>') {
    if (typeof challenge === 'string') {
        return Uint8Array.from(challenge, (c)=>c.charCodeAt(0));
    } else {
        return challenge;
    }
}
/**
 * Create a credentials to authenticate with a server. This is necessary in order in
 * WebAuthn to get credentials IDs (which give us the public key and allow us to
 * sign), but in the case of the Internet Computer, we don't actually need to register
 * it, so we don't.
 * @param credentialCreationOptions an optional CredentialCreationOptions object
 */ async function _createCredential(credentialCreationOptions) {
    const creds = await navigator.credentials.create(credentialCreationOptions !== null && credentialCreationOptions !== void 0 ? credentialCreationOptions : {
        publicKey: {
            authenticatorSelection: {
                userVerification: 'preferred'
            },
            attestation: 'direct',
            challenge: _createChallengeBuffer(),
            pubKeyCredParams: [
                {
                    type: 'public-key',
                    alg: PubKeyCoseAlgo.ECDSA_WITH_SHA256
                }
            ],
            rp: {
                name: 'Internet Identity Service'
            },
            user: {
                id: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["randomBytes"])(16),
                name: 'Internet Identity',
                displayName: 'Internet Identity'
            }
        }
    });
    if (creds === null) {
        return null;
    }
    return {
        // do _not_ use ...creds here, as creds is not enumerable in all cases
        id: creds.id,
        response: creds.response,
        type: creds.type,
        authenticatorAttachment: creds.authenticatorAttachment,
        getClientExtensionResults: creds.getClientExtensionResults,
        // Some password managers will return a Uint8Array, so we ensure we return an ArrayBuffer.
        rawId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$candid$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufFromBufLike"])(creds.rawId)
    };
}
// See https://www.iana.org/assignments/cose/cose.xhtml#algorithms for a complete
// list of these algorithms. We only list the ones we support here.
var PubKeyCoseAlgo;
(function(PubKeyCoseAlgo) {
    PubKeyCoseAlgo[PubKeyCoseAlgo["ECDSA_WITH_SHA256"] = -7] = "ECDSA_WITH_SHA256";
})(PubKeyCoseAlgo || (PubKeyCoseAlgo = {}));
class WebAuthnIdentity extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignIdentity"] {
    constructor(rawId, cose, authenticatorAttachment){
        super();
        this.rawId = rawId;
        this.authenticatorAttachment = authenticatorAttachment;
        this._publicKey = new CosePublicKey(cose);
    }
    /**
     * Create an identity from a JSON serialization.
     * @param json - json to parse
     */ static fromJSON(json) {
        const { publicKey, rawId } = JSON.parse(json);
        if (typeof publicKey !== 'string' || typeof rawId !== 'string') {
            throw new Error('Invalid JSON string.');
        }
        return new this((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromHex"])(rawId), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromHex"])(publicKey), undefined);
    }
    /**
     * Create an identity.
     * @param credentialCreationOptions an optional CredentialCreationOptions Challenge
     */ static async create(credentialCreationOptions) {
        var _a;
        const creds = await _createCredential(credentialCreationOptions);
        if (!creds || creds.type !== 'public-key') {
            throw new Error('Could not create credentials.');
        }
        const response = creds.response;
        if (response.attestationObject === undefined) {
            throw new Error('Was expecting an attestation response.');
        }
        // Parse the attestationObject as CBOR.
        const attObject = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$borc$2f$src$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].decodeFirst(new Uint8Array(response.attestationObject));
        return new this(creds.rawId, _authDataToCose(attObject.authData), (_a = creds.authenticatorAttachment) !== null && _a !== void 0 ? _a : undefined);
    }
    getPublicKey() {
        return this._publicKey;
    }
    /**
     * WebAuthn level 3 spec introduces a new attribute on successful WebAuthn interactions,
     * see https://w3c.github.io/webauthn/#dom-publickeycredential-authenticatorattachment.
     * This attribute is already implemented for Chrome, Safari and Edge.
     *
     * Given the attribute is only available after a successful interaction, the information is
     * provided opportunistically and might also be `undefined`.
     */ getAuthenticatorAttachment() {
        return this.authenticatorAttachment;
    }
    async sign(blob) {
        const result = await navigator.credentials.get({
            publicKey: {
                allowCredentials: [
                    {
                        type: 'public-key',
                        id: this.rawId
                    }
                ],
                challenge: blob,
                userVerification: 'preferred'
            }
        });
        if (result.authenticatorAttachment !== null) {
            this.authenticatorAttachment = result.authenticatorAttachment;
        }
        const response = result.response;
        const cbor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$borc$2f$src$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].encode(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$borc$2f$src$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Tagged(55799, {
            authenticator_data: new Uint8Array(response.authenticatorData),
            client_data_json: new TextDecoder().decode(response.clientDataJSON),
            signature: new Uint8Array(response.signature)
        }));
        if (!cbor) {
            throw new Error('failed to encode cbor');
        }
        return cbor.buffer;
    }
    /**
     * Allow for JSON serialization of all information needed to reuse this identity.
     */ toJSON() {
        return {
            publicKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toHex"])(this._publicKey.getCose()),
            rawId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$utils$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toHex"])(this.rawId)
        };
    }
} //# sourceMappingURL=webauthn.js.map
}}),
"[project]/node_modules/@dfinity/identity/lib/esm/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Secp256k1KeyIdentity": (()=>Secp256k1KeyIdentity)
});
;
;
;
;
;
;
class Secp256k1KeyIdentity {
    constructor(){
        throw new Error('Secp256k1KeyIdentity has been moved to a new repo: @dfinity/identity-secp256k1');
    }
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@dfinity/identity/lib/esm/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/identity/ed25519.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$ecdsa$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/identity/ecdsa.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$delegation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/identity/delegation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$partial$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/identity/partial.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$webauthn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/identity/webauthn.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@dfinity/auth-client/lib/esm/idleManager.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "IdleManager": (()=>IdleManager)
});
const events = [
    'mousedown',
    'mousemove',
    'keydown',
    'touchstart',
    'wheel'
];
class IdleManager {
    /**
     * @protected
     * @param options {@link IdleManagerOptions}
     */ constructor(options = {}){
        var _a;
        this.callbacks = [];
        this.idleTimeout = 10 * 60 * 1000;
        this.timeoutID = undefined;
        const { onIdle, idleTimeout = 10 * 60 * 1000 } = options || {};
        this.callbacks = onIdle ? [
            onIdle
        ] : [];
        this.idleTimeout = idleTimeout;
        const _resetTimer = this._resetTimer.bind(this);
        window.addEventListener('load', _resetTimer, true);
        events.forEach(function(name) {
            document.addEventListener(name, _resetTimer, true);
        });
        // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
        const debounce = (func, wait)=>{
            let timeout;
            return (...args)=>{
                // eslint-disable-next-line @typescript-eslint/no-this-alias
                const context = this;
                const later = function() {
                    timeout = undefined;
                    func.apply(context, args);
                };
                clearTimeout(timeout);
                timeout = window.setTimeout(later, wait);
            };
        };
        if (options === null || options === void 0 ? void 0 : options.captureScroll) {
            // debounce scroll events
            const scroll = debounce(_resetTimer, (_a = options === null || options === void 0 ? void 0 : options.scrollDebounce) !== null && _a !== void 0 ? _a : 100);
            window.addEventListener('scroll', scroll, true);
        }
        _resetTimer();
    }
    /**
     * Creates an {@link IdleManager}
     * @param {IdleManagerOptions} options Optional configuration
     * @see {@link IdleManagerOptions}
     * @param options.onIdle Callback once user has been idle. Use to prompt for fresh login, and use `Actor.agentOf(your_actor).invalidateIdentity()` to protect the user
     * @param options.idleTimeout timeout in ms
     * @param options.captureScroll capture scroll events
     * @param options.scrollDebounce scroll debounce time in ms
     */ static create(options = {}) {
        return new this(options);
    }
    /**
     * @param {IdleCB} callback function to be called when user goes idle
     */ registerCallback(callback) {
        this.callbacks.push(callback);
    }
    /**
     * Cleans up the idle manager and its listeners
     */ exit() {
        clearTimeout(this.timeoutID);
        window.removeEventListener('load', this._resetTimer, true);
        const _resetTimer = this._resetTimer.bind(this);
        events.forEach(function(name) {
            document.removeEventListener(name, _resetTimer, true);
        });
        this.callbacks.forEach((cb)=>cb());
    }
    /**
     * Resets the timeouts during cleanup
     */ _resetTimer() {
        const exit = this.exit.bind(this);
        window.clearTimeout(this.timeoutID);
        this.timeoutID = window.setTimeout(exit, this.idleTimeout);
    }
} //# sourceMappingURL=idleManager.js.map
}}),
"[project]/node_modules/@dfinity/auth-client/lib/esm/db.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "IdbKeyVal": (()=>IdbKeyVal)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/idb/build/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/idb/build/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/auth-client/lib/esm/storage.js [app-client] (ecmascript)");
;
;
const AUTH_DB_NAME = 'auth-client-db';
const OBJECT_STORE_NAME = 'ic-keyval';
const _openDbStore = async (dbName = AUTH_DB_NAME, storeName = OBJECT_STORE_NAME, version)=>{
    // Clear legacy stored delegations
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBrowser"] && (localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_DELEGATION"]))) {
        localStorage.removeItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_DELEGATION"]);
        localStorage.removeItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_KEY"]);
    }
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["openDB"])(dbName, version, {
        upgrade: (database)=>{
            if (database.objectStoreNames.contains(storeName)) {
                database.clear(storeName);
            }
            database.createObjectStore(storeName);
        }
    });
};
async function _getValue(db, storeName, key) {
    return await db.get(storeName, key);
}
async function _setValue(db, storeName, key, value) {
    return await db.put(storeName, value, key);
}
async function _removeValue(db, storeName, key) {
    return await db.delete(storeName, key);
}
class IdbKeyVal {
    // Do not use - instead prefer create
    constructor(_db, _storeName){
        this._db = _db;
        this._storeName = _storeName;
    }
    /**
     * @param {DBCreateOptions} options - DBCreateOptions
     * @param {DBCreateOptions['dbName']} options.dbName name for the indexeddb database
     * @default
     * @param {DBCreateOptions['storeName']} options.storeName name for the indexeddb Data Store
     * @default
     * @param {DBCreateOptions['version']} options.version version of the database. Increment to safely upgrade
     * @constructs an {@link IdbKeyVal}
     */ static async create(options) {
        const { dbName = AUTH_DB_NAME, storeName = OBJECT_STORE_NAME, version = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DB_VERSION"] } = options !== null && options !== void 0 ? options : {};
        const db = await _openDbStore(dbName, storeName, version);
        return new IdbKeyVal(db, storeName);
    }
    /**
     * Basic setter
     * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]
     * @param value value to set
     * @returns void
     */ async set(key, value) {
        return await _setValue(this._db, this._storeName, key, value);
    }
    /**
     * Basic getter
     * Pass in a type T for type safety if you know the type the value will have if it is found
     * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]
     * @returns `Promise<T | null>`
     * @example
     * await get<string>('exampleKey') -> 'exampleValue'
     */ async get(key) {
        var _a;
        return (_a = await _getValue(this._db, this._storeName, key)) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Remove a key
     * @param key {@link IDBValidKey}
     * @returns void
     */ async remove(key) {
        return await _removeValue(this._db, this._storeName, key);
    }
} //# sourceMappingURL=db.js.map
}}),
"[project]/node_modules/@dfinity/auth-client/lib/esm/storage.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DB_VERSION": (()=>DB_VERSION),
    "IdbStorage": (()=>IdbStorage),
    "KEY_STORAGE_DELEGATION": (()=>KEY_STORAGE_DELEGATION),
    "KEY_STORAGE_KEY": (()=>KEY_STORAGE_KEY),
    "KEY_VECTOR": (()=>KEY_VECTOR),
    "LocalStorage": (()=>LocalStorage),
    "isBrowser": (()=>isBrowser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$db$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/auth-client/lib/esm/db.js [app-client] (ecmascript)");
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _IdbStorage_options;
;
const KEY_STORAGE_KEY = 'identity';
const KEY_STORAGE_DELEGATION = 'delegation';
const KEY_VECTOR = 'iv';
const DB_VERSION = 1;
const isBrowser = typeof window !== 'undefined';
class LocalStorage {
    constructor(prefix = 'ic-', _localStorage){
        this.prefix = prefix;
        this._localStorage = _localStorage;
    }
    get(key) {
        return Promise.resolve(this._getLocalStorage().getItem(this.prefix + key));
    }
    set(key, value) {
        this._getLocalStorage().setItem(this.prefix + key, value);
        return Promise.resolve();
    }
    remove(key) {
        this._getLocalStorage().removeItem(this.prefix + key);
        return Promise.resolve();
    }
    _getLocalStorage() {
        if (this._localStorage) {
            return this._localStorage;
        }
        const ls = typeof window === 'undefined' ? typeof global === 'undefined' ? typeof self === 'undefined' ? undefined : self.localStorage : global.localStorage : window.localStorage;
        if (!ls) {
            throw new Error('Could not find local storage.');
        }
        return ls;
    }
}
class IdbStorage {
    /**
     * @param options - DBCreateOptions
     * @param options.dbName - name for the indexeddb database
     * @param options.storeName - name for the indexeddb Data Store
     * @param options.version - version of the database. Increment to safely upgrade
     * @constructs an {@link IdbStorage}
     * @example
     * ```typescript
     * const storage = new IdbStorage({ dbName: 'my-db', storeName: 'my-store', version: 2 });
     * ```
     */ constructor(options){
        _IdbStorage_options.set(this, void 0);
        __classPrivateFieldSet(this, _IdbStorage_options, options !== null && options !== void 0 ? options : {}, "f");
    }
    get _db() {
        return new Promise((resolve)=>{
            if (this.initializedDb) {
                resolve(this.initializedDb);
                return;
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$db$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IdbKeyVal"].create(__classPrivateFieldGet(this, _IdbStorage_options, "f")).then((db)=>{
                this.initializedDb = db;
                resolve(db);
            });
        });
    }
    async get(key) {
        const db = await this._db;
        return await db.get(key);
    // return (await db.get<string>(key)) ?? null;
    }
    async set(key, value) {
        const db = await this._db;
        await db.set(key, value);
    }
    async remove(key) {
        const db = await this._db;
        await db.remove(key);
    }
}
_IdbStorage_options = new WeakMap(); //# sourceMappingURL=storage.js.map
}}),
"[project]/node_modules/@dfinity/auth-client/lib/esm/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/** @module AuthClient */ __turbopack_context__.s({
    "AuthClient": (()=>AuthClient),
    "ERROR_USER_INTERRUPT": (()=>ERROR_USER_INTERRUPT)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/auth.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$delegation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/identity/delegation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/identity/ed25519.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$ecdsa$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/identity/ecdsa.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$idleManager$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/auth-client/lib/esm/idleManager.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/auth-client/lib/esm/storage.js [app-client] (ecmascript)");
;
;
;
;
;
;
const IDENTITY_PROVIDER_DEFAULT = 'https://identity.internetcomputer.org';
const IDENTITY_PROVIDER_ENDPOINT = '#authorize';
const ECDSA_KEY_LABEL = 'ECDSA';
const ED25519_KEY_LABEL = 'Ed25519';
const INTERRUPT_CHECK_INTERVAL = 500;
const ERROR_USER_INTERRUPT = 'UserInterrupt';
;
class AuthClient {
    constructor(_identity, _key, _chain, _storage, idleManager, _createOptions, // A handle on the IdP window.
    _idpWindow, // The event handler for processing events from the IdP.
    _eventHandler){
        this._identity = _identity;
        this._key = _key;
        this._chain = _chain;
        this._storage = _storage;
        this.idleManager = idleManager;
        this._createOptions = _createOptions;
        this._idpWindow = _idpWindow;
        this._eventHandler = _eventHandler;
        this._registerDefaultIdleCallback();
    }
    /**
     * Create an AuthClient to manage authentication and identity
     * @constructs
     * @param {AuthClientCreateOptions} options - Options for creating an {@link AuthClient}
     * @see {@link AuthClientCreateOptions}
     * @param options.identity Optional Identity to use as the base
     * @see {@link SignIdentity}
     * @param options.storage Storage mechanism for delegration credentials
     * @see {@link AuthClientStorage}
     * @param options.keyType Type of key to use for the base key
     * @param {IdleOptions} options.idleOptions Configures an {@link IdleManager}
     * @see {@link IdleOptions}
     * Default behavior is to clear stored identity and reload the page when a user goes idle, unless you set the disableDefaultIdleCallback flag or pass in a custom idle callback.
     * @example
     * const authClient = await AuthClient.create({
     *   idleOptions: {
     *     disableIdle: true
     *   }
     * })
     */ static async create(options = {}) {
        var _a, _b, _c;
        const storage = (_a = options.storage) !== null && _a !== void 0 ? _a : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IdbStorage"]();
        const keyType = (_b = options.keyType) !== null && _b !== void 0 ? _b : ECDSA_KEY_LABEL;
        let key = null;
        if (options.identity) {
            key = options.identity;
        } else {
            let maybeIdentityStorage = await storage.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_KEY"]);
            if (!maybeIdentityStorage && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBrowser"]) {
                // Attempt to migrate from localstorage
                try {
                    const fallbackLocalStorage = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LocalStorage"]();
                    const localChain = await fallbackLocalStorage.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_DELEGATION"]);
                    const localKey = await fallbackLocalStorage.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_KEY"]);
                    // not relevant for Ed25519
                    if (localChain && localKey && keyType === ECDSA_KEY_LABEL) {
                        console.log('Discovered an identity stored in localstorage. Migrating to IndexedDB');
                        await storage.set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_DELEGATION"], localChain);
                        await storage.set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_KEY"], localKey);
                        maybeIdentityStorage = localChain;
                        // clean up
                        await fallbackLocalStorage.remove(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_DELEGATION"]);
                        await fallbackLocalStorage.remove(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_KEY"]);
                    }
                } catch (error) {
                    console.error('error while attempting to recover localstorage: ' + error);
                }
            }
            if (maybeIdentityStorage) {
                try {
                    if (typeof maybeIdentityStorage === 'object') {
                        if (keyType === ED25519_KEY_LABEL && typeof maybeIdentityStorage === 'string') {
                            key = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Ed25519KeyIdentity"].fromJSON(maybeIdentityStorage);
                        } else {
                            key = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$ecdsa$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ECDSAKeyIdentity"].fromKeyPair(maybeIdentityStorage);
                        }
                    } else if (typeof maybeIdentityStorage === 'string') {
                        // This is a legacy identity, which is a serialized Ed25519KeyIdentity.
                        key = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Ed25519KeyIdentity"].fromJSON(maybeIdentityStorage);
                    }
                } catch (_d) {
                // Ignore this, this means that the localStorage value isn't a valid Ed25519KeyIdentity or ECDSAKeyIdentity
                // serialization.
                }
            }
        }
        let identity = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AnonymousIdentity"]();
        let chain = null;
        if (key) {
            try {
                const chainStorage = await storage.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_DELEGATION"]);
                if (typeof chainStorage === 'object' && chainStorage !== null) {
                    throw new Error('Delegation chain is incorrectly stored. A delegation chain should be stored as a string.');
                }
                if (options.identity) {
                    identity = options.identity;
                } else if (chainStorage) {
                    chain = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$delegation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DelegationChain"].fromJSON(chainStorage);
                    // Verify that the delegation isn't expired.
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$delegation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDelegationValid"])(chain)) {
                        await _deleteStorage(storage);
                        key = null;
                    } else {
                        // If the key is a public key, then we create a PartialDelegationIdentity.
                        if ('toDer' in key) {
                            identity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$delegation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PartialDelegationIdentity"].fromDelegation(key, chain);
                        // otherwise, we create a DelegationIdentity.
                        } else {
                            identity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$delegation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DelegationIdentity"].fromDelegation(key, chain);
                        }
                    }
                }
            } catch (e) {
                console.error(e);
                // If there was a problem loading the chain, delete the key.
                await _deleteStorage(storage);
                key = null;
            }
        }
        let idleManager = undefined;
        if ((_c = options.idleOptions) === null || _c === void 0 ? void 0 : _c.disableIdle) {
            idleManager = undefined;
        } else if (chain || options.identity) {
            idleManager = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$idleManager$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IdleManager"].create(options.idleOptions);
        }
        if (!key) {
            // Create a new key (whether or not one was in storage).
            if (keyType === ED25519_KEY_LABEL) {
                key = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$ed25519$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Ed25519KeyIdentity"].generate();
                await storage.set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_KEY"], JSON.stringify(key.toJSON()));
            } else {
                if (options.storage && keyType === ECDSA_KEY_LABEL) {
                    console.warn(`You are using a custom storage provider that may not support CryptoKey storage. If you are using a custom storage provider that does not support CryptoKey storage, you should use '${ED25519_KEY_LABEL}' as the key type, as it can serialize to a string`);
                }
                key = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$ecdsa$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ECDSAKeyIdentity"].generate();
                await storage.set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_KEY"], key.getKeyPair());
            }
        }
        return new this(identity, key, chain, storage, idleManager, options);
    }
    _registerDefaultIdleCallback() {
        var _a, _b;
        const idleOptions = (_a = this._createOptions) === null || _a === void 0 ? void 0 : _a.idleOptions;
        /**
         * Default behavior is to clear stored identity and reload the page.
         * By either setting the disableDefaultIdleCallback flag or passing in a custom idle callback, we will ignore this config
         */ if (!(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.onIdle) && !(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.disableDefaultIdleCallback)) {
            (_b = this.idleManager) === null || _b === void 0 ? void 0 : _b.registerCallback(()=>{
                this.logout();
                location.reload();
            });
        }
    }
    async _handleSuccess(message, onSuccess) {
        var _a, _b;
        const delegations = message.delegations.map((signedDelegation)=>{
            return {
                delegation: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$delegation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Delegation"](signedDelegation.delegation.pubkey, signedDelegation.delegation.expiration, signedDelegation.delegation.targets),
                signature: signedDelegation.signature.buffer
            };
        });
        const delegationChain = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$delegation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DelegationChain"].fromDelegations(delegations, message.userPublicKey.buffer);
        const key = this._key;
        if (!key) {
            return;
        }
        this._chain = delegationChain;
        if ('toDer' in key) {
            this._identity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$delegation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PartialDelegationIdentity"].fromDelegation(key, this._chain);
        } else {
            this._identity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$identity$2f$delegation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DelegationIdentity"].fromDelegation(key, this._chain);
        }
        (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();
        const idleOptions = (_b = this._createOptions) === null || _b === void 0 ? void 0 : _b.idleOptions;
        // create the idle manager on a successful login if we haven't disabled it
        // and it doesn't already exist.
        if (!this.idleManager && !(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.disableIdle)) {
            this.idleManager = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$idleManager$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IdleManager"].create(idleOptions);
            this._registerDefaultIdleCallback();
        }
        this._removeEventListener();
        delete this._idpWindow;
        if (this._chain) {
            await this._storage.set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_DELEGATION"], JSON.stringify(this._chain.toJSON()));
        }
        // onSuccess should be the last thing to do to avoid consumers
        // interfering by navigating or refreshing the page
        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(message);
    }
    getIdentity() {
        return this._identity;
    }
    async isAuthenticated() {
        return !this.getIdentity().getPrincipal().isAnonymous() && this._chain !== null;
    }
    /**
     * AuthClient Login -
     * Opens up a new window to authenticate with Internet Identity
     * @param {AuthClientLoginOptions} options - Options for logging in
     * @param options.identityProvider Identity provider
     * @param options.maxTimeToLive Expiration of the authentication in nanoseconds
     * @param options.allowPinAuthentication If present, indicates whether or not the Identity Provider should allow the user to authenticate and/or register using a temporary key/PIN identity. Authenticating dapps may want to prevent users from using Temporary keys/PIN identities because Temporary keys/PIN identities are less secure than Passkeys (webauthn credentials) and because Temporary keys/PIN identities generally only live in a browser database (which may get cleared by the browser/OS).
     * @param options.derivationOrigin Origin for Identity Provider to use while generating the delegated identity
     * @param options.windowOpenerFeatures Configures the opened authentication window
     * @param options.onSuccess Callback once login has completed
     * @param options.onError Callback in case authentication fails
     * @example
     * const authClient = await AuthClient.create();
     * authClient.login({
     *  identityProvider: 'http://<canisterID>.127.0.0.1:8000',
     *  maxTimeToLive: BigInt (7) * BigInt(24) * BigInt(3_600_000_000_000), // 1 week
     *  windowOpenerFeatures: "toolbar=0,location=0,menubar=0,width=500,height=500,left=100,top=100",
     *  onSuccess: () => {
     *    console.log('Login Successful!');
     *  },
     *  onError: (error) => {
     *    console.error('Login Failed: ', error);
     *  }
     * });
     */ async login(options) {
        var _a, _b, _c, _d;
        // Set default maxTimeToLive to 8 hours
        const defaultTimeToLive = /* hours */ BigInt(8) * /* nanoseconds */ BigInt(3600000000000);
        // Create the URL of the IDP. (e.g. https://XXXX/#authorize)
        const identityProviderUrl = new URL(((_a = options === null || options === void 0 ? void 0 : options.identityProvider) === null || _a === void 0 ? void 0 : _a.toString()) || IDENTITY_PROVIDER_DEFAULT);
        // Set the correct hash if it isn't already set.
        identityProviderUrl.hash = IDENTITY_PROVIDER_ENDPOINT;
        // If `login` has been called previously, then close/remove any previous windows
        // and event listeners.
        (_b = this._idpWindow) === null || _b === void 0 ? void 0 : _b.close();
        this._removeEventListener();
        // Add an event listener to handle responses.
        this._eventHandler = this._getEventHandler(identityProviderUrl, Object.assign({
            maxTimeToLive: (_c = options === null || options === void 0 ? void 0 : options.maxTimeToLive) !== null && _c !== void 0 ? _c : defaultTimeToLive
        }, options));
        window.addEventListener('message', this._eventHandler);
        // Open a new window with the IDP provider.
        this._idpWindow = (_d = window.open(identityProviderUrl.toString(), 'idpWindow', options === null || options === void 0 ? void 0 : options.windowOpenerFeatures)) !== null && _d !== void 0 ? _d : undefined;
        // Check if the _idpWindow is closed by user.
        const checkInterruption = ()=>{
            // The _idpWindow is opened and not yet closed by the client
            if (this._idpWindow) {
                if (this._idpWindow.closed) {
                    this._handleFailure(ERROR_USER_INTERRUPT, options === null || options === void 0 ? void 0 : options.onError);
                } else {
                    setTimeout(checkInterruption, INTERRUPT_CHECK_INTERVAL);
                }
            }
        };
        checkInterruption();
    }
    _getEventHandler(identityProviderUrl, options) {
        return async (event)=>{
            var _a, _b, _c;
            if (event.origin !== identityProviderUrl.origin) {
                // Ignore any event that is not from the identity provider
                return;
            }
            const message = event.data;
            switch(message.kind){
                case 'authorize-ready':
                    {
                        // IDP is ready. Send a message to request authorization.
                        const request = Object.assign({
                            kind: 'authorize-client',
                            sessionPublicKey: new Uint8Array((_a = this._key) === null || _a === void 0 ? void 0 : _a.getPublicKey().toDer()),
                            maxTimeToLive: options === null || options === void 0 ? void 0 : options.maxTimeToLive,
                            allowPinAuthentication: options === null || options === void 0 ? void 0 : options.allowPinAuthentication,
                            derivationOrigin: (_b = options === null || options === void 0 ? void 0 : options.derivationOrigin) === null || _b === void 0 ? void 0 : _b.toString()
                        }, options === null || options === void 0 ? void 0 : options.customValues);
                        (_c = this._idpWindow) === null || _c === void 0 ? void 0 : _c.postMessage(request, identityProviderUrl.origin);
                        break;
                    }
                case 'authorize-client-success':
                    // Create the delegation chain and store it.
                    try {
                        await this._handleSuccess(message, options === null || options === void 0 ? void 0 : options.onSuccess);
                    } catch (err) {
                        this._handleFailure(err.message, options === null || options === void 0 ? void 0 : options.onError);
                    }
                    break;
                case 'authorize-client-failure':
                    this._handleFailure(message.text, options === null || options === void 0 ? void 0 : options.onError);
                    break;
                default:
                    break;
            }
        };
    }
    _handleFailure(errorMessage, onError) {
        var _a;
        (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();
        onError === null || onError === void 0 ? void 0 : onError(errorMessage);
        this._removeEventListener();
        delete this._idpWindow;
    }
    _removeEventListener() {
        if (this._eventHandler) {
            window.removeEventListener('message', this._eventHandler);
        }
        this._eventHandler = undefined;
    }
    async logout(options = {}) {
        await _deleteStorage(this._storage);
        // Reset this auth client to a non-authenticated state.
        this._identity = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AnonymousIdentity"]();
        this._chain = null;
        if (options.returnTo) {
            try {
                window.history.pushState({}, '', options.returnTo);
            } catch (_a) {
                window.location.href = options.returnTo;
            }
        }
    }
}
async function _deleteStorage(storage) {
    await storage.remove(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_KEY"]);
    await storage.remove(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_STORAGE_DELEGATION"]);
    await storage.remove(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEY_VECTOR"]);
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@dfinity/auth-client/lib/esm/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$identity$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/identity/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$idleManager$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/auth-client/lib/esm/idleManager.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$storage$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/auth-client/lib/esm/storage.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$db$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/auth-client/lib/esm/db.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/auth-client/lib/esm/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/idb/build/wrap-idb-value.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "a": (()=>reverseTransformCache),
    "i": (()=>instanceOfAny),
    "r": (()=>replaceTraps),
    "u": (()=>unwrap),
    "w": (()=>wrap)
});
const instanceOfAny = (object, constructors)=>constructors.some((c)=>object instanceof c);
let idbProxyableTypes;
let cursorAdvanceMethods;
// This is a function to prevent it throwing up in node environments.
function getIdbProxyableTypes() {
    return idbProxyableTypes || (idbProxyableTypes = [
        IDBDatabase,
        IDBObjectStore,
        IDBIndex,
        IDBCursor,
        IDBTransaction
    ]);
}
// This is a function to prevent it throwing up in node environments.
function getCursorAdvanceMethods() {
    return cursorAdvanceMethods || (cursorAdvanceMethods = [
        IDBCursor.prototype.advance,
        IDBCursor.prototype.continue,
        IDBCursor.prototype.continuePrimaryKey
    ]);
}
const cursorRequestMap = new WeakMap();
const transactionDoneMap = new WeakMap();
const transactionStoreNamesMap = new WeakMap();
const transformCache = new WeakMap();
const reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
    const promise = new Promise((resolve, reject)=>{
        const unlisten = ()=>{
            request.removeEventListener('success', success);
            request.removeEventListener('error', error);
        };
        const success = ()=>{
            resolve(wrap(request.result));
            unlisten();
        };
        const error = ()=>{
            reject(request.error);
            unlisten();
        };
        request.addEventListener('success', success);
        request.addEventListener('error', error);
    });
    promise.then((value)=>{
        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
        // (see wrapFunction).
        if (value instanceof IDBCursor) {
            cursorRequestMap.set(value, request);
        }
    // Catching to avoid "Uncaught Promise exceptions"
    }).catch(()=>{});
    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
    // is because we create many promises from a single IDBRequest.
    reverseTransformCache.set(promise, request);
    return promise;
}
function cacheDonePromiseForTransaction(tx) {
    // Early bail if we've already created a done promise for this transaction.
    if (transactionDoneMap.has(tx)) return;
    const done = new Promise((resolve, reject)=>{
        const unlisten = ()=>{
            tx.removeEventListener('complete', complete);
            tx.removeEventListener('error', error);
            tx.removeEventListener('abort', error);
        };
        const complete = ()=>{
            resolve();
            unlisten();
        };
        const error = ()=>{
            reject(tx.error || new DOMException('AbortError', 'AbortError'));
            unlisten();
        };
        tx.addEventListener('complete', complete);
        tx.addEventListener('error', error);
        tx.addEventListener('abort', error);
    });
    // Cache it for later retrieval.
    transactionDoneMap.set(tx, done);
}
let idbProxyTraps = {
    get (target, prop, receiver) {
        if (target instanceof IDBTransaction) {
            // Special handling for transaction.done.
            if (prop === 'done') return transactionDoneMap.get(target);
            // Polyfill for objectStoreNames because of Edge.
            if (prop === 'objectStoreNames') {
                return target.objectStoreNames || transactionStoreNamesMap.get(target);
            }
            // Make tx.store return the only store in the transaction, or undefined if there are many.
            if (prop === 'store') {
                return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);
            }
        }
        // Else transform whatever we get back.
        return wrap(target[prop]);
    },
    set (target, prop, value) {
        target[prop] = value;
        return true;
    },
    has (target, prop) {
        if (target instanceof IDBTransaction && (prop === 'done' || prop === 'store')) {
            return true;
        }
        return prop in target;
    }
};
function replaceTraps(callback) {
    idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
    // Due to expected object equality (which is enforced by the caching in `wrap`), we
    // only create one new func per func.
    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
    if (func === IDBDatabase.prototype.transaction && !('objectStoreNames' in IDBTransaction.prototype)) {
        return function(storeNames, ...args) {
            const tx = func.call(unwrap(this), storeNames, ...args);
            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [
                storeNames
            ]);
            return wrap(tx);
        };
    }
    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
    // with real promises, so each advance methods returns a new promise for the cursor object, or
    // undefined if the end of the cursor has been reached.
    if (getCursorAdvanceMethods().includes(func)) {
        return function(...args) {
            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
            // the original object.
            func.apply(unwrap(this), args);
            return wrap(cursorRequestMap.get(this));
        };
    }
    return function(...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        return wrap(func.apply(unwrap(this), args));
    };
}
function transformCachableValue(value) {
    if (typeof value === 'function') return wrapFunction(value);
    // This doesn't return, it just creates a 'done' promise for the transaction,
    // which is later returned for transaction.done (see idbObjectHandler).
    if (value instanceof IDBTransaction) cacheDonePromiseForTransaction(value);
    if (instanceOfAny(value, getIdbProxyableTypes())) return new Proxy(value, idbProxyTraps);
    // Return the same value back if we're not going to transform it.
    return value;
}
function wrap(value) {
    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
    if (value instanceof IDBRequest) return promisifyRequest(value);
    // If we've already transformed this value before, reuse the transformed value.
    // This is faster, but it also provides object equality.
    if (transformCache.has(value)) return transformCache.get(value);
    const newValue = transformCachableValue(value);
    // Not all types are transformed.
    // These may be primitive types, so they can't be WeakMap keys.
    if (newValue !== value) {
        transformCache.set(value, newValue);
        reverseTransformCache.set(newValue, value);
    }
    return newValue;
}
const unwrap = (value)=>reverseTransformCache.get(value);
;
}}),
"[project]/node_modules/idb/build/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "deleteDB": (()=>deleteDB),
    "openDB": (()=>openDB)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$wrap$2d$idb$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/idb/build/wrap-idb-value.js [app-client] (ecmascript)");
;
;
/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */ function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
    const request = indexedDB.open(name, version);
    const openPromise = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$wrap$2d$idb$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["w"])(request);
    if (upgrade) {
        request.addEventListener('upgradeneeded', (event)=>{
            upgrade((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$wrap$2d$idb$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["w"])(request.result), event.oldVersion, event.newVersion, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$wrap$2d$idb$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["w"])(request.transaction), event);
        });
    }
    if (blocked) {
        request.addEventListener('blocked', (event)=>blocked(// Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
            event.oldVersion, event.newVersion, event));
    }
    openPromise.then((db)=>{
        if (terminated) db.addEventListener('close', ()=>terminated());
        if (blocking) {
            db.addEventListener('versionchange', (event)=>blocking(event.oldVersion, event.newVersion, event));
        }
    }).catch(()=>{});
    return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */ function deleteDB(name, { blocked } = {}) {
    const request = indexedDB.deleteDatabase(name);
    if (blocked) {
        request.addEventListener('blocked', (event)=>blocked(// Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
            event.oldVersion, event));
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$wrap$2d$idb$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["w"])(request).then(()=>undefined);
}
const readMethods = [
    'get',
    'getKey',
    'getAll',
    'getAllKeys',
    'count'
];
const writeMethods = [
    'put',
    'add',
    'delete',
    'clear'
];
const cachedMethods = new Map();
function getMethod(target, prop) {
    if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) {
        return;
    }
    if (cachedMethods.get(prop)) return cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, '');
    const useIndex = prop !== targetFuncName;
    const isWrite = writeMethods.includes(targetFuncName);
    if (// Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {
        return;
    }
    const method = async function(storeName, ...args) {
        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
        let target = tx.store;
        if (useIndex) target = target.index(args.shift());
        // Must reject if op rejects.
        // If it's a write operation, must reject if tx.done rejects.
        // Must reject with op rejection first.
        // Must resolve with op value.
        // Must handle both promises (no unhandled rejections)
        return (await Promise.all([
            target[targetFuncName](...args),
            isWrite && tx.done
        ]))[0];
    };
    cachedMethods.set(prop, method);
    return method;
}
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$wrap$2d$idb$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["r"])((oldTraps)=>({
        ...oldTraps,
        get: (target, prop, receiver)=>getMethod(target, prop) || oldTraps.get(target, prop, receiver),
        has: (target, prop)=>!!getMethod(target, prop) || oldTraps.has(target, prop)
    }));
;
}}),
"[project]/node_modules/idb/build/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$wrap$2d$idb$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/idb/build/wrap-idb-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$idb$2f$build$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/idb/build/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@junobuild/core/dist/browser/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "InitError": (()=>G),
    "InternetIdentityProvider": (()=>B),
    "ListError": (()=>Y),
    "NFIDProvider": (()=>St),
    "SignInError": (()=>q),
    "SignInInitError": (()=>$),
    "SignInUserInterruptError": (()=>H),
    "authSubscribe": (()=>Tr),
    "countAssets": (()=>ir),
    "countDocs": (()=>_s),
    "deleteAsset": (()=>ar),
    "deleteDoc": (()=>ps),
    "deleteFilteredAssets": (()=>lr),
    "deleteFilteredDocs": (()=>us),
    "deleteManyAssets": (()=>cr),
    "deleteManyDocs": (()=>ds),
    "downloadUrl": (()=>ce),
    "getAsset": (()=>pr),
    "getDoc": (()=>Ht),
    "getManyAssets": (()=>dr),
    "getManyDocs": (()=>cs),
    "getSatelliteExtendedActor": (()=>qs),
    "initJuno": (()=>Ar),
    "initSatellite": (()=>De),
    "listAssets": (()=>nr),
    "listDocs": (()=>ms),
    "setDoc": (()=>Gt),
    "setManyDocs": (()=>ls),
    "signIn": (()=>He),
    "signOut": (()=>ut),
    "unsafeIdentity": (()=>Ge),
    "uploadBlob": (()=>sr),
    "uploadFile": (()=>rr)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/utils/dist/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/auth-client/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/auth-client/lib/esm/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$actor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/actor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$agent$2f$http$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/agent/http/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/principal/lib/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dfinity/agent/lib/esm/auth.js [app-client] (ecmascript)");
const __TURBOPACK__import$2e$meta__ = {
    get url () {
        return `file://${__turbopack_context__.P("node_modules/@junobuild/core/dist/browser/index.js")}`;
    }
};
;
;
var x = class {
    callbacks = [];
    populate(e) {
        this.callbacks.forEach(({ callback: o })=>o(e));
    }
    subscribe(e) {
        let o = Symbol();
        return this.callbacks.push({
            id: o,
            callback: e
        }), ()=>this.callbacks = this.callbacks.filter(({ id: s })=>s !== o);
    }
};
var T = class t extends x {
    static instance;
    authUser = null;
    constructor(){
        super();
    }
    static getInstance() {
        return t.instance || (t.instance = new t), t.instance;
    }
    set(e) {
        this.authUser = e, this.populate(e);
    }
    get() {
        return this.authUser;
    }
    subscribe(e) {
        let o = super.subscribe(e);
        return e(this.authUser), o;
    }
    reset() {
        this.authUser = null, this.populate(this.authUser);
    }
};
var tt = ({ message: t, detail: e })=>{
    let o = new CustomEvent(t, {
        detail: e,
        bubbles: !0
    });
    document.dispatchEvent(o);
};
;
;
var yt = BigInt(144e11), Ot = !1, ft = {
    width: 576,
    height: 576
}, Rt = {
    width: 505,
    height: 705
}, At = "internetcomputer.org";
;
var P = "http://127.0.0.1:5987", Tt = "rdmx6-jaaaa-aaaaa-aaadq-cai";
var f = class t extends x {
    static instance;
    env;
    constructor(){
        super();
    }
    static getInstance() {
        return t.instance || (t.instance = new t), t.instance;
    }
    set(e) {
        this.env = e, this.populate(e);
    }
    get() {
        return this.env;
    }
    subscribe(e) {
        let o = super.subscribe(e);
        return e(this.env), o;
    }
};
;
;
var gt = async (t)=>{
    let e = new Blob([
        JSON.stringify(t, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsonReplacer"])
    ], {
        type: "application/json; charset=utf-8"
    });
    return new Uint8Array(await e.arrayBuffer());
}, J = async (t)=>{
    let e = new Blob([
        t instanceof Uint8Array ? t : new Uint8Array(t)
    ], {
        type: "application/json; charset=utf-8"
    });
    return JSON.parse(await e.text(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsonReviver"]);
}, K = ()=>typeof window < "u";
var et = ({ width: t, height: e })=>{
    if (!K() || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(window) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(window.top)) return;
    let { top: { innerWidth: o, innerHeight: s } } = window, r = s / 2 + screenY - e / 2, n = o / 2 + screenX - t / 2;
    return `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=no, copyhistory=no, width=${t}, height=${e}, top=${r}, left=${n}`;
};
var B = class {
    #t;
    constructor({ domain: e }){
        this.#t = e;
    }
    get id() {
        return "internet_identity";
    }
    signInOptions({ windowed: e }) {
        let o = ()=>{
            let s = f.getInstance().get()?.container;
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(s) || s === !1) return `https://identity.${this.#t ?? At}`;
            let r = f.getInstance().get(), n = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(r) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(r?.internetIdentityId) ? r.internetIdentityId : Tt, { host: i, protocol: a } = new URL(s === !0 ? P : s);
            return /apple/i.test(navigator?.vendor) ? `${a}//${i}?canisterId=${n}` : `${a}//${n}.${i.replace("127.0.0.1", "localhost")}`;
        };
        return {
            ...e !== !1 && {
                windowOpenerFeatures: et(ft)
            },
            identityProvider: o()
        };
    }
}, St = class {
    #t;
    #e;
    constructor({ appName: e, logoUrl: o }){
        this.#t = e, this.#e = o;
    }
    get id() {
        return "nfid";
    }
    signInOptions({ windowed: e }) {
        return {
            ...e !== !1 && {
                windowOpenerFeatures: et(Rt)
            },
            identityProvider: `https://nfid.one/authenticate/?applicationName=${encodeURI(this.#t)}&applicationLogo=${encodeURI(this.#e)}`
        };
    }
};
;
;
;
;
var w = class t {
    static instance;
    #t = void 0;
    constructor(){}
    static getInstance() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(t.instance) && (t.instance = new t), t.instance;
    }
    async getAgent({ identity: e, ...o }) {
        let s = e.getPrincipal().toText();
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(this.#t) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(this.#t[s])) {
            let r = await this.createAgent({
                identity: e,
                ...o
            });
            return this.#t = {
                ...this.#t ?? {},
                [s]: r
            }, r;
        }
        return this.#t[s];
    }
    reset() {
        this.#t = null;
    }
    async createAgent({ identity: e, fetch: o, container: s }) {
        let n = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(s) && s !== !1 ? s === !0 ? P : s : "https://icp-api.io", i = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(s);
        return await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$agent$2f$http$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["HttpAgent"].create({
            identity: e,
            shouldFetchRootKey: i,
            host: n,
            ...o && {
                fetch: o
            }
        });
    }
};
var U = class t {
    static instance;
    #t = void 0;
    constructor(){}
    static getInstance() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(t.instance) && (t.instance = new t), t.instance;
    }
    async getActor({ satelliteId: e, identity: o, buildType: s, ...r }) {
        let n = `${s}#${o.getPrincipal().toText()}#${e};`;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(this.#t) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(this.#t[n])) {
            let i = await this.createActor({
                satelliteId: e,
                identity: o,
                ...r
            });
            return this.#t = {
                ...this.#t ?? {},
                [n]: i
            }, i;
        }
        return this.#t[n];
    }
    reset() {
        this.#t = null;
    }
    async createActor({ idlFactory: e, satelliteId: o, ...s }) {
        let r = await w.getInstance().getAgent(s);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$actor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Actor"].createActor(e, {
            agent: r,
            canisterId: o
        });
    }
};
var q = class extends Error {
}, $ = class extends Error {
}, H = class extends Error {
}, G = class extends Error {
}, Y = class extends Error {
};
;
var W = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthClient"].create({
        idleOptions: {
            disableIdle: !0,
            disableDefaultIdleCallback: !0
        }
    });
;
var rt = ({ error: t, type: e })=>typeof t == "string" ? t.includes(e) : t instanceof Error ? t.message.includes(e) : !1;
var xt = "juno.datastore.error.user.cannot_update";
;
var Pt = async ({ data: t })=>{
    try {
        return await J(t);
    } catch (e) {
        console.error("The data parsing has failed, mapping to undefined as a fallback.", e);
        return;
    }
};
;
var it = async (t)=>{
    let { data: e, version: o, description: s } = t;
    return {
        description: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])(s),
        data: await gt(e),
        version: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])(o)
    };
}, at = (t)=>{
    let { version: e } = t;
    return {
        version: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])(e)
    };
}, M = async ({ doc: t, key: e })=>{
    let { owner: o, version: s, description: r, data: n, ...i } = t;
    return {
        key: e,
        description: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(r),
        owner: o.toText(),
        data: await J(n),
        version: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(s),
        ...i
    };
};
;
;
var Ut = (t)=>{
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(t)) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])();
    switch(t.matcher){
        case "equal":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])({
                Equal: t.timestamp
            });
        case "greaterThan":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])({
                GreaterThan: t.timestamp
            });
        case "lessThan":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])({
                LessThan: t.timestamp
            });
        case "between":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])({
                Between: [
                    t.timestamps.start,
                    t.timestamps.end
                ]
            });
        default:
            throw new Y("Invalid list matcher for timestamp", t);
    }
}, S = ({ matcher: t, paginate: e, order: o, owner: s })=>({
        matcher: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(t) ? [] : [
            {
                key: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])(t.key),
                description: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])(t.description),
                created_at: Ut(t.createdAt),
                updated_at: Ut(t.updatedAt)
            }
        ],
        paginate: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(e) ? void 0 : {
            start_after: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])(e.startAfter),
            limit: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(e.limit) ? void 0 : BigInt(e.limit))
        }),
        order: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(o) ? void 0 : {
            desc: o.desc,
            field: o.field === "created_at" ? {
                CreatedAt: null
            } : o.field === "updated_at" ? {
                UpdatedAt: null
            } : {
                Keys: null
            }
        }),
        owner: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(s) ? void 0 : typeof s == "string" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$principal$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Principal"].fromText(s) : s)
    });
;
var vt = ({ IDL: t })=>{
    let e = t.Record({
        batch_id: t.Nat,
        headers: t.Vec(t.Tuple(t.Text, t.Text)),
        chunk_ids: t.Vec(t.Nat)
    }), o = t.Variant({
        UpdatedAt: t.Null,
        Keys: t.Null,
        CreatedAt: t.Null
    }), s = t.Record({
        field: o,
        desc: t.Bool
    }), r = t.Variant({
        Equal: t.Nat64,
        Between: t.Tuple(t.Nat64, t.Nat64),
        GreaterThan: t.Nat64,
        LessThan: t.Nat64
    }), n = t.Record({
        key: t.Opt(t.Text),
        updated_at: t.Opt(r),
        description: t.Opt(t.Text),
        created_at: t.Opt(r)
    }), i = t.Record({
        start_after: t.Opt(t.Text),
        limit: t.Opt(t.Nat64)
    }), a = t.Record({
        order: t.Opt(s),
        owner: t.Opt(t.Principal),
        matcher: t.Opt(n),
        paginate: t.Opt(i)
    }), p = t.Record({
        controllers: t.Vec(t.Principal)
    }), y = t.Variant({
        Write: t.Null,
        Admin: t.Null
    }), d = t.Record({
        updated_at: t.Nat64,
        metadata: t.Vec(t.Tuple(t.Text, t.Text)),
        created_at: t.Nat64,
        scope: y,
        expires_at: t.Opt(t.Nat64)
    }), _ = t.Record({
        version: t.Opt(t.Nat64)
    }), m = t.Variant({
        Db: t.Null,
        Storage: t.Null
    }), g = t.Record({
        version: t.Opt(t.Nat64)
    }), N = t.Record({
        cycles: t.Nat,
        destination_id: t.Principal
    }), A = t.Record({
        token: t.Opt(t.Text),
        collection: t.Text,
        owner: t.Principal,
        name: t.Text,
        description: t.Opt(t.Text),
        full_path: t.Text
    }), E = t.Record({
        modified: t.Nat64,
        sha256: t.Vec(t.Nat8),
        total_length: t.Nat
    }), u = t.Record({
        key: A,
        updated_at: t.Nat64,
        encodings: t.Vec(t.Tuple(t.Text, E)),
        headers: t.Vec(t.Tuple(t.Text, t.Text)),
        created_at: t.Nat64,
        version: t.Opt(t.Nat64)
    }), h = t.Record({
        derivation_origin: t.Opt(t.Text),
        external_alternative_origins: t.Opt(t.Vec(t.Text))
    }), b = t.Record({
        internet_identity: t.Opt(h)
    }), j = t.Record({
        stable: t.Opt(t.Nat64),
        heap: t.Opt(t.Nat64)
    }), k = t.Record({
        max_memory_size: t.Opt(j)
    }), le = t.Variant({
        Deny: t.Null,
        AllowAny: t.Null,
        SameOrigin: t.Null
    }), pe = t.Variant({
        Deny: t.Null,
        Allow: t.Null
    }), de = t.Record({
        status_code: t.Nat16,
        location: t.Text
    }), Z = t.Record({
        iframe: t.Opt(le),
        rewrites: t.Vec(t.Tuple(t.Text, t.Text)),
        headers: t.Vec(t.Tuple(t.Text, t.Vec(t.Tuple(t.Text, t.Text)))),
        max_memory_size: t.Opt(j),
        raw_access: t.Opt(pe),
        redirects: t.Opt(t.Vec(t.Tuple(t.Text, de)))
    }), ue = t.Record({
        db: t.Opt(k),
        authentication: t.Opt(b),
        storage: Z
    }), F = t.Record({
        updated_at: t.Nat64,
        owner: t.Principal,
        data: t.Vec(t.Nat8),
        description: t.Opt(t.Text),
        created_at: t.Nat64,
        version: t.Opt(t.Nat64)
    }), D = t.Variant({
        Heap: t.Null,
        Stable: t.Null
    }), V = t.Variant({
        Controllers: t.Null,
        Private: t.Null,
        Public: t.Null,
        Managed: t.Null
    }), mt = t.Record({
        max_tokens: t.Nat64,
        time_per_token_ns: t.Nat64
    }), I = t.Record({
        max_capacity: t.Opt(t.Nat32),
        memory: t.Opt(D),
        updated_at: t.Nat64,
        max_size: t.Opt(t.Nat),
        read: V,
        created_at: t.Nat64,
        version: t.Opt(t.Nat64),
        mutable_permissions: t.Opt(t.Bool),
        rate_config: t.Opt(mt),
        write: V,
        max_changes_per_user: t.Opt(t.Nat32)
    }), me = t.Record({
        url: t.Text,
        method: t.Text,
        body: t.Vec(t.Nat8),
        headers: t.Vec(t.Tuple(t.Text, t.Text)),
        certificate_version: t.Opt(t.Nat16)
    }), L = t.Record({
        memory: D,
        token: t.Opt(t.Text),
        sha256: t.Opt(t.Vec(t.Nat8)),
        headers: t.Vec(t.Tuple(t.Text, t.Text)),
        index: t.Nat64,
        encoding_type: t.Text,
        full_path: t.Text
    }), _e = t.Variant({
        Callback: t.Record({
            token: L,
            callback: t.Func([], [], [
                "query"
            ])
        })
    }), ye = t.Record({
        body: t.Vec(t.Nat8),
        headers: t.Vec(t.Tuple(t.Text, t.Text)),
        streaming_strategy: t.Opt(_e),
        status_code: t.Nat16
    }), Oe = t.Record({
        token: t.Opt(L),
        body: t.Vec(t.Nat8)
    }), fe = t.Record({
        token: t.Opt(t.Text),
        collection: t.Text,
        name: t.Text,
        description: t.Opt(t.Text),
        encoding_type: t.Opt(t.Text),
        full_path: t.Text
    }), Re = t.Record({
        batch_id: t.Nat
    }), Ae = t.Record({
        matches_pages: t.Opt(t.Nat64),
        matches_length: t.Nat64,
        items_page: t.Opt(t.Nat64),
        items: t.Vec(t.Tuple(t.Text, u)),
        items_length: t.Nat64
    }), Te = t.Record({
        updated_at: t.Nat64,
        created_at: t.Nat64,
        version: t.Opt(t.Nat64),
        bn_id: t.Opt(t.Text)
    }), ge = t.Record({
        matches_pages: t.Opt(t.Nat64),
        matches_length: t.Nat64,
        items_page: t.Opt(t.Nat64),
        items: t.Vec(t.Tuple(t.Text, F)),
        items_length: t.Nat64
    }), Ne = t.Record({
        stable: t.Nat64,
        heap: t.Nat64
    }), Ee = t.Record({
        metadata: t.Vec(t.Tuple(t.Text, t.Text)),
        scope: y,
        expires_at: t.Opt(t.Nat64)
    }), Se = t.Record({
        controller: Ee,
        controllers: t.Vec(t.Principal)
    }), _t = t.Record({
        data: t.Vec(t.Nat8),
        description: t.Opt(t.Text),
        version: t.Opt(t.Nat64)
    }), he = t.Record({
        max_capacity: t.Opt(t.Nat32),
        memory: t.Opt(D),
        max_size: t.Opt(t.Nat),
        read: V,
        version: t.Opt(t.Nat64),
        mutable_permissions: t.Opt(t.Bool),
        rate_config: t.Opt(mt),
        write: V,
        max_changes_per_user: t.Opt(t.Nat32)
    }), xe = t.Record({
        content: t.Vec(t.Nat8),
        batch_id: t.Nat,
        order_id: t.Opt(t.Nat)
    }), Pe = t.Record({
        chunk_id: t.Nat
    });
    return t.Service({
        commit_asset_upload: t.Func([
            e
        ], [], []),
        count_assets: t.Func([
            t.Text,
            a
        ], [
            t.Nat64
        ], [
            "query"
        ]),
        count_collection_assets: t.Func([
            t.Text
        ], [
            t.Nat64
        ], [
            "query"
        ]),
        count_collection_docs: t.Func([
            t.Text
        ], [
            t.Nat64
        ], [
            "query"
        ]),
        count_docs: t.Func([
            t.Text,
            a
        ], [
            t.Nat64
        ], [
            "query"
        ]),
        del_asset: t.Func([
            t.Text,
            t.Text
        ], [], []),
        del_assets: t.Func([
            t.Text
        ], [], []),
        del_controllers: t.Func([
            p
        ], [
            t.Vec(t.Tuple(t.Principal, d))
        ], []),
        del_custom_domain: t.Func([
            t.Text
        ], [], []),
        del_doc: t.Func([
            t.Text,
            t.Text,
            _
        ], [], []),
        del_docs: t.Func([
            t.Text
        ], [], []),
        del_filtered_assets: t.Func([
            t.Text,
            a
        ], [], []),
        del_filtered_docs: t.Func([
            t.Text,
            a
        ], [], []),
        del_many_assets: t.Func([
            t.Vec(t.Tuple(t.Text, t.Text))
        ], [], []),
        del_many_docs: t.Func([
            t.Vec(t.Tuple(t.Text, t.Text, _))
        ], [], []),
        del_rule: t.Func([
            m,
            t.Text,
            g
        ], [], []),
        deposit_cycles: t.Func([
            N
        ], [], []),
        get_asset: t.Func([
            t.Text,
            t.Text
        ], [
            t.Opt(u)
        ], [
            "query"
        ]),
        get_auth_config: t.Func([], [
            t.Opt(b)
        ], [
            "query"
        ]),
        get_config: t.Func([], [
            ue
        ], []),
        get_db_config: t.Func([], [
            t.Opt(k)
        ], [
            "query"
        ]),
        get_doc: t.Func([
            t.Text,
            t.Text
        ], [
            t.Opt(F)
        ], [
            "query"
        ]),
        get_many_assets: t.Func([
            t.Vec(t.Tuple(t.Text, t.Text))
        ], [
            t.Vec(t.Tuple(t.Text, t.Opt(u)))
        ], [
            "query"
        ]),
        get_many_docs: t.Func([
            t.Vec(t.Tuple(t.Text, t.Text))
        ], [
            t.Vec(t.Tuple(t.Text, t.Opt(F)))
        ], [
            "query"
        ]),
        get_rule: t.Func([
            m,
            t.Text
        ], [
            t.Opt(I)
        ], [
            "query"
        ]),
        get_storage_config: t.Func([], [
            Z
        ], [
            "query"
        ]),
        http_request: t.Func([
            me
        ], [
            ye
        ], [
            "query"
        ]),
        http_request_streaming_callback: t.Func([
            L
        ], [
            Oe
        ], [
            "query"
        ]),
        init_asset_upload: t.Func([
            fe
        ], [
            Re
        ], []),
        list_assets: t.Func([
            t.Text,
            a
        ], [
            Ae
        ], [
            "query"
        ]),
        list_controllers: t.Func([], [
            t.Vec(t.Tuple(t.Principal, d))
        ], [
            "query"
        ]),
        list_custom_domains: t.Func([], [
            t.Vec(t.Tuple(t.Text, Te))
        ], [
            "query"
        ]),
        list_docs: t.Func([
            t.Text,
            a
        ], [
            ge
        ], [
            "query"
        ]),
        list_rules: t.Func([
            m
        ], [
            t.Vec(t.Tuple(t.Text, I))
        ], [
            "query"
        ]),
        memory_size: t.Func([], [
            Ne
        ], [
            "query"
        ]),
        set_auth_config: t.Func([
            b
        ], [], []),
        set_controllers: t.Func([
            Se
        ], [
            t.Vec(t.Tuple(t.Principal, d))
        ], []),
        set_custom_domain: t.Func([
            t.Text,
            t.Opt(t.Text)
        ], [], []),
        set_db_config: t.Func([
            k
        ], [], []),
        set_doc: t.Func([
            t.Text,
            t.Text,
            _t
        ], [
            F
        ], []),
        set_many_docs: t.Func([
            t.Vec(t.Tuple(t.Text, t.Text, _t))
        ], [
            t.Vec(t.Tuple(t.Text, F))
        ], []),
        set_rule: t.Func([
            m,
            t.Text,
            he
        ], [
            I
        ], []),
        set_storage_config: t.Func([
            Z
        ], [], []),
        upload_asset_chunk: t.Func([
            xe
        ], [
            Pe
        ], [])
    });
};
;
var Ct = ({ satelliteId: t, container: e })=>{
    let { satelliteId: o } = lt({
        satelliteId: t
    }), { container: s } = pt({
        container: e
    });
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(s) && s !== !1) {
        let { host: r, protocol: n } = new URL(s === !0 ? P : s);
        return `${n}//${o ?? "unknown"}.${r.replace("127.0.0.1", "localhost")}`;
    }
    return `https://${o ?? "unknown"}.icp0.io`;
}, lt = ({ satelliteId: t })=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(t) ? {
        satelliteId: t
    } : f.getInstance().get() ?? {
        satelliteId: void 0
    }, pt = ({ container: t })=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(t) ? {
        container: t
    } : f.getInstance().get() ?? {
        container: void 0
    };
var l = (t)=>kt({
        idlFactory: vt,
        buildType: "stock",
        ...t
    }), bt = ({ idlFactory: t, ...e })=>kt({
        idlFactory: t,
        buildType: "extended",
        ...e
    }), kt = async ({ satelliteId: t, container: e, ...o })=>{
    let { satelliteId: s } = lt({
        satelliteId: t
    });
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertNonNullish"])(s, "No satellite ID defined. Did you initialize Juno?");
    let { container: r } = pt({
        container: e
    });
    return await U.getInstance().getActor({
        satelliteId: s,
        container: r,
        ...o
    });
};
var Ft = async ({ collection: t, key: e, satellite: o })=>{
    let { get_doc: s } = await l(o), r = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(await s(t, e));
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(r)) return M({
        doc: r,
        key: e
    });
}, Mt = async ({ docs: t, satellite: e })=>{
    let { get_many_docs: o } = await l(e), s = t.map(({ collection: i, key: a })=>[
            i,
            a
        ]), r = await o(s), n = [];
    for (let [i, a] of r){
        let p = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(a);
        n.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(p) ? await M({
            key: i,
            doc: p
        }) : void 0);
    }
    return n;
}, jt = async ({ collection: t, doc: e, satellite: o })=>{
    let { set_doc: s } = await l(o), { key: r } = e, n = await it(e), i = await s(t, r, n);
    return await M({
        key: r,
        doc: i
    });
}, Vt = async ({ docs: t, satellite: e })=>{
    let { set_many_docs: o } = await l(e), s = [];
    for (let { collection: i, doc: a } of t){
        let { key: p } = a;
        s.push([
            i,
            p,
            await it(a)
        ]);
    }
    let r = await o(s), n = [];
    for (let [i, a] of r)n.push(await M({
        key: i,
        doc: a
    }));
    return n;
}, Jt = async ({ collection: t, doc: e, satellite: o })=>{
    let { del_doc: s } = await l(o), { key: r } = e;
    return s(t, r, at(e));
}, Kt = async ({ docs: t, satellite: e })=>{
    let { del_many_docs: o } = await l(e), s = t.map(({ collection: r, doc: n })=>[
            r,
            n.key,
            at(n)
        ]);
    await o(s);
}, Bt = async ({ collection: t, filter: e, satellite: o })=>{
    let { del_filtered_docs: s } = await l(o);
    return s(t, S(e));
}, qt = async ({ collection: t, filter: e, satellite: o })=>{
    let { list_docs: s } = await l(o), { items: r, items_page: n, items_length: i, matches_length: a, matches_pages: p } = await s(t, S(e)), y = [];
    for (let [d, _] of r){
        let { data: m, owner: g, description: N, version: A, ...E } = _;
        y.push({
            key: d,
            description: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(N),
            owner: g.toText(),
            data: await Pt({
                data: m
            }),
            version: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(A),
            ...E
        });
    }
    return {
        items: y,
        items_length: i,
        items_page: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(n),
        matches_length: a,
        matches_pages: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(p)
    };
}, $t = async ({ collection: t, filter: e, satellite: o })=>{
    let { count_docs: s } = await l(o);
    return s(t, S(e));
};
;
var c = (t)=>t !== void 0 ? t : z() ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$agent$2f$lib$2f$esm$2f$auth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AnonymousIdentity"];
var Ht = async ({ satellite: t, ...e })=>{
    let o = c(t?.identity);
    return await Ft({
        ...e,
        satellite: {
            ...t,
            identity: o
        }
    });
}, cs = async ({ satellite: t, ...e })=>{
    let o = c(t?.identity);
    return await Mt({
        ...e,
        satellite: {
            ...t,
            identity: o
        }
    });
}, Gt = async ({ satellite: t, ...e })=>{
    let o = c(t?.identity);
    return await jt({
        ...e,
        satellite: {
            ...t,
            identity: o
        }
    });
}, ls = async ({ satellite: t, ...e })=>{
    let o = c(t?.identity);
    return await Vt({
        ...e,
        satellite: {
            ...t,
            identity: o
        }
    });
}, ps = async ({ satellite: t, ...e })=>{
    let o = c(t?.identity);
    return await Jt({
        ...e,
        satellite: {
            ...t,
            identity: o
        }
    });
}, ds = async ({ satellite: t, ...e })=>{
    let o = c(t?.identity);
    return await Kt({
        ...e,
        satellite: {
            ...t,
            identity: o
        }
    });
}, us = async ({ satellite: t, filter: e, ...o })=>{
    let s = c(t?.identity);
    return await Bt({
        ...o,
        filter: e ?? {},
        satellite: {
            ...t,
            identity: s
        }
    });
}, ms = async ({ satellite: t, filter: e, ...o })=>{
    let s = c(t?.identity);
    return await qt({
        ...o,
        filter: e ?? {},
        satellite: {
            ...t,
            identity: s
        }
    });
}, _s = async ({ satellite: t, filter: e, ...o })=>{
    let s = c(t?.identity);
    return await $t({
        ...o,
        filter: e ?? {},
        satellite: {
            ...t,
            identity: s
        }
    });
};
var Wt = async (t)=>{
    let e = z();
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(e)) throw new G("No identity to initialize the user. Have you initialized Juno?");
    let o = e.getPrincipal().toText(), s = ()=>Ht({
            collection: "#user",
            key: o
        }), r = await s();
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(r)) return r;
    try {
        return await Be({
            userId: o,
            provider: t
        });
    } catch (n) {
        if (rt({
            error: n,
            type: xt
        })) {
            let i = await s();
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(i)) return i;
        }
        throw n;
    }
}, Be = ({ userId: t, ...e })=>Gt({
        collection: "#user",
        doc: {
            key: t,
            data: e
        }
    });
var R, dt = async (t)=>{
    if (R = R ?? await W(), !(await R?.isAuthenticated() ?? !1)) return;
    let o = await Wt(t);
    T.getInstance().set(o);
}, He = (t)=>new Promise(async (e, o)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(R)) {
            o(new $("No client is ready to perform a sign-in. Have you initialized the Satellite?"));
            return;
        }
        let s = t?.provider ?? new B({});
        await R.login({
            onSuccess: async ()=>{
                await dt(s.id), e();
            },
            onError: (r)=>{
                if (r === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$auth$2d$client$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ERROR_USER_INTERRUPT"]) {
                    o(new H(r));
                    return;
                }
                o(new q(r));
            },
            maxTimeToLive: t?.maxTimeToLive ?? yt,
            allowPinAuthentication: t?.allowPin ?? Ot,
            ...t?.derivationOrigin !== void 0 && {
                derivationOrigin: t.derivationOrigin
            },
            ...s.signInOptions({
                windowed: t?.windowed
            })
        });
    }), ut = async ()=>{
    await R?.logout(), R = null, T.getInstance().reset(), U.getInstance().reset(), w.getInstance().reset(), R = await W();
}, z = ()=>R?.getIdentity(), Ge = async ()=>(R ?? await W()).getIdentity();
var zt = (t)=>{
    let e = t === !0 ? "./workers/auth.worker.js" : t, o = new Worker(e), s = async ()=>{
        tt({
            message: "junoSignOutAuthTimer"
        }), await ut();
    };
    return o.onmessage = async ({ data: r })=>{
        let { msg: n, data: i } = r;
        switch(n){
            case "junoSignOutAuthTimer":
                await s();
                return;
            case "junoDelegationRemainingTime":
                tt({
                    message: "junoDelegationRemainingTime",
                    detail: i?.authRemainingTime
                });
                return;
        }
    }, T.getInstance().subscribe((r)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(r)) {
            o.postMessage({
                msg: "junoStopAuthTimer"
            });
            return;
        }
        o.postMessage({
            msg: "junoStartAuthTimer"
        });
    });
};
var Xt = ()=>{
    let t = ()=>("TURBOPACK compile-time value", "object") < "u" && typeof __TURBOPACK__import$2e$meta__.env < "u" ? __TURBOPACK__import$2e$meta__.env?.VITE_SATELLITE_ID ?? __TURBOPACK__import$2e$meta__.env?.PUBLIC_SATELLITE_ID : void 0;
    return typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] < "u" ? ("TURBOPACK compile-time value", "bkyz2-fmaaa-aaaaa-qaaaq-cai") ?? t() : t();
}, Qt = ()=>{
    let t = ()=>("TURBOPACK compile-time value", "object") < "u" && typeof __TURBOPACK__import$2e$meta__.env < "u" ? __TURBOPACK__import$2e$meta__.env?.VITE_CONTAINER ?? __TURBOPACK__import$2e$meta__.env?.PUBLIC_CONTAINER : void 0;
    return typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] < "u" ? ("TURBOPACK compile-time value", "http://127.0.0.1:5987") ?? t() : t();
};
var qs = async ({ idlFactory: t, satellite: e })=>{
    let o = c(e?.identity);
    return await bt({
        idlFactory: t,
        ...e,
        identity: o
    });
};
;
;
;
var Zt = async ({ asset: { data: t, filename: e, collection: o, headers: s, token: r, fullPath: n, encoding: i, description: a }, actor: p, init_asset_upload: y })=>{
    let { batch_id: d } = await y({
        collection: o,
        full_path: n,
        name: e,
        token: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])(r),
        encoding_type: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])(i),
        description: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])(a)
    }), _ = 19e5, m = [], g = K() ? new Blob([
        await t.arrayBuffer()
    ]) : t, N = 0n;
    for(let u = 0; u < g.size; u += _){
        let h = g.slice(u, u + _);
        m.push({
            batchId: d,
            chunk: h,
            actor: p,
            orderId: N
        }), N++;
    }
    let A = [];
    for await (let u of We({
        uploadChunks: m
    }))A = [
        ...A,
        ...u
    ];
    let E = s.find(([u, h])=>u.toLowerCase() === "content-type") === void 0 && t.type !== void 0 && t.type !== "" ? [
        [
            "Content-Type",
            t.type
        ]
    ] : void 0;
    await p.commit_asset_upload({
        batch_id: d,
        chunk_ids: A.map(({ chunk_id: u })=>u),
        headers: [
            ...s,
            ...E ?? []
        ]
    });
};
async function* We({ uploadChunks: t, limit: e = 12 }) {
    for(let o = 0; o < t.length; o = o + e){
        let s = t.slice(o, o + e);
        yield await Promise.all(s.map((r)=>ze(r)));
    }
}
var ze = async ({ batchId: t, chunk: e, actor: o, orderId: s })=>o.upload_asset_chunk({
        batch_id: t,
        content: new Uint8Array(await e.arrayBuffer()),
        order_id: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNullable"])(s)
    });
var Dt = async ({ satellite: t, ...e })=>{
    let o = await l(t);
    await Zt({
        actor: o,
        asset: e,
        init_asset_upload: async (r)=>await o.init_asset_upload(r)
    });
}, It = async ({ collection: t, satellite: e, filter: o })=>{
    let { list_assets: s } = await l(e), { items: r, items_length: n, items_page: i, matches_length: a, matches_pages: p } = await s(t, S(o));
    return {
        items: r.map(([y, d])=>d),
        items_length: n,
        items_page: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(i),
        matches_length: a,
        matches_pages: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(p)
    };
}, Lt = async ({ collection: t, satellite: e, filter: o })=>{
    let { count_assets: s } = await l(e);
    return s(t, S(o));
}, te = async ({ collection: t, fullPath: e, satellite: o })=>(await l(o)).del_asset(t, e), ee = async ({ assets: t, satellite: e })=>{
    let { del_many_assets: o } = await l(e), s = t.map(({ collection: r, fullPath: n })=>[
            r,
            n
        ]);
    await o(s);
}, oe = async ({ collection: t, satellite: e, filter: o })=>{
    let { del_filtered_assets: s } = await l(e);
    return s(t, S(o));
}, se = async ({ collection: t, fullPath: e, satellite: o })=>{
    let { get_asset: s } = await l(o);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(await s(t, e));
}, re = async ({ assets: t, satellite: e })=>{
    let { get_many_assets: o } = await l(e), s = t.map(({ collection: n, fullPath: i })=>[
            n,
            i
        ]);
    return (await o(s)).map(([n, i])=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(i));
};
var ne = (t)=>btoa([
        ...t
    ].map((e)=>String.fromCharCode(e)).join(""));
var sr = (t)=>ae(t), rr = (t)=>ae({
        filename: t.data.name,
        ...t
    }), ae = async ({ filename: t, data: e, collection: o, headers: s = [], fullPath: r, token: n, satellite: i, encoding: a, description: p })=>{
    let y = c(i?.identity), d = decodeURI(t), _ = r ?? `/${o}/${d}`, m = {
        ...i,
        identity: y
    };
    return await Dt({
        data: e,
        filename: d,
        collection: o,
        token: n,
        headers: s,
        fullPath: _,
        encoding: a,
        satellite: m,
        description: p
    }), {
        downloadUrl: ce({
            satellite: m,
            assetKey: {
                fullPath: _,
                token: n
            }
        }),
        fullPath: _,
        name: d
    };
}, nr = async ({ collection: t, satellite: e, filter: o })=>{
    let s = {
        ...e,
        identity: c(e?.identity)
    }, { items: r, ...n } = await It({
        collection: t,
        satellite: s,
        filter: o ?? {}
    }), i = r.map(({ key: { full_path: a, token: p, name: y, owner: d, description: _ }, headers: m, encodings: g, created_at: N, updated_at: A })=>{
        let E = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(p);
        return {
            fullPath: a,
            description: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNullable"])(_),
            name: y,
            downloadUrl: ce({
                satellite: s,
                assetKey: {
                    fullPath: a,
                    token: E
                }
            }),
            token: E,
            headers: m,
            encodings: g.reduce((u, [h, { modified: b, sha256: j, total_length: k }])=>({
                    ...u,
                    [h]: {
                        modified: b,
                        sha256: ne(j),
                        total_length: k
                    }
                }), {}),
            owner: d.toText(),
            created_at: N,
            updated_at: A
        };
    });
    return {
        items: i,
        assets: i,
        ...n
    };
}, ir = async ({ collection: t, satellite: e, filter: o })=>{
    let s = {
        ...e,
        identity: c(e?.identity)
    };
    return await Lt({
        collection: t,
        satellite: s,
        filter: o ?? {}
    });
}, ar = ({ collection: t, fullPath: e, satellite: o })=>te({
        collection: t,
        fullPath: e,
        satellite: {
            ...o,
            identity: c(o?.identity)
        }
    }), cr = ({ assets: t, satellite: e })=>ee({
        assets: t,
        satellite: {
            ...e,
            identity: c(e?.identity)
        }
    }), lr = async ({ collection: t, satellite: e, filter: o })=>{
    let s = {
        ...e,
        identity: c(e?.identity)
    };
    return await oe({
        collection: t,
        satellite: s,
        filter: o ?? {}
    });
}, pr = async ({ satellite: t, ...e })=>{
    let o = c(t?.identity);
    return await se({
        ...e,
        satellite: {
            ...t,
            identity: o
        }
    });
}, dr = async ({ satellite: t, ...e })=>{
    let o = c(t?.identity);
    return await re({
        ...e,
        satellite: {
            ...t,
            identity: o
        }
    });
}, ce = ({ assetKey: { fullPath: t, token: e }, satellite: o })=>{
    let s = {
        ...o,
        identity: c(o?.identity)
    };
    return `${Ct(s)}${t}${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nonNullish"])(e) ? `?token=${e}` : ""}`;
};
var Ze = (t)=>{
    let e = t?.satelliteId ?? Xt();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dfinity$2f$utils$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertNonNullish"])(e, "Satellite ID is not configured. Juno cannot be initialized.");
    let o = t?.container ?? Qt();
    return {
        satelliteId: e,
        internetIdentityId: t?.internetIdentityId,
        workers: t?.workers,
        container: o
    };
}, Ar = (t)=>De(t), De = async (t)=>{
    let e = Ze(t);
    f.getInstance().set(e), await dt();
    let o = e.workers?.auth !== void 0 ? zt(e.workers.auth) : void 0;
    return [
        ...o ? [
            o
        ] : []
    ];
}, Tr = (t)=>T.getInstance().subscribe(t);
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/nanoid/url-alphabet/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "urlAlphabet": (()=>urlAlphabet)
});
const urlAlphabet = 'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';
}}),
"[project]/node_modules/nanoid/index.browser.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* @ts-self-types="./index.d.ts" */ __turbopack_context__.s({
    "customAlphabet": (()=>customAlphabet),
    "customRandom": (()=>customRandom),
    "nanoid": (()=>nanoid),
    "random": (()=>random)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nanoid$2f$url$2d$alphabet$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/nanoid/url-alphabet/index.js [app-client] (ecmascript)");
;
;
let random = (bytes)=>crypto.getRandomValues(new Uint8Array(bytes));
let customRandom = (alphabet, defaultSize, getRandom)=>{
    let mask = (2 << Math.log2(alphabet.length - 1)) - 1;
    let step = -~(1.6 * mask * defaultSize / alphabet.length);
    return (size = defaultSize)=>{
        let id = '';
        while(true){
            let bytes = getRandom(step);
            let j = step | 0;
            while(j--){
                id += alphabet[bytes[j] & mask] || '';
                if (id.length >= size) return id;
            }
        }
    };
};
let customAlphabet = (alphabet, size = 21)=>customRandom(alphabet, size | 0, random);
let nanoid = (size = 21)=>{
    let id = '';
    let bytes = crypto.getRandomValues(new Uint8Array(size |= 0));
    while(size--){
        id += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nanoid$2f$url$2d$alphabet$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["urlAlphabet"][bytes[size] & 63];
    }
    return id;
};
}}),
}]);

//# sourceMappingURL=node_modules_a193ae16._.js.map