/**
 * This module provides a function to request a verifiable presentation to an issuer through an Identity Provider.
 *
 * More info about the flow: https://github.com/dfinity/internet-identity/blob/main/docs/vc-spec.md
 *
 * There is only one function exposed: `requestVerifiablePresentation`.
 */
import type { Principal } from "@dfinity/principal";
/**
 * Helper types.
 */
type CredentialsArguments = Record<string, string | number>;
type CredentialType = string;
/**
 * Types used to request the verifiable presentation.
 */
export type CredentialRequestSpec = {
    credentialType: CredentialType;
    arguments: CredentialsArguments;
};
export type CredentialRequestData = {
    credentialSpec: CredentialRequestSpec;
    credentialSubject: Principal;
};
export type IssuerData = {
    origin: string;
    canisterId: Principal;
};
declare const VC_REQUEST_METHOD = "request_credential";
declare const JSON_RPC_VERSION = "2.0";
export type CredentialsRequest = {
    id: FlowId;
    jsonrpc: typeof JSON_RPC_VERSION;
    method: typeof VC_REQUEST_METHOD;
    params: {
        issuer: {
            origin: string;
            canisterId: string;
        };
        credentialSpec: CredentialRequestSpec;
        credentialSubject: string;
        derivationOrigin?: string;
    };
};
/**
 * Output types
 */
type VerifiablePresentation = string;
export type VerifiablePresentationResponse = {
    Ok: VerifiablePresentation;
} | {
    Err: string;
};
export type OnSuccessCallback = (verifiablePresentation: VerifiablePresentationResponse) => void | Promise<void>;
export type OnErrorCallback = (err?: string) => void | Promise<void>;
type FlowId = string;
export declare const ERROR_USER_INTERRUPT = "UserInterrupt";
export type RequestVerifiablePresentationParams = {
    onSuccess: OnSuccessCallback;
    onError: (err?: string) => void | Promise<void>;
    credentialData: CredentialRequestData;
    issuerData: IssuerData;
    windowOpenerFeatures?: string;
    derivationOrigin?: string;
    identityProvider: URL;
};
/**
 * Function to request a verifiable presentation to an issuer through an Identity Provider.
 *
 * Summary of the flow:
 * - Open a new window or tab with the Identity Provider.
 * - Wait for a window post message from the Identity Provider.
 * - Send a request to the Identity Provider through the window post message.
 * - Wait for the response from the Identity Provider.
 * - Call `onSuccess` callback when the flow was successful. Not necessarily that the credential was received.
 * - Call `onError` callback when the flow has some technical error or the user closes the window.
 *
 * @param {RequestVerifiablePresentationParams} params
 * @param {OnSuccessCallback} params.onSuccess - Callback function that is called when the flow with the Identity Provider is successful.
 * It receives either the verifiable presentation or an message that the credential was not received.
 * The message doesn't expose different errors to keep the privacy of the user.
 * @param {OnErrorCallback} params.onError - Callback function that is called when the flow has some technical error or the user closes the window.
 * @param {CredentialRequestData} params.credentialData - Data to request the verifiable credential.
 * @param {IssuerData} params.issuerData - Data of the issuer.
 * @param {string} params.windowOpenerFeatures - Features of the window that opens the Identity Provider.
 *   @example "toolbar=0,location=0,menubar=0,width=500,height=500,left=100,top=100"
 * @param {string} params.derivationOrigin - Indicates an origin that should be used for principal derivation.
 * It's the same value as the one used when logging in.
 * More info: https://internetcomputer.org/docs/current/references/ii-spec/#alternative-frontend-origins
 * @param {string} params.identityProvider - URL of the Identity Provider.
 * @returns {void}
 */
export declare const requestVerifiablePresentation: ({ onSuccess, onError, credentialData, issuerData, windowOpenerFeatures, derivationOrigin, identityProvider, }: RequestVerifiablePresentationParams) => void;
export {};
