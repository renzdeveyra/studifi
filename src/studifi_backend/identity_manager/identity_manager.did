type StudiFiError = variant {
  NotFound : text;
  AlreadyExists : text;
  Unauthorized : text;
  InvalidInput : text;
  InternalError : text;
  InsufficientFunds : text;
  Expired : text;
  NetworkError : text;
};

type StudiFiResult = variant {
  Ok : StudentProfile;
  Err : StudiFiError;
};

type StudiFiResultText = variant {
  Ok : text;
  Err : StudiFiError;
};

type StudiFiResultUnit = variant {
  Ok;
  Err : StudiFiError;
};

type StudiFiResultVerification = variant {
  Ok : UniversityVerification;
  Err : StudiFiError;
};

type KycStatus = variant {
  Pending;
  InProgress;
  Verified;
  Rejected;
  Expired;
};

type StudentProfile = record {
  id : principal;
  email : text;
  full_name : text;
  university : text;
  student_id : text;
  program : text;
  year_of_study : nat32;
  gpa : float64;
  is_verified : bool;
  kyc_status : KycStatus;
  created_at : nat64;
  updated_at : nat64;
};

type VerificationRequest = record {
  student_id : text;
  university : text;
  email : text;
  full_name : text;
  program : text;
  year_of_study : nat32;
  expected_graduation : text;
  additional_documents : vec text;
};

type UniversityVerification = record {
  university : text;
  student_id : text;
  is_valid : bool;
  verified_at : nat64;
  verification_method : text;
  confidence_score : float64;
};

type VerificationStats = record {
  total_students : nat32;
  verified_students : nat32;
  pending_verifications : nat32;
  rejected_verifications : nat32;
  expired_verifications : nat32;
  average_verification_time_hours : float64;
};

type StudentSearchFilters = record {
  university : opt text;
  program : opt text;
  year_of_study : opt nat32;
  kyc_status : opt KycStatus;
  is_verified : opt bool;
  min_gpa : opt float64;
  max_gpa : opt float64;
};

type PaginationParams = record {
  offset : nat32;
  limit : nat32;
};

type PaginatedResponse = record {
  items : vec StudentProfile;
  total_count : nat32;
  offset : nat32;
  limit : nat32;
  has_more : bool;
};

type UniversityApiConfig = record {
  university_name : text;
  api_endpoint : text;
  api_key_hash : text;
  supported_verification_types : vec text;
  rate_limit_per_hour : nat32;
  is_active : bool;
};

type VerificationPriority = variant {
  Low;
  Normal;
  High;
  Urgent;
};

type Statistics = record {
  total_count : nat32;
  active_count : nat32;
  completed_count : nat32;
  failed_count : nat32;
  total_amount : nat64;
  average_amount : nat64;
};

service : {
  // Core profile management
  create_student_profile : (VerificationRequest) -> (StudiFiResult);
  get_student_profile : (principal) -> (opt StudentProfile) query;
  get_my_profile : () -> (opt StudentProfile) query;
  update_student_profile : (opt text, opt text, opt text, opt nat32) -> (StudiFiResult);
  delete_my_profile : () -> (StudiFiResultUnit);
  
  // KYC and verification
  update_kyc_status : (KycStatus) -> (StudiFiResult);
  verify_student : (float64) -> (StudiFiResult);
  verify_with_university_api : (text, text) -> (StudiFiResultVerification);
  batch_verify_students : (vec VerificationRequest, VerificationPriority) -> (vec StudiFiResultVerification);
  is_verification_expired : (principal) -> (bool) query;
  generate_verification_report : (principal) -> (StudiFiResultText) query;
  
  // Search and queries
  get_all_verified_students : () -> (vec StudentProfile) query;
  search_students : (StudentSearchFilters, opt PaginationParams) -> (PaginatedResponse) query;
  get_verification_stats : () -> (VerificationStats) query;
  get_platform_stats : () -> (Statistics) query;
  
  // University configuration (admin functions)
  add_university_config : (UniversityApiConfig) -> (StudiFiResultUnit);
  get_university_configs : () -> (vec UniversityApiConfig) query;
}
