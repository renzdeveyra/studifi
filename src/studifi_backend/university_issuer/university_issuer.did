type StudiFiError = variant {
  NotFound : text;
  AlreadyExists : text;
  Unauthorized : text;
  InvalidInput : text;
  InternalError : text;
  InsufficientFunds : text;
  Expired : text;
  NetworkError : text;
};

type StudiFiResult = variant {
  Ok : text;
  Err : StudiFiError;
};

type StudiFiResultUnit = variant {
  Ok;
  Err : StudiFiError;
};

// Verifiable Credentials Issuer API Types
type CredentialRequest = record {
  credential_subject : text;
  credential_spec : CredentialSpec;
};

type CredentialSpec = record {
  credential_type : text;
  arguments : vec record { text; CredentialArgument };
};

type CredentialArgument = variant {
  Text : text;
  Number : float64;
  Boolean : bool;
};

type PrepareCredentialRequest = record {
  signed_id_alias : SignedIdAlias;
  credential_spec : CredentialSpec;
};

type SignedIdAlias = record {
  credential_jws : text;
};

type PreparedCredentialData = record {
  prepared_context : blob;
};

type GetCredentialRequest = record {
  signed_id_alias : SignedIdAlias;
  credential_spec : CredentialSpec;
  prepared_context : blob;
};

type IssuedCredentialData = record {
  vc_jws : text;
};

type Statistics = record {
  total_count : nat32;
  active_count : nat32;
  completed_count : nat32;
  failed_count : nat32;
  total_amount : nat64;
  average_amount : nat64;
};

service : {
  // Verifiable Credentials Issuer API (required by IC VC spec)
  vc_consent_message : (CredentialSpec) -> (StudiFiResult) query;
  derivation_origin : () -> (StudiFiResult) query;
  prepare_credential : (PrepareCredentialRequest) -> (variant { Ok : PreparedCredentialData; Err : StudiFiError });
  get_credential : (GetCredentialRequest) -> (variant { Ok : IssuedCredentialData; Err : StudiFiError });
  
  // University management functions
  add_student : (text, text, text, nat32) -> (StudiFiResultUnit);
  verify_student : (text) -> (StudiFiResult) query;
  get_platform_stats : () -> (Statistics) query;
}
